{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PixTrail Tutorials","text":"<p>Welcome to the PixTrail tutorials section! Here you'll find step-by-step guides to help you get the most out of PixTrail. These tutorials are designed to cover both basic usage and more advanced features.</p>"},{"location":"#beginner-tutorials","title":"Beginner Tutorials","text":""},{"location":"#photo-journey","title":"Photo Journey","text":"<p>Learn how to create a route visualization from a set of photos taken during a journey. This tutorial covers:</p> <ul> <li>Uploading photos with GPS data</li> <li>Viewing the route on a map</li> <li>Exploring basic statistics</li> <li>Exporting a GPX file for use in other applications</li> </ul> <p>This is the perfect starting point if you're new to PixTrail.</p>"},{"location":"#batch-processing","title":"Batch Processing","text":"<p>Learn how to process large collections of photos efficiently. This tutorial covers:</p> <ul> <li>Selecting and processing entire directories</li> <li>Using recursive processing for nested folders</li> <li>Setting depth limits for directory traversal</li> <li>Optimizing performance for large collections</li> </ul>"},{"location":"#intermediate-tutorials","title":"Intermediate Tutorials","text":""},{"location":"#custom-visualizations","title":"Custom Visualizations","text":"<p>Take your map visualizations to the next level. This tutorial covers:</p> <ul> <li>Customizing the map appearance</li> <li>Using heatmaps to visualize density</li> <li>Configuring marker clustering</li> <li>Adjusting visualization parameters</li> <li>Working with the statistics charts</li> </ul>"},{"location":"#advanced-statistics","title":"Advanced Statistics","text":"<p>Dive deeper into the statistics features of PixTrail. Learn about:</p> <ul> <li>Understanding the elevation profile</li> <li>Analyzing speed patterns</li> <li>Interpreting time-based data</li> <li>Exporting statistics reports</li> </ul>"},{"location":"#advanced-tutorials","title":"Advanced Tutorials","text":""},{"location":"#extending-modules","title":"Extending Modules","text":"<p>Learn how to extend PixTrail with your own custom modules. This tutorial is for developers who want to add new features to the application. It covers:</p> <ul> <li>Understanding the modular architecture</li> <li>Creating a new JavaScript module</li> <li>Adding corresponding CSS styles</li> <li>Integrating with existing modules</li> <li>Building more complex extensions</li> </ul> <p>This tutorial demonstrates how to create two example modules: 1. A photo carousel for viewing images 2. A route animation feature for visualizing journeys over time</p>"},{"location":"#cli-tutorials","title":"CLI Tutorials","text":""},{"location":"#automation-with-cli","title":"Automation with CLI","text":"<p>Learn how to use PixTrail's command-line interface for automation. This tutorial covers:</p> <ul> <li>Basic CLI usage</li> <li>Creating batch processing scripts</li> <li>Integrating with other tools</li> <li>Setting up automated workflows</li> </ul>"},{"location":"#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial follows a similar structure:</p> <ol> <li>Introduction - What you'll learn and prerequisites</li> <li>Setup - Any preparation needed</li> <li>Step-by-Step Instructions - Detailed guidance with screenshots</li> <li>Examples - Practical examples to follow along</li> <li>Troubleshooting - Solutions to common issues</li> <li>Next Steps - Suggestions for further learning</li> </ol>"},{"location":"#request-a-tutorial","title":"Request a Tutorial","text":"<p>Don't see what you're looking for? Open an issue on the GitHub repository to request a new tutorial topic.</p>"},{"location":"architecture/","title":"PixTrail Architecture","text":"<p>This document provides an overview of the PixTrail application architecture, focusing on its modular design, component interactions, and the reasoning behind key architectural decisions.</p>"},{"location":"architecture/#architectural-overview","title":"Architectural Overview","text":"<p>PixTrail follows a modular architecture with a clear separation of concerns. The application consists of two main components:</p> <ol> <li>Python Backend: Handles file processing, EXIF data extraction, and GPX file generation</li> <li>JavaScript Frontend: Provides the web interface with interactive maps and visualizations</li> </ol> <p>The architecture follows these key principles: - Modularity: Components have specific responsibilities and can be developed/tested independently - Reusability: Common functionality is extracted into utility modules - Extensibility: New features can be added without modifying existing code - Progressive Enhancement: Core functionality works via command line, while the web interface provides enhanced features</p>"},{"location":"architecture/#system-components","title":"System Components","text":""},{"location":"architecture/#core-components","title":"Core Components","text":"<pre><code>                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502  Command Line   \u2502\n                 \u2502   Interface     \u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Web Interface  \u2502\u25c4\u2500\u2500\u2500\u25ba\u2502    Core API     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                        \u2502\n         \u25bc                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 UI Components   \u2502    \u2502  EXIF Reader     \u2502\u25c4\u2500\u2500\u2500\u25ba\u2502  Image Files   \u2502\n\u2502 - Map           \u2502    \u2502  GPX Generator   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502 - Visualizations\u2502    \u2502  File Utilities  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#backend-architecture","title":"Backend Architecture","text":"<p>The Python backend follows a layered architecture:</p> <ol> <li>Interface Layer: Command-line interface and web server</li> <li>Core Layer: Main application logic (PixTrail class)</li> <li>Service Layer: Specialized services (EXIF reading, GPX generation)</li> <li>Utility Layer: Shared functionality (file handling, GPS calculations)</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Interface Layer                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 CLI (cli.py)    \u2502       \u2502 Web Server       \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                     \u2502\n                \u25bc                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Core Layer                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502            PixTrail Class (core.py)         \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                     \u2502\n                \u25bc                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Service Layer                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 EXIF Reader     \u2502       \u2502 GPX Generator    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                     \u2502\n                \u25bc                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Utility Layer                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 File Utils      \u2502       \u2502 Path Utils       \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 GPS Utils       \u2502       \u2502 Date/Time Utils  \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#frontend-architecture","title":"Frontend Architecture","text":"<p>The JavaScript frontend follows a modular component-based architecture:</p> <ol> <li>Main Application: Initializes and coordinates all modules</li> <li>API Client: Handles communication with the backend server</li> <li>Feature Modules: Implement specific UI features (map, heatmap, statistics)</li> <li>Utility Modules: Provide shared functionality (DOM helpers, file utilities)</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Main Application (main.js)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                       Core Modules                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 API Client      \u2502  \u2502 Map Visualization \u2502  \u2502 File Upload  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc                     \u25bc                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Feature Modules  \u2502  \u2502 Feature Modules  \u2502  \u2502 Feature Modules  \u2502\n\u2502 - Heatmap        \u2502  \u2502 - Statistics     \u2502  \u2502 - Clustering     \u2502\n\u2502 - Charts         \u2502  \u2502 - EXIF Reader    \u2502  \u2502 - Drag &amp; Drop    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                     \u2502                      \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                       Utility Modules                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 DOM Helpers     \u2502  \u2502 File Utilities   \u2502  \u2502 GPS Utils    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u2502\n\u2502  \u2502 UI Utilities    \u2502  \u2502 Date/Time Utils  \u2502                   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#module-structure","title":"Module Structure","text":""},{"location":"architecture/#backend-module-structure","title":"Backend Module Structure","text":"<p>The Python backend consists of the following key modules:</p> <ul> <li>core.py: Main PixTrail class with high-level functionality</li> <li>exif_reader.py: EXIF metadata extraction from image files</li> <li>gpx_generator.py: GPX file creation from GPS data</li> <li>cli.py: Command-line interface</li> <li>web/: Web server and API endpoints</li> <li>utils/: Utility functions (file, path, GPS calculations)</li> </ul>"},{"location":"architecture/#frontend-module-structure","title":"Frontend Module Structure","text":"<p>The JavaScript frontend is organized into:</p> <ul> <li>main.js: Application entry point and initialization</li> <li>api/apiClient.js: Communication with the backend server</li> <li>modules/: Feature modules</li> <li>mapVisualization.js: Map display and controls</li> <li>fileUpload.js: File selection and uploading</li> <li>exifReader.js: Browser-based EXIF extraction</li> <li>statistics.js: Route statistics calculation</li> <li>heatmap.js: Heatmap visualization</li> <li>clustering.js: Marker clustering</li> <li>charts.js: Chart creation and management</li> <li>dragAndDrop.js: Drag and drop file handling</li> <li>utils/: Utility modules</li> <li>domHelpers.js: DOM manipulation utilities</li> <li>fileUtils.js: File handling utilities</li> <li>gpsUtils.js: GPS data utilities</li> <li>uiUtils.js: UI helper functions</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#command-line-data-flow","title":"Command-Line Data Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Photos Dir    \u2502\u2500\u2500\u2500\u2500\u25ba\u2502 EXIF Reader\u2502\u2500\u2500\u2500\u2500\u25ba\u2502 GPS Data      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                 \u2502\n                                                 \u25bc\n                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                          \u2502GPX Generator  \u2502\n                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                 \u2502\n                                                 \u25bc\n                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                          \u2502 GPX File      \u2502\n                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#web-interface-data-flow","title":"Web Interface Data Flow","text":""},{"location":"architecture/#server-based-processing","title":"Server-Based Processing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Upload Photos \u2502\u2500\u2500\u2500\u25ba\u2502 Web Server \u2502\u2500\u2500\u2500\u25ba\u2502 EXIF Reader   \u2502\u2500\u2500\u2500\u25ba\u2502 GPS Data   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u25b2                                      \u2502\n                           \u2502                                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Map Display   \u2502\u25c4\u2500\u2500\u2500\u2524 API Client \u2502\u25c4\u2500\u2500\u2500\u2524 GPX Generator \u2502\u25c4\u2500\u2500\u2500\u2524 Process    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#browser-based-processing","title":"Browser-Based Processing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Select Photos \u2502\u2500\u2500\u2500\u25ba\u2502Browser EXIF\u2502\u2500\u2500\u2500\u25ba\u2502 GPS Data      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502 Processing \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n                                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Map Display   \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Visualize     \u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Download GPX  \u2502\u2500\u2500\u2500\u25ba\u2502 API Client \u2502\u2500\u2500\u2500\u25ba\u2502 GPX Generator \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#key-architectural-decisions","title":"Key Architectural Decisions","text":""},{"location":"architecture/#1-hybrid-processing-model","title":"1. Hybrid Processing Model","text":"<p>Decision: Implement a hybrid model with server-side processing for complex formats and client-side processing for JPEG/TIFF.</p> <p>Rationale: - Server-side processing supports all image formats including RAW - Client-side processing improves privacy and performance for common formats - Hybrid approach balances versatility, performance, and user experience</p>"},{"location":"architecture/#2-modular-component-architecture","title":"2. Modular Component Architecture","text":"<p>Decision: Organize the codebase into modular components with clear responsibilities.</p> <p>Rationale: - Easier maintenance as components can be updated independently - Better testability with isolated components - Facilitates collaborative development - Enables feature extensions without modifying existing code</p>"},{"location":"architecture/#3-progressive-enhancement","title":"3. Progressive Enhancement","text":"<p>Decision: Implement core functionality as a command-line tool with optional web interface.</p> <p>Rationale: - Command-line interface works in all environments - Web interface provides enhanced user experience when available - Enables integration with scripts and automation - Supports headless operation for batch processing</p>"},{"location":"architecture/#4-local-first-approach","title":"4. Local-First Approach","text":"<p>Decision: Process all data locally without external services.</p> <p>Rationale: - Respects user privacy by keeping data on their device - Works offline without internet requirements - No dependency on external APIs that could change or be discontinued - Faster processing without network latency</p>"},{"location":"architecture/#5-separation-of-data-processing-and-visualization","title":"5. Separation of Data Processing and Visualization","text":"<p>Decision: Separate the data processing logic from visualization components.</p> <p>Rationale: - Allows processing to work independently of visualization - Enables different visualization approaches using the same processed data - Better organization of codebase - Clearer separation of concerns</p>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/#backend","title":"Backend","text":"<ul> <li>Python 3.6+: Core language for backend functionality</li> <li>exifread / Pillow: EXIF metadata extraction</li> <li>gpxpy: GPX file creation and manipulation</li> <li>Flask: Web server for the web interface</li> <li>argparse: Command-line argument parsing</li> </ul>"},{"location":"architecture/#frontend","title":"Frontend","text":"<ul> <li>JavaScript (ES6+): Core language for frontend functionality</li> <li>Leaflet: Interactive maps</li> <li>Chart.js: Statistical charts and visualizations</li> <li>Leaflet.heat: Heatmap visualization</li> <li>Leaflet.markercluster: Marker clustering</li> <li>EXIF.js: Client-side EXIF extraction</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/#file-handling","title":"File Handling","text":"<ul> <li>Temporary files are automatically cleaned up</li> <li>File paths are sanitized to prevent directory traversal</li> <li>File type detection uses content inspection, not just extensions</li> </ul>"},{"location":"architecture/#web-interface","title":"Web Interface","text":"<ul> <li>Web server only accepts connections from localhost by default</li> <li>No external API dependencies or data sharing</li> <li>Explicitly allowed file extensions</li> <li>Rate limiting for file uploads</li> </ul>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#large-file-handling","title":"Large File Handling","text":"<ul> <li>Progressive file uploads with progress tracking</li> <li>Memory-efficient processing for large RAW files</li> <li>Streaming processing for large collections</li> <li>Asynchronous processing to avoid blocking the UI</li> </ul>"},{"location":"architecture/#map-visualization","title":"Map Visualization","text":"<ul> <li>Marker clustering for better performance with many points</li> <li>On-demand loading of advanced features</li> <li>Optimized track rendering for complex routes</li> <li>Efficient handling of large datasets</li> </ul>"},{"location":"architecture/#deployment-model","title":"Deployment Model","text":"<p>PixTrail is designed as a local application with several deployment options:</p> <ol> <li>Desktop Application: Installed on user's computer via pip</li> <li>Web Application: Run as a local web server for browser access</li> <li>Command-Line Utility: Used in scripts and batch processing</li> <li>Development Library: Integrated into other Python applications</li> </ol>"},{"location":"architecture/#future-proofing","title":"Future-Proofing","text":"<p>The architecture is designed to accommodate future enhancements:</p> <ul> <li>Video Support: Extension points for video file processing</li> <li>Mobile Integration: API structure suitable for mobile app integration</li> <li>Cloud Synchronization: Data model supports optional cloud sync</li> <li>Plugin System: Modular design could evolve into a full plugin architecture</li> </ul>"},{"location":"architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Module Structure</li> <li>CSS Architecture</li> <li>API Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"cli/","title":"Command Line Interface","text":"<p>This document provides detailed information about the PixTrail command-line interface (CLI), including all available options, usage examples, and automation techniques.</p>"},{"location":"cli/#overview","title":"Overview","text":"<p>The PixTrail CLI provides a powerful and flexible way to extract GPS data from photos and generate GPX files directly from the command line. This interface is particularly useful for:</p> <ul> <li>Processing large batches of photos</li> <li>Integrating with scripts and workflows</li> <li>Automating route generation</li> <li>Server-side processing without a GUI</li> </ul>"},{"location":"cli/#installation","title":"Installation","text":"<p>Before using the CLI, ensure PixTrail is properly installed:</p> <pre><code># Install the base package\npip install pixtrail\n\n# Or for additional features\npip install pixtrail[web]\n</code></pre>"},{"location":"cli/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for using the PixTrail CLI is:</p> <pre><code>pixtrail [OPTIONS] [COMMAND]\n</code></pre>"},{"location":"cli/#command-modes","title":"Command Modes","text":"<p>PixTrail operates in one of three modes, and you must specify exactly one of them:</p>"},{"location":"cli/#1-single-directory-mode","title":"1. Single Directory Mode","text":"<p>Process all photos in a single directory and generate one GPX file:</p> <pre><code>pixtrail -i /path/to/photos [OPTIONS]\n</code></pre>"},{"location":"cli/#2-batch-mode","title":"2. Batch Mode","text":"<p>Process multiple directories, generating one GPX file per directory:</p> <pre><code>pixtrail -b /path/to/photos1 /path/to/photos2 [OPTIONS]\n</code></pre>"},{"location":"cli/#3-web-interface-mode","title":"3. Web Interface Mode","text":"<p>Start the web interface for browser-based operation:</p> <pre><code>pixtrail -w [OPTIONS]\n</code></pre>"},{"location":"cli/#core-options","title":"Core Options","text":""},{"location":"cli/#input-options","title":"Input Options","text":"Option Short Description Default <code>--input-dir</code> <code>-i</code> Directory containing photos with GPS data - <code>--batch</code> <code>-b</code> Process multiple directories (batch mode) - <code>--web</code> <code>-w</code> Start the web interface -"},{"location":"cli/#output-options","title":"Output Options","text":"Option Short Description Default <code>--output</code> <code>-o</code> Output GPX file path Auto-named in the input directory <code>--output-dir</code> <code>-d</code> Output directory for batch mode Same as each input directory"},{"location":"cli/#processing-options","title":"Processing Options","text":"Option Short Description Default <code>--recursive</code> <code>-r</code> Search for images recursively in subdirectories <code>False</code> <code>--min-photos</code> <code>-m</code> Minimum number of photos with GPS data required <code>1</code> <code>--file-types</code> <code>-f</code> Comma-separated list of file extensions to process All supported types <code>--exclude-dirs</code> <code>-e</code> Comma-separated list of directory names to exclude None <code>--verbose</code> <code>-v</code> Enable verbose output <code>False</code>"},{"location":"cli/#web-interface-options","title":"Web Interface Options","text":"Option Description Default <code>--host</code> Host for the web interface <code>127.0.0.1</code> <code>--port</code> Port for the web interface <code>5000</code> <code>--no-browser</code> Don't automatically open a browser when starting the web interface <code>False</code>"},{"location":"cli/#gpx-generation-options","title":"GPX Generation Options","text":"Option Description Default <code>--no-track</code> Don't add a track connecting waypoints Track is added <code>--no-timestamps</code> Don't include timestamps in GPX file Timestamps are included <code>--no-elevations</code> Don't include elevation data in GPX file Elevations are included <code>--creator</code> Specify the creator tag for the GPX file <code>\"PixTrail\"</code>"},{"location":"cli/#other-options","title":"Other Options","text":"Option Short Description <code>--help</code> <code>-h</code> Show the help message and exit <code>--version</code> Show program's version number and exit"},{"location":"cli/#usage-examples","title":"Usage Examples","text":""},{"location":"cli/#basic-operations","title":"Basic Operations","text":""},{"location":"cli/#process-a-directory-of-photos","title":"Process a Directory of Photos","text":"<pre><code># Basic operation - process directory and create GPX file\npixtrail -i /path/to/photos\n</code></pre> <p>This command: 1. Processes all supported image files in the specified directory 2. Extracts GPS data from their EXIF metadata 3. Creates a GPX file named after the directory in the same location</p>"},{"location":"cli/#specify-output-path","title":"Specify Output Path","text":"<pre><code># Specify output GPX file location\npixtrail -i /path/to/photos -o /path/to/output.gpx\n</code></pre>"},{"location":"cli/#recursive-processing","title":"Recursive Processing","text":"<pre><code># Process directory and all subdirectories\npixtrail -i /path/to/photos -r\n</code></pre>"},{"location":"cli/#verbose-output","title":"Verbose Output","text":"<pre><code># Show detailed processing information\npixtrail -i /path/to/photos -v\n</code></pre>"},{"location":"cli/#batch-processing","title":"Batch Processing","text":""},{"location":"cli/#process-multiple-directories","title":"Process Multiple Directories","text":"<pre><code># Process multiple directories in one command\npixtrail -b /path/to/trip1 /path/to/trip2 /path/to/trip3\n</code></pre> <p>This creates a separate GPX file in each directory.</p>"},{"location":"cli/#save-batch-output-to-a-specific-directory","title":"Save Batch Output to a Specific Directory","text":"<pre><code># Place all GPX files in a specified output directory\npixtrail -b /path/to/trip1 /path/to/trip2 -d /path/to/gpx_files\n</code></pre>"},{"location":"cli/#batch-processing-with-recursion","title":"Batch Processing with Recursion","text":"<pre><code># Process multiple directories recursively\npixtrail -b /path/to/trip1 /path/to/trip2 -r\n</code></pre>"},{"location":"cli/#advanced-options","title":"Advanced Options","text":""},{"location":"cli/#filter-file-types","title":"Filter File Types","text":"<pre><code># Process only JPEG files\npixtrail -i /path/to/photos -f .jpg,.jpeg\n</code></pre>"},{"location":"cli/#exclude-directories","title":"Exclude Directories","text":"<pre><code># Skip certain subdirectories during recursive processing\npixtrail -i /path/to/photos -r -e thumbnails,private\n</code></pre>"},{"location":"cli/#set-minimum-photo-threshold","title":"Set Minimum Photo Threshold","text":"<pre><code># Require at least 5 photos with GPS data\npixtrail -i /path/to/photos -m 5\n</code></pre>"},{"location":"cli/#custom-gpx-creator-tag","title":"Custom GPX Creator Tag","text":"<pre><code># Set a custom creator tag in the GPX file\npixtrail -i /path/to/photos --creator \"My Photo Mapper\"\n</code></pre>"},{"location":"cli/#web-interface","title":"Web Interface","text":""},{"location":"cli/#start-web-interface","title":"Start Web Interface","text":"<pre><code># Start the web interface with default options\npixtrail -w\n</code></pre>"},{"location":"cli/#custom-host-and-port","title":"Custom Host and Port","text":"<pre><code># Make web interface available on local network\npixtrail -w --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"cli/#start-without-browser","title":"Start Without Browser","text":"<pre><code># Start web server without automatically opening browser\npixtrail -w --no-browser\n</code></pre>"},{"location":"cli/#automation-examples","title":"Automation Examples","text":""},{"location":"cli/#process-new-photos-script","title":"Process New Photos Script","text":"<p>Create a script that automatically processes photos added to a specific directory:</p> <pre><code>#!/bin/bash\n# process_new_photos.sh\n# Usage: ./process_new_photos.sh [watch_directory] [output_directory]\n\nWATCH_DIR=\"${1:-/path/to/photos}\"\nOUTPUT_DIR=\"${2:-/path/to/gpx_files}\"\n\n# Ensure output directory exists\nmkdir -p \"$OUTPUT_DIR\"\n\n# Find directories modified in the last day\nfind \"$WATCH_DIR\" -type d -mtime -1 | while read dir; do\n    echo \"Processing newly modified directory: $dir\"\n    pixtrail -i \"$dir\" -o \"$OUTPUT_DIR/$(basename \"$dir\").gpx\" -v\ndone\n</code></pre> <p>Make it executable and run: <pre><code>chmod +x process_new_photos.sh\n./process_new_photos.sh\n</code></pre></p>"},{"location":"cli/#batch-processing-with-filtering","title":"Batch Processing with Filtering","text":"<p>This script processes multiple directories but skips those with too few photos:</p> <pre><code>#!/bin/bash\n# batch_process.sh\n# Usage: ./batch_process.sh [base_directory] [output_directory]\n\nBASE_DIR=\"${1:-/path/to/photos}\"\nOUTPUT_DIR=\"${2:-/path/to/gpx_files}\"\n\n# Ensure output directory exists\nmkdir -p \"$OUTPUT_DIR\"\n\n# Get a list of all subdirectories\nDIRS=$(find \"$BASE_DIR\" -type d -maxdepth 1 -mindepth 1 | sort)\n\n# Process each directory with minimum 5 photos\nfor dir in $DIRS; do\n    dir_name=$(basename \"$dir\")\n    echo \"Processing directory: $dir_name\"\n\n    # Count photos\n    photo_count=$(find \"$dir\" -type f \\( -name \"*.jpg\" -o -name \"*.jpeg\" \\) | wc -l)\n\n    if [ $photo_count -ge 5 ]; then\n        pixtrail -i \"$dir\" -o \"$OUTPUT_DIR/$dir_name.gpx\" -v\n        echo \"\u2713 Processed $dir_name ($photo_count photos)\"\n    else\n        echo \"\u2717 Skipped $dir_name (only $photo_count photos, minimum 5 required)\"\n    fi\ndone\n</code></pre>"},{"location":"cli/#window-batch-script","title":"Window Batch Script","text":"<p>A Windows batch file (.bat) for processing photos:</p> <pre><code>@echo off\nsetlocal enabledelayedexpansion\n\nREM Set directories\nset PHOTO_BASE=C:\\Users\\username\\Photos\nset OUTPUT_DIR=C:\\Users\\username\\GPX_Files\n\nREM Ensure output directory exists\nif not exist \"%OUTPUT_DIR%\" mkdir \"%OUTPUT_DIR%\"\n\nREM Process all year directories\nfor /D %%Y in (\"%PHOTO_BASE%\\*\") do (\n    set YEAR_NAME=%%~nxY\n    echo Processing year: !YEAR_NAME!\n\n    REM Create year subdirectory in output\n    if not exist \"%OUTPUT_DIR%\\!YEAR_NAME!\" mkdir \"%OUTPUT_DIR%\\!YEAR_NAME!\"\n\n    REM Process all trip directories for this year\n    pixtrail -b \"%%Y\\*\" -r -d \"%OUTPUT_DIR%\\!YEAR_NAME!\" -v\n)\n\necho Batch processing complete!\n</code></pre>"},{"location":"cli/#python-script-integration","title":"Python Script Integration","text":"<p>You can also integrate PixTrail directly into Python scripts:</p> <pre><code>#!/usr/bin/env python3\nimport os\nimport sys\nimport subprocess\nfrom datetime import datetime\n\ndef process_by_date(photo_directory, output_directory):\n    \"\"\"Process photos and organize GPX files by date taken.\"\"\"\n    # Ensure output directory exists\n    os.makedirs(output_directory, exist_ok=True)\n\n    # Get all subdirectories\n    subdirs = [d for d in os.listdir(photo_directory) \n               if os.path.isdir(os.path.join(photo_directory, d))]\n\n    # Process each directory\n    for subdir in subdirs:\n        input_path = os.path.join(photo_directory, subdir)\n\n        # Get date from directory name if possible\n        try:\n            # Try to parse directory name as date (e.g., \"2023-07-15\")\n            date_obj = datetime.strptime(subdir, \"%Y-%m-%d\")\n            date_str = date_obj.strftime(\"%Y-%m\")\n            year_month_dir = os.path.join(output_directory, date_str)\n            os.makedirs(year_month_dir, exist_ok=True)\n\n            output_path = os.path.join(year_month_dir, f\"{subdir}.gpx\")\n        except ValueError:\n            # If directory name isn't a date, just use it as is\n            output_path = os.path.join(output_directory, f\"{subdir}.gpx\")\n\n        # Run pixtrail command\n        cmd = [\"pixtrail\", \"-i\", input_path, \"-o\", output_path, \"-v\"]\n        print(f\"Running: {' '.join(cmd)}\")\n        subprocess.run(cmd)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"Usage: python3 process_by_date.py &lt;photos_directory&gt; &lt;output_directory&gt;\")\n        sys.exit(1)\n\n    process_by_date(sys.argv[1], sys.argv[2])\n</code></pre>"},{"location":"cli/#scheduled-tasks","title":"Scheduled Tasks","text":""},{"location":"cli/#cron-job-linuxmacos","title":"Cron Job (Linux/macOS)","text":"<p>To run PixTrail automatically on a schedule using cron:</p> <pre><code># Open crontab for editing\ncrontab -e\n\n# Add a line to run at 2:00 AM every day\n0 2 * * * /usr/local/bin/pixtrail -i /path/to/photos -o /path/to/gpx_files/$(date +\\%Y\\%m\\%d).gpx\n</code></pre>"},{"location":"cli/#task-scheduler-windows","title":"Task Scheduler (Windows)","text":"<p>To create a scheduled task on Windows:</p> <ol> <li>Open Task Scheduler</li> <li>Create a Basic Task</li> <li>Set the trigger (e.g., daily at 2:00 AM)</li> <li>Action: Start a program</li> <li>Program/script: <code>pixtrail</code></li> <li>Arguments: <code>-i \"C:\\path\\to\\photos\" -o \"C:\\path\\to\\gpx_files\\%date:~-4,4%%date:~-7,2%%date:~-10,2%.gpx\"</code></li> </ol>"},{"location":"cli/#advanced-integration-scenarios","title":"Advanced Integration Scenarios","text":""},{"location":"cli/#camera-import-automation","title":"Camera Import Automation","text":"<p>This example script detects when a camera is connected and automatically processes new photos:</p> <pre><code>#!/bin/bash\n# camera_import.sh\n\nCAMERA_MOUNT=\"/media/$USER/CAMERA\"\nPHOTO_DIR=\"$HOME/Photos\"\nGPX_DIR=\"$HOME/GPX_Files\"\n\n# Wait for camera to be mounted\ninotifywait -m -e create -e moved_to --format \"%w%f\" /media/$USER/ | while read path\ndo\n    if [[ \"$path\" == \"$CAMERA_MOUNT\" ]]; then\n        echo \"Camera detected at $path\"\n\n        # Create a directory for today's import\n        TODAY=$(date +%Y-%m-%d)\n        IMPORT_DIR=\"$PHOTO_DIR/$TODAY\"\n        mkdir -p \"$IMPORT_DIR\"\n\n        # Copy photos from camera\n        echo \"Copying photos to $IMPORT_DIR\"\n        cp -r \"$CAMERA_MOUNT/DCIM/\"*\".JPG\" \"$IMPORT_DIR/\"\n\n        # Process the photos\n        echo \"Processing photos...\"\n        pixtrail -i \"$IMPORT_DIR\" -o \"$GPX_DIR/$TODAY.gpx\" -v\n\n        echo \"Done!\"\n    fi\ndone\n</code></pre>"},{"location":"cli/#integration-with-photo-management-tools","title":"Integration with Photo Management Tools","text":"<p>This example shows how to integrate PixTrail with a photo management workflow:</p> <pre><code>#!/bin/bash\n# photo_workflow.sh\n\n# Step 1: Import photos from camera\necho \"Importing photos from camera...\"\nIMPORT_DIR=\"$HOME/Photos/Import\"\ngphoto2 --get-all-files --filename \"$IMPORT_DIR/%Y%m%d-%H%M%S.%C\"\n\n# Step 2: Process and create GPX\necho \"Generating GPX file...\"\npixtrail -i \"$IMPORT_DIR\" -o \"$HOME/GPX_Files/latest_import.gpx\" -v\n\n# Step 3: Rename and sort photos by date\necho \"Organizing photos...\"\nexiftool '-FileName&lt;CreateDate' -d \"%Y-%m-%d/%H%M%S.%%e\" \"$IMPORT_DIR\"\n\n# Step 4: Clean up\necho \"Cleaning up...\"\nrm -f \"$IMPORT_DIR\"/*\n</code></pre>"},{"location":"cli/#return-codes","title":"Return Codes","text":"<p>The PixTrail CLI returns the following exit codes, which can be used in scripts to handle different outcomes:</p> Code Description 0 Success - Processing completed successfully 1 Error - Invalid options or arguments 2 Error - Input directory not found or not accessible 3 Error - No photos found in the specified directory 4 Error - No GPS data found in photos 5 Error - Insufficient photos with GPS data (below min-photos threshold) 6 Error - Failed to create output directory 7 Error - Failed to write GPX file <p>Example of using return codes in a script:</p> <pre><code>#!/bin/bash\n# process_with_error_handling.sh\n\npixtrail -i \"$1\" -o \"$2\"\nRESULT=$?\n\ncase $RESULT in\n  0) echo \"Success: GPX file created at $2\" ;;\n  1) echo \"Error: Invalid command options\" ;;\n  2) echo \"Error: Input directory not found\" ;;\n  3) echo \"Error: No photos found in directory\" ;;\n  4) echo \"Error: No GPS data found in photos\" ;;\n  5) echo \"Error: Insufficient photos with GPS data\" ;;\n  6) echo \"Error: Failed to create output directory\" ;;\n  7) echo \"Error: Failed to write GPX file\" ;;\n  *) echo \"Unknown error: $RESULT\" ;;\nesac\n\nexit $RESULT\n</code></pre>"},{"location":"cli/#piping-and-redirection","title":"Piping and Redirection","text":"<p>The CLI supports standard Unix piping and redirection:</p> <pre><code># Save output to a log file\npixtrail -i /path/to/photos -v &gt; processing.log 2&gt;&amp;1\n\n# Process a list of directories from a file\ncat directories.txt | xargs -n1 pixtrail -i\n\n# Chain commands\npixtrail -i /path/to/photos &amp;&amp; notify-send \"GPX processing complete\"\n</code></pre>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>PixTrail checks for the following environment variables:</p> Variable Description Default <code>PIXTRAIL_DEFAULT_OUTPUT_DIR</code> Default output directory for GPX files None <code>PIXTRAIL_VERBOSE</code> Enable verbose output if set to \"1\" Off <code>PIXTRAIL_WEB_HOST</code> Default host for web interface <code>127.0.0.1</code> <code>PIXTRAIL_WEB_PORT</code> Default port for web interface <code>5000</code> <p>Example usage:</p> <pre><code># Set default output directory\nexport PIXTRAIL_DEFAULT_OUTPUT_DIR=\"/home/user/GPX_Files\"\n\n# Always use verbose mode\nexport PIXTRAIL_VERBOSE=\"1\"\n\n# Now you can run pixtrail without specifying these options\npixtrail -i /path/to/photos\n</code></pre>"},{"location":"cli/#limitations","title":"Limitations","text":"<p>The CLI has the following limitations to be aware of:</p> <ul> <li>Cannot process directly from a camera without first copying files</li> <li>No built-in photo filtering by date or other metadata (must use file system or other tools)</li> <li>Single-threaded processing (large batches may take time)</li> <li>No built-in merging of multiple GPX files (separate tool needed)</li> <li>No direct creation of other formats (KML, etc.) - convert GPX afterward</li> </ul>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the CLI, try these steps:</p> <ol> <li>Run with verbose mode (<code>-v</code>) to see detailed output</li> <li>Check file permissions for both input and output directories</li> <li>Verify that the photos actually contain GPS data</li> <li>For RAW formats, ensure you have the required libraries installed</li> <li>For batch processing issues, try processing a single directory first</li> </ol>"},{"location":"cli/#further-reading","title":"Further Reading","text":"<ul> <li>PixTrail Usage Guide</li> <li>GPX Generator Reference</li> <li>EXIF Reader Reference</li> <li>Python API Documentation</li> </ul>"},{"location":"contributing/","title":"Contributing to PixTrail","text":"<p>Thank you for your interest in contributing to PixTrail! This guide will help you understand the project structure and how to make effective contributions.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Environment</li> <li>Code Organization</li> <li>Making Contributions</li> <li>Coding Standards</li> <li>Testing</li> <li>Documentation</li> <li>Pull Request Process</li> <li>Issue Guidelines</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before contributing to PixTrail, please:</p> <ol> <li> <p>Read the documentation: Familiarize yourself with the existing documentation, especially the Architecture Overview and Module Structure.</p> </li> <li> <p>Check existing issues: See if someone has already reported the bug or requested the feature you're thinking about.</p> </li> <li> <p>Discuss major changes: For significant changes, open an issue first to discuss your ideas with the maintainers.</p> </li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6 or newer</li> <li>Node.js and npm (for JavaScript linting)</li> <li>Git</li> </ul>"},{"location":"contributing/#setting-up","title":"Setting Up","text":"<ol> <li>Fork the repository:</li> <li>Go to the PixTrail GitHub repository</li> <li> <p>Click the \"Fork\" button in the upper right corner</p> </li> <li> <p>Clone your fork:    <pre><code>git clone https://github.com/YOUR-USERNAME/pixtrail.git\ncd pixtrail\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\n# On Windows\nvenv\\Scripts\\activate\n# On macOS/Linux\nsource venv/bin/activate\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -e \".[dev,web]\"\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks (optional but recommended):    <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-organization","title":"Code Organization","text":"<p>PixTrail follows a modular architecture that separates concerns and improves maintainability.</p>"},{"location":"contributing/#python-code-structure","title":"Python Code Structure","text":"<pre><code>pixtrail/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __main__.py\n\u251c\u2500\u2500 cli.py                 # Command-line interface\n\u251c\u2500\u2500 core.py                # Core functionality\n\u251c\u2500\u2500 exif_reader.py         # EXIF metadata extraction\n\u251c\u2500\u2500 gpx_generator.py       # GPX file generation\n\u251c\u2500\u2500 utils.py               # General utilities\n\u2514\u2500\u2500 web/                   # Web interface\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 routes.py          # API routes\n    \u251c\u2500\u2500 server.py          # Web server\n    \u251c\u2500\u2500 static/            # Static assets\n    \u2514\u2500\u2500 templates/         # HTML templates\n</code></pre>"},{"location":"contributing/#javascript-modules","title":"JavaScript Modules","text":"<p>The JavaScript code is organized into the following categories:</p> <ol> <li>API Client (<code>static/js/api/</code>)</li> <li>Contains modules for server communication</li> <li> <p><code>apiClient.js</code> handles all API requests</p> </li> <li> <p>Feature Modules (<code>static/js/modules/</code>)</p> </li> <li>Each module encapsulates a specific feature</li> <li> <p>Examples: <code>mapVisualization.js</code>, <code>fileUpload.js</code>, <code>statistics.js</code></p> </li> <li> <p>Utilities (<code>static/js/utils/</code>)</p> </li> <li>Provides shared functionality across modules</li> <li> <p>Examples: <code>domHelpers.js</code>, <code>fileUtils.js</code>, <code>gpsUtils.js</code></p> </li> <li> <p>Main Application (<code>static/js/main.js</code>)</p> </li> <li>Application entry point</li> <li>Initializes and orchestrates all modules</li> </ol>"},{"location":"contributing/#css-structure","title":"CSS Structure","text":"<p>The CSS follows a similar modular approach:</p> <ol> <li>Base Styles (<code>static/css/base/</code>)</li> <li>Foundational styles that apply globally</li> <li> <p><code>reset.css</code>, <code>typography.css</code>, <code>variables.css</code></p> </li> <li> <p>Layout Styles (<code>static/css/layouts/</code>)</p> </li> <li>Define the overall page structure</li> <li> <p><code>container.css</code>, <code>grid.css</code></p> </li> <li> <p>Module Styles (<code>static/css/modules/</code>)</p> </li> <li>Component-specific styles in individual files</li> <li> <p>Examples: <code>map-section.css</code>, <code>file-upload.css</code></p> </li> <li> <p>Main CSS (<code>static/css/main.css</code>)</p> </li> <li>Imports all modules in the correct order</li> </ol>"},{"location":"contributing/#making-contributions","title":"Making Contributions","text":""},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome several types of contributions:</p> <ol> <li>Bug fixes: Fixes for issues in the existing codebase</li> <li>Feature additions: New features that enhance the application</li> <li>Performance improvements: Changes that make the code faster or more efficient</li> <li>Documentation: Improvements to the documentation</li> <li>UI/UX enhancements: Visual and user experience improvements</li> </ol>"},{"location":"contributing/#workflow","title":"Workflow","text":"<ol> <li> <p>Create a branch for your changes:    <pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/issue-description\n</code></pre></p> </li> <li> <p>Make your changes: Implement the bug fix or feature</p> </li> <li> <p>Run tests: Ensure all tests pass    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Write your own tests: Add tests for your changes</p> </li> <li> <p>Update documentation: Update relevant documentation files</p> </li> <li> <p>Commit your changes with descriptive messages:    <pre><code>git commit -m \"Add feature: brief description\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request from your fork to the main repository</p> </li> </ol>"},{"location":"contributing/#adding-a-new-javascript-module","title":"Adding a New JavaScript Module","text":"<ol> <li>Create a new file in the appropriate directory</li> <li>Use ES6 modules with explicit imports/exports</li> <li>Follow the class-based pattern used in existing modules</li> <li>Document your module with JSDoc comments</li> <li>Import and initialize your module in <code>main.js</code></li> </ol> <p>Example module structure:</p> <pre><code>/**\n * MyFeature Module\n * Description of what this module does\n */\n\nimport DOMHelpers from '../utils/domHelpers.js';\nimport UIUtils from '../utils/uiUtils.js';\n\nclass MyFeature {\n    /**\n     * Initialize module\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        this.config = config;\n        // Initialize properties\n\n        // Call initialization method\n        this.init();\n    }\n\n    /**\n     * Initialize event listeners and setup\n     */\n    init() {\n        // Setup code here\n    }\n\n    /**\n     * Public method example\n     * @param {string} param - Parameter description\n     * @returns {boolean} Result description\n     */\n    publicMethod(param) {\n        // Method implementation\n        return true;\n    }\n}\n\nexport default MyFeature;\n</code></pre>"},{"location":"contributing/#adding-a-new-css-module","title":"Adding a New CSS Module","text":"<ol> <li>Create a new file in the appropriate directory (<code>static/css/modules/</code> for components)</li> <li>Focus on styling a single component or feature</li> <li>Use CSS variables for colors, spacing, etc.</li> <li>Add your file to the imports in <code>main.css</code></li> </ol> <p>Example CSS module:</p> <pre><code>/**\n * PixTrail - MyFeature Module\n * Styles for the MyFeature component\n */\n\n.my-feature {\n    background-color: var(--bg-light);\n    border-radius: var(--border-radius-md);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-xl);\n}\n\n.my-feature__title {\n    color: var(--primary-color);\n    margin-bottom: var(--spacing-sm);\n}\n\n.my-feature__content {\n    display: flex;\n    gap: var(--spacing-md);\n}\n\n@media (max-width: 768px) {\n    .my-feature__content {\n        flex-direction: column;\n    }\n}\n</code></pre>"},{"location":"contributing/#adding-a-new-python-feature","title":"Adding a New Python Feature","text":"<ol> <li>Determine if the feature belongs in an existing module or deserves a new one</li> <li>Follow the architectural patterns established in the codebase</li> <li>Add comprehensive docstrings and type hints</li> <li>Write unit tests for your new functionality</li> </ol> <p>Example Python module structure:</p> <pre><code>\"\"\"\nModule: my_feature.py\nDescription of what this module does\n\"\"\"\n\nimport os\nfrom typing import Dict, List, Optional\n\nclass MyFeature:\n    \"\"\"Main class for implementing my feature.\"\"\"\n\n    def __init__(self, config: Optional[Dict] = None):\n        \"\"\"\n        Initialize the feature.\n\n        Args:\n            config: Optional configuration dictionary\n        \"\"\"\n        self.config = config or {}\n        # Initialize properties\n\n    def process(self, data: List[Dict]) -&gt; Dict:\n        \"\"\"\n        Process the provided data.\n\n        Args:\n            data: Data to process\n\n        Returns:\n            Dictionary containing processed results\n        \"\"\"\n        # Process data\n        result = {}\n        # Implementation\n        return result\n</code></pre>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/#python","title":"Python","text":"<ul> <li>Follow PEP 8 style guide</li> <li>Include docstrings for all modules, classes, and functions (PEP 257)</li> <li>Use type hints where appropriate (PEP 484)</li> <li>Write clean, readable code with descriptive variable names</li> <li>Keep functions focused on a single responsibility</li> <li>Use meaningful variable and function names</li> <li>Limit line length to 100 characters</li> </ul>"},{"location":"contributing/#javascript","title":"JavaScript","text":"<ul> <li>Use ES6+ features</li> <li>Follow consistent indentation (2 spaces)</li> <li>Include JSDoc comments for all functions and methods</li> <li>Use <code>const</code> for variables that don't need to be reassigned</li> <li>Use <code>let</code> for variables that need reassignment</li> <li>Avoid global variables</li> <li>Use camelCase for variables and functions</li> <li>Use PascalCase for classes</li> <li>Use descriptive variable and function names</li> </ul>"},{"location":"contributing/#css","title":"CSS","text":"<ul> <li>Use the BEM naming convention for classes</li> <li>Use CSS variables for colors, spacing, etc.</li> <li>Keep selectors specific to their component</li> <li>Organize properties logically</li> <li>Include responsive styles for each component</li> <li>Add comments for complex styles</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#python-testing","title":"Python Testing","text":"<ol> <li>Write unit tests using pytest for all new functionality</li> <li>Ensure all tests pass before submitting a pull request</li> <li>Test structure should follow the same structure as the code</li> <li>Use descriptive test names</li> <li>Use fixtures where appropriate</li> </ol> <p>Example test:</p> <pre><code>import pytest\nfrom pixtrail.my_feature import MyFeature\n\ndef test_my_feature_initialization():\n    \"\"\"Test that MyFeature initializes correctly.\"\"\"\n    feature = MyFeature()\n    assert feature.config == {}\n\n    feature = MyFeature({\"option\": \"value\"})\n    assert feature.config == {\"option\": \"value\"}\n\ndef test_my_feature_processing():\n    \"\"\"Test that MyFeature processes data correctly.\"\"\"\n    feature = MyFeature()\n    data = [{\"field\": \"value\"}]\n    result = feature.process(data)\n    assert \"processed_field\" in result\n    assert result[\"processed_field\"] == \"expected_value\"\n</code></pre>"},{"location":"contributing/#javascript-testing","title":"JavaScript Testing","text":"<ol> <li>Test JavaScript modules with Jest or similar framework</li> <li>Focus on testing the public API of each module</li> <li>Use mocks and stubs for external dependencies</li> <li>Include both unit and integration tests</li> </ol> <p>Example test:</p> <pre><code>import MyFeature from '../modules/myFeature.js';\n\ndescribe('MyFeature', () =&gt; {\n  let myFeature;\n  let mockConfig;\n\n  beforeEach(() =&gt; {\n    mockConfig = {\n      container: document.createElement('div')\n    };\n    myFeature = new MyFeature(mockConfig);\n  });\n\n  test('initializes correctly', () =&gt; {\n    expect(myFeature.config).toBe(mockConfig);\n  });\n\n  test('publicMethod returns expected value', () =&gt; {\n    const result = myFeature.publicMethod('test');\n    expect(result).toBe(true);\n  });\n});\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Documentation is a crucial part of PixTrail. When adding new features:</p> <ol> <li>Update or create relevant documentation files</li> <li>Add comprehensive docstrings to Python code</li> <li>Add JSDoc comments to JavaScript code</li> <li>Include examples of how to use the new feature</li> <li>Update any diagrams or architecture documentation if necessary</li> </ol>"},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<ul> <li><code>README.md</code>: Main project overview</li> <li><code>/docs/</code>: Technical documentation</li> <li><code>architecture.md</code>: Architectural overview</li> <li><code>api/</code>: API documentation</li> <li><code>development/</code>: Development guidelines</li> <li><code>tutorials/</code>: User tutorials</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code meets all requirements:</li> <li>Tests pass</li> <li>Documentation is updated</li> <li> <p>Code follows style guidelines</p> </li> <li> <p>Create a clear pull request description:</p> </li> <li>Explain the purpose of the changes</li> <li>Reference any related issues</li> <li>Describe how to test the changes</li> <li> <p>Mention any significant design decisions</p> </li> <li> <p>Review process:</p> </li> <li>A maintainer will review your code</li> <li>Address any feedback or requested changes</li> <li> <p>Tests will be run automatically</p> </li> <li> <p>Approval and merge:</p> </li> <li>Once approved, a maintainer will merge your changes</li> <li>Your contribution will become part of PixTrail!</li> </ol>"},{"location":"contributing/#pull-request-title-format","title":"Pull Request Title Format","text":"<p>Use descriptive titles that indicate the type of change:</p> <ul> <li><code>Fix: Description of the bug fix</code></li> <li><code>Feature: Description of the new feature</code></li> <li><code>Docs: Description of documentation changes</code></li> <li><code>Refactor: Description of code refactoring</code></li> <li><code>Test: Description of test additions/changes</code></li> <li><code>Perf: Description of performance improvements</code></li> </ul>"},{"location":"contributing/#issue-guidelines","title":"Issue Guidelines","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>When reporting a bug, please include:</p> <ol> <li>Description: Clear and concise description of the bug</li> <li>Steps to reproduce: Detailed steps to reproduce the issue</li> <li>Expected behavior: What you expected to happen</li> <li>Actual behavior: What actually happened</li> <li>Screenshots/logs: If applicable</li> <li>Environment: OS, Python version, browser, etc.</li> <li>Additional context: Any other relevant information</li> </ol>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>When suggesting a feature, please include:</p> <ol> <li>Description: Clear and concise description of the feature</li> <li>Problem: The problem this feature would solve</li> <li>Proposed solution: How you envision the feature working</li> <li>Alternatives: Any alternative solutions you've considered</li> <li>Additional context: Any other relevant information</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inspiring community for all. Please be respectful and considerate of others when participating in this project.</p>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors will be acknowledged in the project's README and/or CONTRIBUTORS file.</p> <p>Thank you for contributing to PixTrail!</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This page answers common questions about PixTrail, its features, and how to use it effectively.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-pixtrail","title":"What is PixTrail?","text":"<p>PixTrail is a tool that extracts GPS data from the EXIF metadata of your photos and generates GPX files that can be used in mapping applications. It allows you to visualize and share your journeys based on the places where you've taken photos.</p>"},{"location":"faq/#how-does-pixtrail-work","title":"How does PixTrail work?","text":"<p>PixTrail works by: 1. Reading the EXIF metadata from your photos, which includes GPS coordinates and timestamps 2. Extracting the location data from each photo 3. Creating a GPX file with waypoints for each photo location 4. Creating a track that connects these waypoints in chronological order 5. Optionally visualizing this data on a map via the web interface</p>"},{"location":"faq/#is-pixtrail-free-to-use","title":"Is PixTrail free to use?","text":"<p>Yes, PixTrail is an open-source project licensed under the MIT License. You can use it for free, both for personal and commercial purposes.</p>"},{"location":"faq/#what-platforms-does-pixtrail-support","title":"What platforms does PixTrail support?","text":"<p>PixTrail runs on: - Windows - macOS - Linux</p> <p>Any platform that supports Python 3.6 or newer can run PixTrail.</p>"},{"location":"faq/#photo-and-file-format-questions","title":"Photo and File Format Questions","text":""},{"location":"faq/#what-photo-formats-does-pixtrail-support","title":"What photo formats does PixTrail support?","text":"<p>PixTrail supports the following image formats: - JPEG/JPG (most common) - PNG (limited EXIF support) - TIFF - RAW formats:   - CR2 (Canon)   - NEF (Nikon)   - ARW (Sony)   - DNG (Digital Negative)   - ORF (Olympus)   - RW2 (Panasonic)   - PEF (Pentax)   - SRW (Samsung)</p>"},{"location":"faq/#how-do-i-know-if-my-photos-have-gps-data","title":"How do I know if my photos have GPS data?","text":"<p>Most modern smartphones automatically embed GPS coordinates when taking photos. For digital cameras, you may need to enable GPS tagging in the settings or use a camera with built-in GPS.</p> <p>You can check if your photos have GPS data by: - Looking at the photo properties in your operating system's file explorer - Using photo management software like Adobe Lightroom, Apple Photos, or Google Photos - Using online EXIF viewers or tools like ExifTool</p>"},{"location":"faq/#can-pixtrail-process-videos","title":"Can PixTrail process videos?","text":"<p>Currently, PixTrail focuses on still images. Video support may be added in future versions.</p>"},{"location":"faq/#what-if-some-of-my-photos-dont-have-gps-data","title":"What if some of my photos don't have GPS data?","text":"<p>PixTrail will automatically skip photos that don't have GPS data and only process those that do. If none of your photos have GPS data, PixTrail will notify you that no GPS data was found.</p>"},{"location":"faq/#does-pixtrail-modify-my-original-photos","title":"Does PixTrail modify my original photos?","text":"<p>No, PixTrail only reads data from your photos; it never modifies the original files. It extracts the GPS information and creates a separate GPX file.</p>"},{"location":"faq/#gpx-files-and-mapping","title":"GPX Files and Mapping","text":""},{"location":"faq/#what-is-a-gpx-file","title":"What is a GPX file?","text":"<p>GPX (GPS Exchange Format) is an XML file format for storing GPS data. It can contain waypoints, tracks, and routes, and is supported by many mapping and GPS applications.</p>"},{"location":"faq/#how-can-i-use-the-generated-gpx-files","title":"How can I use the generated GPX files?","text":"<p>You can use the GPX files with: - Google Earth - OpenStreetMap - Garmin GPS devices - Strava and other fitness tracking apps - Most hiking and navigation apps - GIS software</p>"},{"location":"faq/#can-i-customize-the-gpx-output","title":"Can I customize the GPX output?","text":"<p>Using the command line or Python API, you can: - Specify the output filename and location - Filter which photos to include based on various criteria - Customize the waypoint information</p> <p>Advanced customization requires using the Python API.</p>"},{"location":"faq/#why-doesnt-my-gpx-file-show-up-correctly-in-my-mapping-software","title":"Why doesn't my GPX file show up correctly in my mapping software?","text":"<p>This could be due to: - GPS data errors in the original photos - Incompatible GPX features being used - Software-specific limitations</p> <p>Try opening the GPX file in a different application to determine if it's a file issue or a software issue.</p>"},{"location":"faq/#web-interface-questions","title":"Web Interface Questions","text":""},{"location":"faq/#how-do-i-start-the-web-interface","title":"How do I start the web interface?","text":"<p>Run the following command: <pre><code>pixtrail -w\n</code></pre></p> <p>This will start a local web server and automatically open your browser to the interface. If the browser doesn't open automatically, navigate to <code>http://127.0.0.1:5000</code>.</p>"},{"location":"faq/#is-the-web-interface-sending-my-data-to-the-internet","title":"Is the web interface sending my data to the internet?","text":"<p>No. The web interface runs completely locally on your machine. No data is sent to external servers. All processing happens on your computer, and your photos and location data never leave your device.</p>"},{"location":"faq/#can-i-access-the-web-interface-from-another-device","title":"Can I access the web interface from another device?","text":"<p>By default, the web interface is only accessible from the local machine. However, you can make it accessible on your local network by specifying the host:</p> <pre><code>pixtrail -w --host 0.0.0.0 --port 8080\n</code></pre> <p>Then, other devices on your network can access it at <code>http://YOUR_IP_ADDRESS:8080</code>.</p>"},{"location":"faq/#why-cant-i-see-the-heat-map-or-clustering-options","title":"Why can't I see the heat map or clustering options?","text":"<p>These features are only available after you've processed photos and the map is displayed. If you don't see these options after processing photos, try: - Checking if your photos have GPS data - Refreshing the page - Restarting the web interface</p>"},{"location":"faq/#data-privacy-questions","title":"Data Privacy Questions","text":""},{"location":"faq/#does-pixtrail-upload-my-photos-or-data-anywhere","title":"Does PixTrail upload my photos or data anywhere?","text":"<p>No. PixTrail processes all data locally on your device. In the web interface, JPEG/TIFF files are processed directly in your browser, and only the extracted GPS coordinates are sent to the local server. RAW files are temporarily cached locally during processing and then automatically deleted.</p>"},{"location":"faq/#where-are-temporary-files-stored","title":"Where are temporary files stored?","text":"<p>Temporary files are stored in the <code>__pixtrail-cache__</code> directory, which is typically located in the same directory as the PixTrail package. These files are automatically cleaned up after processing.</p>"},{"location":"faq/#is-my-location-data-secure","title":"Is my location data secure?","text":"<p>Yes. Since all processing happens locally on your device, your location data remains private. The generated GPX files are stored only on your computer unless you explicitly share them.</p>"},{"location":"faq/#technical-questions","title":"Technical Questions","text":""},{"location":"faq/#what-are-the-system-requirements-for-pixtrail","title":"What are the system requirements for PixTrail?","text":"<ul> <li>Python 3.6 or newer</li> <li>Approximately 50MB of disk space for installation</li> <li>Additional temporary space for processing RAW files</li> <li>For the web interface: A modern web browser (Chrome, Firefox, Edge, or Safari)</li> </ul>"},{"location":"faq/#how-can-i-process-a-large-number-of-photos-efficiently","title":"How can I process a large number of photos efficiently?","text":"<p>For large collections: - Use the batch processing mode (<code>-b</code> flag) - Process photos in smaller batches - Use the recursive flag (<code>-r</code>) to process subdirectories - Use a computer with sufficient RAM, especially for RAW files</p> <p>See the Batch Processing tutorial for more details.</p>"},{"location":"faq/#can-i-use-pixtrail-in-my-own-python-scripts","title":"Can I use PixTrail in my own Python scripts?","text":"<p>Yes, PixTrail provides a Python API that you can import and use in your own scripts:</p> <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\npt.process_and_generate(\"/path/to/photos\", \"/path/to/output.gpx\")\n</code></pre> <p>See the API Reference for more details.</p>"},{"location":"faq/#how-accurate-is-the-gps-data-extraction","title":"How accurate is the GPS data extraction?","text":"<p>The accuracy depends on: - The quality of the GPS data in your original photos - The camera or smartphone that took the photos - Environmental conditions when the photos were taken (e.g., clear sky vs. urban canyon)</p> <p>PixTrail extracts the data exactly as recorded in your photos' metadata.</p>"},{"location":"faq/#how-are-timestamps-handled-across-time-zones","title":"How are timestamps handled across time zones?","text":"<p>PixTrail uses the original timestamps from the EXIF data, including time zone information if available. If no time zone is specified in the EXIF data, the local time zone of the computer running PixTrail is used.</p>"},{"location":"faq/#does-pixtrail-interpolate-missing-data-points","title":"Does PixTrail interpolate missing data points?","text":"<p>No, PixTrail only uses the actual GPS data found in your photos. It doesn't estimate or interpolate coordinates for photos without GPS data or for gaps between photos.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#pixtrail-is-not-finding-any-gps-data-in-my-photos","title":"PixTrail is not finding any GPS data in my photos","text":"<p>Check: - That your photos actually contain GPS data - That you have permission to read the photos - That you're pointing to the correct directory - If using RAW files, that the required libraries are installed</p>"},{"location":"faq/#the-generated-gpx-file-is-empty-or-incomplete","title":"The generated GPX file is empty or incomplete","text":"<p>This could be because: - Not enough photos had GPS data - There were errors processing some photos - The output directory is not writable</p> <p>Try running with the verbose flag (<code>-v</code>) to see more detailed information.</p>"},{"location":"faq/#the-web-interface-is-not-starting","title":"The web interface is not starting","text":"<p>Check: - That you have installed PixTrail with web interface support: <code>pip install pixtrail[web]</code> - That the port is not already in use by another application - That you have permission to start a server on your machine</p>"},{"location":"faq/#i-get-a-permission-denied-error","title":"I get a \"Permission denied\" error","text":"<p>This can happen if: - You don't have permission to read the input photos - You don't have permission to write to the output directory - You are trying to overwrite an existing GPX file that is read-only</p> <p>Try running with elevated permissions or changing the output path.</p>"},{"location":"faq/#feature-requests-and-contributions","title":"Feature Requests and Contributions","text":""},{"location":"faq/#how-can-i-request-a-new-feature","title":"How can I request a new feature?","text":"<p>You can suggest new features by: - Opening an issue on the PixTrail GitHub repository - Contributing to the project by implementing the feature yourself</p>"},{"location":"faq/#how-can-i-contribute-to-pixtrail","title":"How can I contribute to PixTrail?","text":"<p>See the Contributing Guidelines for information on how to contribute to the project, including: - Submitting bug reports - Suggesting enhancements - Writing documentation - Contributing code</p>"},{"location":"faq/#is-there-a-roadmap-for-future-development","title":"Is there a roadmap for future development?","text":"<p>Current planned features include: - Video file support - More advanced filtering options - Enhanced visualization tools - Mobile app support - Integration with online mapping services</p> <p>Check the README file in the GitHub repository for the latest roadmap.</p>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#can-i-process-photos-without-gps-data","title":"Can I process photos without GPS data?","text":"<p>Not directly with PixTrail. You would first need to geotag your photos using specialized software, and then process them with PixTrail.</p>"},{"location":"faq/#can-i-combine-multiple-gpx-files","title":"Can I combine multiple GPX files?","text":"<p>PixTrail doesn't have a built-in feature to merge GPX files, but you can: 1. Use the web interface to visualize multiple GPX files by uploading them sequentially 2. Use third-party GPX editing tools to merge files 3. Write a custom script using the PixTrail Python API to combine data from multiple sources</p>"},{"location":"faq/#can-i-schedule-automatic-processing","title":"Can I schedule automatic processing?","text":"<p>Yes, you can set up scheduled tasks or cron jobs to run PixTrail commands automatically. For example: - Process photos every time you connect your camera - Monitor a directory for new photos and process them automatically - Create nightly batches of processed GPX files</p>"},{"location":"getting-started/","title":"Getting Started with PixTrail","text":"<p>This guide will help you quickly get up and running with PixTrail. It covers installation, basic usage, and points you to more detailed documentation for advanced features.</p>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Before installing PixTrail, make sure you have:</p> <ul> <li>Python 3.6 or newer</li> <li>pip (Python package installer)</li> <li>Photos with GPS data in their EXIF metadata</li> </ul>"},{"location":"getting-started/#quick-installation","title":"Quick Installation","text":"<p>The fastest way to install PixTrail is using pip:</p> <pre><code>pip install pixtrail\n</code></pre> <p>If you want to use the web interface (recommended for most users):</p> <pre><code>pip install pixtrail[web]\n</code></pre> <p>For more detailed installation instructions, including platform-specific guidance, see the Installation Guide.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#command-line","title":"Command Line","text":"<p>After installation, you can use PixTrail from the command line. Here's a simple example:</p> <pre><code># Process photos in a directory\npixtrail -i /path/to/photos\n</code></pre> <p>This will: 1. Scan all photos in the specified directory 2. Extract GPS data from their EXIF metadata 3. Create a GPX file in the same directory</p>"},{"location":"getting-started/#web-interface","title":"Web Interface","text":"<p>For a more visual experience, use the web interface:</p> <pre><code># Start the web interface\npixtrail -w\n</code></pre> <p>This will: 1. Start a local web server 2. Open your default browser to the PixTrail interface 3. Allow you to upload photos or select directories for processing</p>"},{"location":"getting-started/#first-steps","title":"First Steps","text":""},{"location":"getting-started/#1-prepare-your-photos","title":"1. Prepare Your Photos","text":"<p>Make sure your photos have GPS data. Most smartphones automatically embed GPS coordinates in photos. For cameras without built-in GPS, you can use various applications to geotag your photos.</p>"},{"location":"getting-started/#2-process-your-photos","title":"2. Process Your Photos","text":"<p>Using either the command line or web interface, select the directory containing your photos.</p>"},{"location":"getting-started/#3-view-your-route","title":"3. View Your Route","text":"<p>After processing, PixTrail will generate a GPX file. If you're using the web interface, you'll see your route displayed on a map immediately. If you're using the command line, you can import the GPX file into your favorite mapping application.</p>"},{"location":"getting-started/#common-tasks","title":"Common Tasks","text":""},{"location":"getting-started/#processing-a-directory-of-photos","title":"Processing a Directory of Photos","text":"<pre><code># Basic directory processing\npixtrail -i /path/to/photos\n\n# Process recursively (including subdirectories)\npixtrail -i /path/to/photos -r\n\n# Specify a custom output file\npixtrail -i /path/to/photos -o my_journey.gpx\n</code></pre>"},{"location":"getting-started/#batch-processing-multiple-directories","title":"Batch Processing Multiple Directories","text":"<pre><code># Process multiple directories at once\npixtrail -b /path/to/trip1 /path/to/trip2 /path/to/trip3\n\n# Save all output files to a specific directory\npixtrail -b /path/to/trip1 /path/to/trip2 -d /path/to/gpx_files\n</code></pre>"},{"location":"getting-started/#using-the-web-interface","title":"Using the Web Interface","text":"<ol> <li>Start the web interface with <code>pixtrail -w</code></li> <li>Click on the \"Directory\" tab</li> <li>Click \"Select Directory\" and choose your photos folder</li> <li>Click \"Process Photos\"</li> <li>Explore the map, enable features like the heatmap or clustering</li> <li>Download the GPX file using the \"Download GPX\" button</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you've processed your first set of photos, you might want to explore:</p> <ul> <li>Detailed usage instructions for more command options</li> <li>Web interface documentation for advanced features</li> <li>Visualization features for understanding the heat map and clustering options</li> <li>Tutorials for step-by-step guides for specific tasks</li> </ul>"},{"location":"getting-started/#example-workflow","title":"Example Workflow","text":"<p>Here's a complete example workflow:</p> <ol> <li>Take photos during your hike or city tour</li> <li>Copy photos to your computer</li> <li>Run PixTrail:    <pre><code>pixtrail -i ~/Photos/MyJourney\n</code></pre></li> <li>Import the generated GPX file into Google Earth, OpenStreetMap, or any GPX-compatible application</li> <li>Explore your journey on the map, seeing exactly where each photo was taken</li> </ol> <p>You now have a visual record of your journey based on the photos you took!</p>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues:</p> <ul> <li>Check that your photos contain GPS data</li> <li>Ensure you have the proper permissions to read/write the specified directories</li> <li>Run with the verbose flag for more information: <code>pixtrail -i /path/to/photos -v</code></li> <li>See the Troubleshooting Guide for solutions to common problems</li> </ul> <p>For additional help, check the FAQ or visit our GitHub repository.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>There are several ways to install PixTrail depending on your needs and environment.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6 or newer</li> <li>pip (Python package installer)</li> <li>Git (only for installation from source)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-installation-via-pip-recommended","title":"Method 1: Installation via pip (Recommended)","text":"<p>This is the simplest method for most users.</p>"},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<pre><code># For bash, PowerShell, or Command Prompt:\npip install pixtrail\n</code></pre> <pre><code># For zsh (default shell on macOS):\npip install pixtrail\n</code></pre>"},{"location":"installation/#installation-with-web-interface","title":"Installation with Web Interface","text":"<pre><code># For bash, PowerShell, or Command Prompt:\npip install pixtrail[web]\n</code></pre> <pre><code># For zsh (default shell on macOS):\n# Note the quotation marks, which are required for zsh\npip install \"pixtrail[web]\"\n</code></pre>"},{"location":"installation/#method-2-installation-from-source","title":"Method 2: Installation from Source","text":"<p>This method is recommended for developers or users who want the latest unreleased features.</p> <pre><code># Clone the repository\ngit clone https://github.com/sukitsubaki/pixtrail.git\n\n# Navigate to the repository directory\ncd pixtrail\n\n# Install in development mode\npip install -e .\n\n# To include web interface dependencies\npip install -e \".[web]\"\n\n# To include development dependencies\npip install -e \".[dev]\"\n\n# To include both web and development dependencies\npip install -e \".[web,dev]\"\n</code></pre>"},{"location":"installation/#method-3-installation-using-pip-with-direct-github-url","title":"Method 3: Installation using pip with direct GitHub URL","text":"<p>This method allows you to install the latest version directly from GitHub without cloning the repository.</p> <pre><code># Basic installation\npip install git+https://github.com/sukitsubaki/pixtrail.git\n\n# With web interface dependencies (for bash/PowerShell)\npip install \"git+https://github.com/sukitsubaki/pixtrail.git#egg=pixtrail[web]\"\n\n# With web interface dependencies (for zsh)\npip install \"git+https://github.com/sukitsubaki/pixtrail.git#egg=pixtrail[web]\"\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>After installation, verify that PixTrail was installed correctly by running:</p> <pre><code>pixtrail --help\n</code></pre> <p>This should display the help information for PixTrail, showing all available commands and options.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the installation, try these solutions:</p>"},{"location":"installation/#1-command-not-found","title":"1. Command Not Found","text":"<p>If you get a \"command not found\" error when running <code>pixtrail</code>, it may be because the Python scripts directory is not in your PATH. You can try running PixTrail with the full Python module path:</p> <pre><code>python -m pixtrail --help\n</code></pre>"},{"location":"installation/#2-issues-with-extra-dependencies","title":"2. Issues with Extra Dependencies","text":"<p>If you're having trouble installing with extras like <code>[web]</code>, especially on macOS with zsh, make sure to use quotes:</p> <pre><code>pip install \"pixtrail[web]\"\n</code></pre>"},{"location":"installation/#3-installation-in-a-virtual-environment","title":"3. Installation in a Virtual Environment","text":"<p>For a clean installation isolated from your system Python, use a virtual environment:</p> <pre><code># Create a virtual environment\npython -m venv venv_pixtrail\n\n# Activate the virtual environment\n# On Windows:\n# venv_pixtrail\\Scripts\\activate\n# On macOS/Linux:\nsource venv_pixtrail/bin/activate\n\n# Install PixTrail in the virtual environment\npip install \"pixtrail[web]\"\n</code></pre>"},{"location":"installation/#4-upgrade-pip","title":"4. Upgrade pip","text":"<p>An outdated pip can sometimes cause installation issues:</p> <pre><code>pip install --upgrade pip\n</code></pre>"},{"location":"installation/#5-permission-issues","title":"5. Permission Issues","text":"<p>If you're experiencing permission errors, you might need to use <code>sudo</code> (on Linux/macOS) or run your command prompt as Administrator (on Windows). Alternatively, use the <code>--user</code> flag:</p> <pre><code>pip install --user \"pixtrail[web]\"\n</code></pre>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>To uninstall PixTrail:</p> <pre><code>pip uninstall pixtrail\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide addresses common issues you might encounter when using PixTrail.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#no-matches-found-pixtrailweb-error-in-zsh","title":"\"No matches found: pixtrail[web]\" error in zsh","text":"<p>Problem: When trying to install PixTrail with web interface in zsh (default shell on macOS), you get an error like: <pre><code>zsh: no matches found: pixtrail[web]\n</code></pre></p> <p>Solution: In zsh, square brackets are used for pattern matching. Use quotes around the package name: <pre><code>pip install \"pixtrail[web]\"\n</code></pre></p>"},{"location":"troubleshooting/#package-not-found","title":"Package Not Found","text":"<p>Problem: You receive <code>No matching distribution found for pixtrail</code>.</p> <p>Solutions: - Check your internet connection - Verify you have a compatible Python version (3.6+) - Try updating pip: <code>pip install --upgrade pip</code> - If behind a proxy, configure pip to use it: <code>pip install --proxy=http://user:password@proxyserver:port pixtrail</code></p>"},{"location":"troubleshooting/#dependency-installation-failures","title":"Dependency Installation Failures","text":"<p>Problem: Dependencies fail to install.</p> <p>Solutions: - Install build dependencies: <code>pip install wheel setuptools</code> - For Windows users with C extension issues: <code>pip install pipwin &amp;&amp; pipwin install pillow</code> - Try installing in a virtual environment to avoid system conflicts - If using Linux, install development packages: <code>sudo apt-get install python3-dev libjpeg-dev zlib1g-dev</code></p>"},{"location":"troubleshooting/#permission-errors","title":"Permission Errors","text":"<p>Problem: You get \"Permission denied\" errors during installation.</p> <p>Solutions: - Use <code>pip install --user pixtrail</code> to install in user space - Run the command prompt/terminal as administrator/root - Check folder permissions where Python packages are installed</p>"},{"location":"troubleshooting/#package-installed-but-command-not-found","title":"Package installed but command not found","text":"<p>Problem: You've installed PixTrail, but when you run the <code>pixtrail</code> command, you get a \"command not found\" error.</p> <p>Solutions:</p> <ol> <li> <p>Find where Python scripts are installed and add to PATH:    <pre><code># Find your Python scripts directory\npython -c \"import site; print(site.USER_BASE + '/bin')\"  # Linux/macOS\npython -c \"import site; print(site.USER_BASE + '\\\\Scripts')\"  # Windows\n\n# Add to PATH (temporary)\nexport PATH=\"$PATH:/path/to/scripts/directory\"  # Linux/macOS\nset PATH=%PATH%;C:\\path\\to\\scripts\\directory  # Windows\n</code></pre></p> </li> <li> <p>Try running PixTrail with the Python module syntax:    <pre><code>python -m pixtrail --help\n</code></pre></p> </li> <li> <p>Create an alias in your shell configuration file (.bashrc, .zshrc):    <pre><code>alias pixtrail=\"python -m pixtrail\"\n</code></pre></p> </li> <li> <p>Reinstall the package with:    <pre><code>pip install --force-reinstall pixtrail\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#package-shows-as-installed-but-doesnt-work","title":"Package shows as installed but doesn't work","text":"<p>Problem: Pip says the package is installed, but it doesn't work properly.</p> <p>Solutions: 1. Try using a virtual environment for a clean installation:    <pre><code># With venv\npython -m venv pixtrail_env\nsource pixtrail_env/bin/activate  # Linux/macOS\npixtrail_env\\Scripts\\activate  # Windows\n\n# With conda\nconda create -n pixtrail python=3.9\nconda activate pixtrail\n\n# Then install\npip install \"pixtrail[web]\"\n</code></pre></p> <ol> <li> <p>Install directly from GitHub:    <pre><code>pip install git+https://github.com/sukitsubaki/pixtrail.git\n</code></pre></p> </li> <li> <p>Verify the package is correctly installed:    <pre><code>python -c \"import pixtrail; print(pixtrail.__file__)\"\npip show pixtrail\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#command-line-issues","title":"Command Line Issues","text":""},{"location":"troubleshooting/#invalid-syntax-errors","title":"Invalid Syntax Errors","text":"<p>Problem: You get Python syntax errors when running PixTrail.</p> <p>Solutions: - Check that you're using Python 3.6 or newer - Verify that the command line arguments are correctly formatted - Avoid using quotes in paths with spaces; use single quotes if needed: <code>pixtrail -i '/path with spaces/'</code></p>"},{"location":"troubleshooting/#no-gps-data-found","title":"No GPS Data Found","text":"<p>Problem: PixTrail reports \"No GPS data found in photos\".</p> <p>Solutions: - Verify your photos actually contain GPS data using other software (like ExifTool) - Ensure you have permission to read the input directory - Check that the file formats are supported (.jpg, .jpeg, .tiff, .raw formats) - Try processing a single photo known to have GPS data: <code>pixtrail -i /path/to/single_photo.jpg -v</code></p>"},{"location":"troubleshooting/#errors-with-raw-files","title":"Errors with RAW Files","text":"<p>Problem: RAW files aren't processed correctly.</p> <p>Solutions: - Install additional dependencies: <code>pip install rawpy</code> - Check if your RAW format is supported (CR2, NEF, ARW, DNG, etc.) - Try converting RAW to JPEG first, then processing the JPEGs - Use verbose mode to see which files have issues: <code>pixtrail -i /path/to/photos -v</code></p>"},{"location":"troubleshooting/#web-interface-issues","title":"Web Interface Issues","text":""},{"location":"troubleshooting/#web-server-wont-start","title":"Web Server Won't Start","text":"<p>Problem: The web server fails to start.</p> <p>Solutions: - Check if another application is using port 5000 - Try a different port: <code>pixtrail -w --port 8080</code> - Look for error messages in the terminal - Check if you have access rights to bind to the specified host - Install web dependencies if missing: <code>pip install \"pixtrail[web]\"</code></p>"},{"location":"troubleshooting/#browser-doesnt-open-automatically","title":"Browser Doesn't Open Automatically","text":"<p>Problem: The browser doesn't launch when starting the web interface.</p> <p>Solutions: - Open your browser manually and navigate to <code>http://127.0.0.1:5000</code> - Try using the <code>--no-browser</code> flag and then open the URL manually - Check if you have a default browser set in your system</p>"},{"location":"troubleshooting/#directory-selection-not-working","title":"Directory Selection Not Working","text":"<p>Problem: The directory selector doesn't work in the web interface.</p> <p>Solutions: - Try using the file upload option instead - Some browsers have limited directory access (especially on mobile) - Check if you're using a supported browser (Chrome/Firefox/Edge recommended) - Try dragging and dropping the directory onto the drop area</p>"},{"location":"troubleshooting/#files-not-appearing-in-upload","title":"Files Not Appearing in Upload","text":"<p>Problem: Files don't appear after selection in the web interface.</p> <p>Solutions: - Check if you're selecting files with supported formats - Ensure files aren't too large for browser processing - Try dragging and dropping files directly - Clear your browser cache and try again - Use the Chrome or Firefox browser for best compatibility</p>"},{"location":"troubleshooting/#map-does-not-display","title":"Map Does Not Display","text":"<p>Problem: The map doesn't appear after processing.</p> <p>Solutions: - Check your internet connection (needed for map tiles) - Look for JavaScript errors in the browser console (F12) - Verify that your files contain valid GPS coordinates - Try disabling browser extensions that might block content</p>"},{"location":"troubleshooting/#gps-data-issues","title":"GPS Data Issues","text":""},{"location":"troubleshooting/#incorrect-coordinates","title":"Incorrect Coordinates","text":"<p>Problem: Your route appears in the wrong location.</p> <p>Solutions: - Check that your camera's date/time was correctly set when taking photos - Some cameras store coordinates in non-standard formats - Try using ExifTool to verify the coordinates are correct in the original files - Check if any software might have modified the EXIF data before processing</p>"},{"location":"troubleshooting/#missing-timestamps","title":"Missing Timestamps","text":"<p>Problem: Your route has no chronological order.</p> <p>Solutions: - Ensure your camera records timestamps in EXIF data - Check if file modification dates can be used as a fallback - Verify that the time zone settings on your camera were correct</p>"},{"location":"troubleshooting/#inconsistent-gps-data","title":"Inconsistent GPS Data","text":"<p>Problem: Your route has strange jumps or inconsistencies.</p> <p>Solutions: - Photos taken indoors or in \"urban canyons\" may have poor GPS accuracy - Some cameras only update GPS periodically to save battery - Try removing outliers manually before processing - Use clustering or heatmap visualization to identify problematic points</p>"},{"location":"troubleshooting/#gpx-file-issues","title":"GPX File Issues","text":""},{"location":"troubleshooting/#empty-gpx-file","title":"Empty GPX File","text":"<p>Problem: The generated GPX file is empty.</p> <p>Solutions: - Ensure your photos contain GPS data - Check if you have write permissions for the output location - Try specifying a different output path: <code>pixtrail -i /path/to/photos -o /path/to/output.gpx</code> - Run with verbose mode to see what's happening: <code>pixtrail -i /path/to/photos -v</code></p>"},{"location":"troubleshooting/#gpx-import-problems","title":"GPX Import Problems","text":"<p>Problem: Mapping software can't import the generated GPX file.</p> <p>Solutions: - Verify the file was created successfully (should be non-zero size) - Check if the GPX format is compatible with your software - Try opening the file in a text editor to check for obvious errors - Different applications support different GPX features; try a simple viewer first</p>"},{"location":"troubleshooting/#missing-elevation-data","title":"Missing Elevation Data","text":"<p>Problem: Elevation data is missing in the GPX file.</p> <p>Solutions: - Not all cameras record elevation data - Elevation data might be absent or inaccurate depending on the device - Some mapping software can add elevation data after import - Consider using a GPX editor to add elevation data from a DEM (Digital Elevation Model)</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-processing","title":"Slow Processing","text":"<p>Problem: Processing is very slow.</p> <p>Solutions: - RAW files take much longer to process than JPEG - Processing many files at once requires more memory - Processing recursively through many subdirectories takes longer - For large collections, process in smaller batches - Use the command line interface for better performance with many files</p>"},{"location":"troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: PixTrail uses too much memory.</p> <p>Solutions: - Process fewer photos at once - Avoid recursive processing of large directory trees - Close other memory-intensive applications - For very large collections, use batch processing with smaller groups</p>"},{"location":"troubleshooting/#browser-performance-issues","title":"Browser Performance Issues","text":"<p>Problem: The web interface is slow or unresponsive.</p> <p>Solutions: - Enable clustering when displaying many photo markers - Process fewer photos at a time - Try a different browser (Chrome often has the best performance) - Avoid having too many browser tabs or applications open simultaneously</p>"},{"location":"troubleshooting/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"troubleshooting/#debugging-with-verbose-mode","title":"Debugging with Verbose Mode","text":"<p>For detailed information about what's happening:</p> <pre><code>pixtrail -i /path/to/photos -v\n</code></pre> <p>The verbose output will show: - Which files are being processed - Whether EXIF data was found - GPS coordinates extracted - Any errors encountered</p>"},{"location":"troubleshooting/#logging-to-a-file","title":"Logging to a File","text":"<p>To save troubleshooting information to a file:</p> <pre><code>pixtrail -i /path/to/photos -v &gt; pixtrail_log.txt 2&gt;&amp;1\n</code></pre> <p>This captures both standard output and error messages for later analysis.</p>"},{"location":"troubleshooting/#checking-exif-data-manually","title":"Checking EXIF Data Manually","text":"<p>To verify GPS data in your photos:</p> <pre><code># Using exiftool (may need to be installed separately)\nexiftool -gps:all -time:all photo.jpg\n</code></pre>"},{"location":"troubleshooting/#running-from-source","title":"Running from Source","text":"<p>For debugging or development:</p> <pre><code>git clone https://github.com/sukitsubaki/pixtrail.git\ncd pixtrail\npip install -e .\npython -m pixtrail.cli -i /path/to/photos -v\n</code></pre>"},{"location":"troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the FAQ for common questions</li> <li>Search for similar issues in the GitHub repository</li> <li>Ensure you're using the latest version of PixTrail</li> <li>Provide detailed information when reporting issues:</li> <li>PixTrail version: <code>pixtrail --version</code></li> <li>Python version: <code>python --version</code></li> <li>Operating system details</li> <li>Complete error messages</li> <li>Steps to reproduce the problem</li> <li>Sample files (if possible)</li> </ol>"},{"location":"usage/","title":"PixTrail Usage Guide","text":"<p>This guide explains how to use PixTrail effectively, covering command-line options, the Python API, and best practices for different scenarios.</p>"},{"location":"usage/#command-line-interface","title":"Command Line Interface","text":"<p>PixTrail provides a versatile command-line interface for processing photos and generating GPX files.</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>pixtrail -i /path/to/photos\n</code></pre> <p>This processes all photos in the specified directory and creates a GPX file in the same directory.</p>"},{"location":"usage/#command-modes","title":"Command Modes","text":"<p>PixTrail operates in one of three modes:</p> <ol> <li>Single Directory Mode: Process one directory of photos</li> <li>Batch Mode: Process multiple directories at once</li> <li>Web Interface Mode: Start the browser-based UI</li> </ol> <p>You must specify exactly one of these modes for each command.</p>"},{"location":"usage/#core-options","title":"Core Options","text":"Option Short Description <code>--input-dir</code> <code>-i</code> Directory containing photos with GPS data <code>--output</code> <code>-o</code> Output GPX file path (default: auto-named in the input directory) <code>--batch</code> <code>-b</code> Process multiple directories (batch mode) <code>--output-dir</code> <code>-d</code> Output directory for batch mode (default: each input directory) <code>--web</code> <code>-w</code> Start the web interface <code>--recursive</code> <code>-r</code> Search for images recursively in subdirectories <code>--verbose</code> <code>-v</code> Enable verbose output <code>--help</code> <code>-h</code> Show the help message and exit <code>--version</code> Show program's version number and exit"},{"location":"usage/#web-interface-options","title":"Web Interface Options","text":"Option Description <code>--host</code> Host for the web interface (default: 127.0.0.1) <code>--port</code> Port for the web interface (default: 5000) <code>--no-browser</code> Don't automatically open a browser when starting the web interface"},{"location":"usage/#automatic-gpx-naming","title":"Automatic GPX Naming","text":"<p>If you don't specify an output file with <code>-o</code>, PixTrail automatically names the GPX file after the directory containing the photos:</p> <pre><code>pixtrail -i /path/to/Photos-Kyoto\n# Creates: /path/to/Photos-Kyoto.gpx\n</code></pre> <p>Special characters in directory names are converted to underscores for the output filename.</p>"},{"location":"usage/#batch-processing-examples","title":"Batch Processing Examples","text":"<pre><code># Process multiple directories\npixtrail -b /path/to/photos1 /path/to/photos2 /path/to/photos3\n\n# Process multiple directories and save GPX files to a specific directory\npixtrail -b /path/to/photos1 /path/to/photos2 -d /path/to/output_dir\n\n# Process multiple directories recursively\npixtrail -b /path/to/photos1 /path/to/photos2 -r\n\n# Process multiple directories with verbose output\npixtrail -b /path/to/photos1 /path/to/photos2 -v\n</code></pre> <p>When using batch mode: - Each directory is processed separately - A GPX file is created for each directory, automatically named after the directory - You can optionally specify an output directory for all GPX files with <code>-d</code> - The recursive option <code>-r</code> applies to all directories in the batch</p>"},{"location":"usage/#common-command-examples","title":"Common Command Examples","text":"<p>Process photos in a directory and save the GPX file to a custom location:</p> <pre><code>pixtrail -i /path/to/photos -o /path/to/output.gpx\n</code></pre> <p>Process photos recursively in a directory and its subdirectories:</p> <pre><code>pixtrail -i /path/to/photos -r\n</code></pre> <p>Enable verbose output for detailed processing information:</p> <pre><code>pixtrail -i /path/to/photos -v\n</code></pre> <p>Start the web interface with custom host and port:</p> <pre><code>pixtrail -w --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"usage/#using-the-python-api","title":"Using the Python API","text":"<p>You can also use PixTrail programmatically in your Python code.</p>"},{"location":"usage/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from pixtrail.core import PixTrail\n\n# Create a PixTrail object\npt = PixTrail()\n\n# Process a directory of images\nresult = pt.process_directory(\"/path/to/photos\")\ngps_data = result[\"gps_data\"]\n\n# Generate a GPX file\npt.generate_gpx(\"/path/to/output.gpx\")\n</code></pre>"},{"location":"usage/#process-and-generate-in-one-step","title":"Process and Generate in One Step","text":"<pre><code>from pixtrail.core import PixTrail\n\n# Create a PixTrail object\npt = PixTrail()\n\n# Process and generate in one step\npt.process_and_generate(\"/path/to/photos\", \"/path/to/output.gpx\", recursive=True)\n</code></pre>"},{"location":"usage/#advanced-api-usage","title":"Advanced API Usage","text":"<p>You can customize the processing with various parameters:</p> <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\n\n# Process with custom parameters\nresult = pt.process_directory(\n    input_dir=\"/path/to/photos\",\n    recursive=True,\n    file_types=[\".jpg\", \".jpeg\", \".tiff\"],  # Only process these file types\n    min_photos=3,  # Minimum number of photos with GPS data required\n    verbose=True   # Show detailed output\n)\n\n# Check if we have enough GPS data points\nif result[\"stats\"][\"processed\"] &gt;= 3:\n    # Custom GPX file creation with options\n    pt.generate_gpx(\n        output_file=\"/path/to/output.gpx\",\n        add_track=True,       # Include a track connecting waypoints\n        add_timestamps=True,  # Include timestamps in waypoints\n        add_elevations=True   # Include elevation data when available\n    )\n</code></pre>"},{"location":"usage/#working-with-gps-data-directly","title":"Working with GPS Data Directly","text":"<p>You can manipulate the GPS data before generating a GPX file:</p> <pre><code>from pixtrail.core import PixTrail\nfrom pixtrail.gpx_generator import GPXGenerator\n\n# Create a PixTrail object\npt = PixTrail()\n\n# Process a directory of images\nresult = pt.process_directory(\"/path/to/photos\")\ngps_data = result[\"gps_data\"]\n\n# Filter or modify the GPS data as needed\nfiltered_data = [point for point in gps_data if point.get(\"altitude\", 0) &gt; 100]\n\n# Sort data points by timestamp\nfrom operator import itemgetter\nsorted_data = sorted(filtered_data, key=itemgetter(\"timestamp\"))\n\n# Generate a GPX file with the custom data\nGPXGenerator.create_gpx(sorted_data, \"/path/to/output.gpx\")\n</code></pre>"},{"location":"usage/#starting-the-web-interface-programmatically","title":"Starting the Web Interface Programmatically","text":"<p>You can start the web interface from Python code:</p> <pre><code>from pixtrail.web import start_server\n\n# Start the web interface\napp, server = start_server(host=\"127.0.0.1\", port=5000, open_browser=True)\n\n# The server runs in a background thread, so your code can continue\n# Keep your program running to keep the server running\nimport time\ntry:\n    while True:\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    # Shutdown the server when Ctrl+C is pressed\n    server.shutdown()\n</code></pre>"},{"location":"usage/#best-practices","title":"Best Practices","text":""},{"location":"usage/#organizing-your-photos","title":"Organizing Your Photos","text":"<p>For the best results:</p> <ul> <li>Keep photos from a single journey in one directory</li> <li>Use descriptive directory names (they become default GPX filenames)</li> <li>For multi-day trips, consider creating subdirectories for each day</li> <li>Use the recursive option (<code>-r</code>) for nested directories</li> </ul>"},{"location":"usage/#performance-tips","title":"Performance Tips","text":"<ul> <li>For large collections (1000+ photos), process in smaller batches</li> <li>RAW photo formats take longer to process than JPEG</li> <li>Use the web interface for better visual feedback during processing</li> <li>On slower machines, use the command line interface for better performance</li> </ul>"},{"location":"usage/#gpx-file-usage","title":"GPX File Usage","text":"<p>The generated GPX file can be used with:</p> <ul> <li>Google Earth: Import to view your route on a 3D globe</li> <li>OpenStreetMap: View your route on open-source maps</li> <li>GPS Devices: Many Garmin/TomTom devices can import GPX files</li> <li>Smartphone Apps: Apps like OsmAnd, Maps.me, and AllTrails support GPX</li> <li>Sports Trackers: Strava, Komoot, and similar platforms accept GPX imports</li> </ul>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<p>If PixTrail doesn't find GPS data in your photos:</p> <ol> <li>Check if your photos actually contain GPS data using other software</li> <li>Make sure you have permission to read the input directory</li> <li>Try the verbose mode (<code>-v</code>) to see what's happening</li> <li>For RAW formats, ensure you have the necessary dependencies installed</li> </ol> <p>If all else fails, check the Troubleshooting Guide for more solutions.</p>"},{"location":"usage/#return-codes","title":"Return Codes","text":"<p>The PixTrail CLI returns the following exit codes:</p> Code Description 0 Success 1 General error (invalid options, no photos found, etc.) <p>You can use these codes in scripts to determine if processing was successful.</p>"},{"location":"web-interface/","title":"PixTrail Web Interface","text":"<p>The PixTrail web interface provides a user-friendly way to process photos with GPS data and create interactive route visualizations.</p>"},{"location":"web-interface/#getting-started","title":"Getting Started","text":"<p>To start the web interface:</p> <pre><code>pixtrail -w\n</code></pre> <p>This launches a local web server and automatically opens your default browser to the PixTrail interface. If the browser doesn't open automatically, navigate to <code>http://127.0.0.1:5000</code>.</p> <p>You can customize the server settings:</p> <pre><code># Use a custom host and port\npixtrail -w --host 0.0.0.0 --port 8080\n\n# Start the server without opening a browser\npixtrail -w --no-browser\n</code></pre>"},{"location":"web-interface/#interface-overview","title":"Interface Overview","text":"<p>The web interface is divided into several key sections:</p> <ol> <li>Header: Contains the application title and main controls</li> <li>Photo Input: Options for selecting photos to process</li> <li>Map View: Displays the route and photo locations</li> <li>Statistics Panel: Shows journey metrics and charts (when enabled)</li> <li>Status Messages: Provides feedback on operations</li> </ol>"},{"location":"web-interface/#photo-input-options","title":"Photo Input Options","text":""},{"location":"web-interface/#files-tab","title":"Files Tab","text":"<p>The Files tab allows you to upload individual photo files:</p> <ol> <li>Click the \"Choose Files\" button or drag and drop photos onto the drop area</li> <li>Select multiple files using Ctrl/Cmd+click or Shift+click</li> <li>Click \"Process Photos\" to extract GPS data and generate the route</li> </ol>"},{"location":"web-interface/#directory-tab","title":"Directory Tab","text":"<p>The Directory tab lets you process an entire directory of photos:</p> <ol> <li>Click \"Select Directory\" to choose a folder containing photos</li> <li>Optionally check \"Process subdirectories recursively\" to include nested folders</li> <li>If using recursive processing, you can set the maximum depth level</li> <li>Click \"Process Photos\" to begin</li> </ol>"},{"location":"web-interface/#map-features","title":"Map Features","text":"<p>After photos are processed, the map view shows your journey:</p>"},{"location":"web-interface/#basic-map-controls","title":"Basic Map Controls","text":"<ul> <li>Zoom: Use the +/- buttons or mouse wheel</li> <li>Pan: Click and drag the map</li> <li>Reset View: Double-click to zoom to your full route</li> <li>Photo Markers: Click markers to see details about each photo</li> </ul>"},{"location":"web-interface/#advanced-visualization","title":"Advanced Visualization","text":"<p>The map includes several advanced visualization options:</p>"},{"location":"web-interface/#marker-clustering","title":"Marker Clustering","text":"<p>For routes with many photos, marker clustering groups nearby markers:</p> <ol> <li>Click \"Enable Clustering\" to activate</li> <li>Use the radius slider to adjust the clustering sensitivity</li> <li>Click on clusters to zoom in and see individual markers</li> <li>Click \"Disable Clustering\" to turn it off</li> </ol>"},{"location":"web-interface/#heat-map","title":"Heat Map","text":"<p>The heat map visualizes where you spent the most time:</p> <ol> <li>Click \"Show Heatmap\" to display the heat map overlay</li> <li>Areas with more photos or longer stays appear in red/yellow</li> <li>Less frequented areas show in blue/green</li> <li>Click \"Hide Heatmap\" to remove the overlay</li> </ol>"},{"location":"web-interface/#map-controls","title":"Map Controls","text":"<p>The controls panel includes:</p> <ul> <li>Download GPX: Save your route as a GPX file</li> <li>Show/Hide Heatmap: Toggle the heat map visualization</li> <li>Enable/Disable Clustering: Toggle marker clustering</li> <li>Show/Hide Statistics: Toggle the statistics panel</li> <li>Clear Data: Reset and start fresh</li> </ul>"},{"location":"web-interface/#statistics-panel","title":"Statistics Panel","text":"<p>Click \"Show Statistics\" to view detailed metrics about your journey:</p>"},{"location":"web-interface/#summary-statistics","title":"Summary Statistics","text":"<p>The summary includes:</p> <ul> <li>Total Distance: The cumulative distance traveled</li> <li>Total Duration: Time between first and last photo</li> <li>Start/End Times: Timestamps from the first and last photos</li> <li>Avg. Speed: Average traveling speed calculated from timestamps</li> <li>Max. Speed: Maximum speed between any two consecutive photos</li> <li>Elevation Data: Minimum, maximum, and total elevation gain</li> <li>Photo Count: Number of photos with GPS data</li> </ul>"},{"location":"web-interface/#interactive-charts","title":"Interactive Charts","text":"<p>The statistics panel includes two interactive charts:</p> <ol> <li>Elevation Profile: Shows elevation changes throughout your journey</li> <li>Speed Profile: Shows speed variations between photo locations</li> </ol> <p>Hover over the charts to see exact values at any point.</p>"},{"location":"web-interface/#privacy-features","title":"Privacy Features","text":"<p>PixTrail respects your privacy:</p> <ul> <li>All processing happens locally on your device</li> <li>JPEG and TIFF photos are processed directly in your browser</li> <li>RAW and other formats are processed locally by the server</li> <li>No data is sent to external services</li> <li>Photos are never uploaded to the internet</li> </ul>"},{"location":"web-interface/#browser-compatibility","title":"Browser Compatibility","text":"<p>The web interface works best in modern browsers:</p> <ul> <li>Chrome/Edge (latest 2 versions)</li> <li>Firefox (latest 2 versions)</li> <li>Safari (latest 2 versions)</li> </ul> <p>The interface is also mobile-responsive, though file selection may be limited on some mobile devices.</p>"},{"location":"web-interface/#technical-details","title":"Technical Details","text":""},{"location":"web-interface/#client-side-processing","title":"Client-Side Processing","text":"<p>JPEG and TIFF files are processed entirely in the browser:</p> <ol> <li>Files are read using the JavaScript File API</li> <li>EXIF data is extracted using client-side JavaScript</li> <li>GPS coordinates and timestamps are collected</li> <li>The map is updated with the extracted data</li> <li>The original photos never leave your device</li> </ol>"},{"location":"web-interface/#server-side-processing","title":"Server-Side Processing","text":"<p>For RAW and other non-browser-friendly formats:</p> <ol> <li>Files are temporarily uploaded to the local server</li> <li>The server extracts EXIF data using Python libraries</li> <li>Only the extracted GPS data is returned to the browser</li> <li>Temporary files are automatically deleted</li> </ol>"},{"location":"web-interface/#troubleshooting","title":"Troubleshooting","text":""},{"location":"web-interface/#common-issues","title":"Common Issues","text":"<ul> <li>No files appear when selecting a directory: Some browsers have limited directory support; try the Files tab instead</li> <li>No route appears after processing: Your photos may not contain GPS data</li> <li>Map doesn't load: Check your internet connection (needed for map tiles)</li> <li>Slow performance with many photos: Try enabling clustering for improved performance</li> </ul> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"web-interface/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>The web interface supports several keyboard shortcuts:</p> <ul> <li>Ctrl+O: Open file selection dialog</li> <li>Ctrl+D: Open directory selection dialog</li> <li>Ctrl+P: Process selected photos</li> <li>Esc: Close popups or cancel operations</li> <li>H: Toggle heatmap</li> <li>C: Toggle clustering</li> <li>S: Toggle statistics panel</li> <li>D: Download GPX file (when available)</li> </ul>"},{"location":"web-interface/#next-steps","title":"Next Steps","text":"<p>After visualizing your route, you might want to:</p> <ul> <li>Customize the visualization with different map styles or settings</li> <li>Process multiple directories to compare different journeys</li> <li>Analyze your route statistics to gain insights about your journey</li> </ul>"},{"location":"api/","title":"PixTrail API Documentation","text":"<p>This section provides comprehensive documentation for the PixTrail API, covering both the JavaScript client-side API and the Python backend API.</p>"},{"location":"api/#api-overview","title":"API Overview","text":"<p>PixTrail's API is organized into several modules that provide specific functionality:</p>"},{"location":"api/#python-backend-api","title":"Python Backend API","text":"<ul> <li>Core Module - Main functionality for processing photos and generating GPX files</li> <li>EXIF Reader - Extracts GPS and other metadata from image files</li> <li>GPX Generator - Creates GPX files from GPS data</li> <li>Utilities - Helper functions for various operations</li> </ul>"},{"location":"api/#javascript-client-api","title":"JavaScript Client API","text":"<ul> <li>API Client - Handles communication with the server</li> <li>Map Visualization - Displays maps and routes</li> <li>Statistics - Calculates and displays route statistics</li> <li>File Upload - Manages file selection and uploading</li> <li>EXIF Reader Client - Client-side EXIF data extraction</li> <li>Utilities - Browser-side helper functions</li> </ul>"},{"location":"api/#getting-started-with-the-python-api","title":"Getting Started with the Python API","text":"<p>To use PixTrail in your Python code, start by importing the core module:</p> <pre><code>from pixtrail.core import PixTrail\n\n# Create a PixTrail instance\npt = PixTrail()\n\n# Process photos and generate a GPX file\nresult = pt.process_and_generate(\n    input_dir=\"/path/to/photos\", \n    output_file=\"/path/to/output.gpx\",\n    recursive=True\n)\n\nif result['success']:\n    print(f\"Successfully processed {result['stats']['processed']} photos\")\n    print(f\"GPX file created at: {result['output_file']}\")\nelse:\n    print(\"Processing failed:\", result['message'])\n</code></pre>"},{"location":"api/#getting-started-with-the-javascript-api","title":"Getting Started with the JavaScript API","text":"<p>The JavaScript API is primarily used within the web interface, but you can also integrate it into your own web applications:</p> <pre><code>// Import the required modules\nimport { APIClient } from './api/apiClient.js';\nimport { MapVisualization } from './modules/mapVisualization.js';\nimport { Statistics } from './modules/statistics.js';\n\n// Initialize the map\nconst map = new MapVisualization({\n    mapContainer: document.getElementById('map-container'),\n    mapElement: document.getElementById('map')\n});\n\n// Process photos using the API client\nconst formData = new FormData();\nformData.append('photos', fileInput.files);\n\nAPIClient.submitPhotos(formData, (progress) =&gt; {\n    console.log(`Upload progress: ${Math.round((progress.loaded / progress.total) * 100)}%`);\n})\n.then(response =&gt; {\n    return APIClient.processPhotos(response.session_id);\n})\n.then(data =&gt; {\n    // Display waypoints on the map\n    map.setWaypoints(data.waypoints);\n\n    // Initialize statistics with the waypoints\n    const statistics = new Statistics({\n        container: document.getElementById('statistics-container')\n    });\n    statistics.setWaypoints(data.waypoints);\n    statistics.show();\n})\n.catch(error =&gt; {\n    console.error('Error processing photos:', error);\n});\n</code></pre>"},{"location":"api/#api-modules-in-detail","title":"API Modules in Detail","text":"<p>Each API module is documented in detail on its own page:</p> <ul> <li>Core Module - The heart of PixTrail, handling photo processing and GPX generation</li> <li>EXIF Reader - Specialized module for extracting EXIF data from images</li> <li>GPX Generator - Creates and manipulates GPX files</li> <li>Utilities - Common utility functions used throughout the application</li> </ul>"},{"location":"api/#using-the-python-api","title":"Using the Python API","text":""},{"location":"api/#basic-photo-processing","title":"Basic Photo Processing","text":"<pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\n\n# Process a directory of photos\nresult = pt.process_directory(\"/path/to/photos\", recursive=True)\n\n# Extract the GPS data\ngps_data = result['gps_data']\n\n# Generate a GPX file from the GPS data\npt.generate_gpx(\"/path/to/output.gpx\")\n</code></pre>"},{"location":"api/#advanced-processing-options","title":"Advanced Processing Options","text":"<p>The Python API supports various options for customized processing:</p> <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\n\n# Process with custom options\nresult = pt.process_directory(\n    input_dir=\"/path/to/photos\",\n    recursive=True,\n    min_photos=5,  # Require at least 5 photos with GPS data\n    file_types=[\".jpg\", \".jpeg\"],  # Process only these file types\n    exclude_dirs=[\"private\", \"unwanted\"],  # Skip these directories\n    verbose=True  # Show detailed progress\n)\n\n# Generate GPX with custom options\nif result['stats']['processed'] &gt; 0:\n    pt.generate_gpx(\n        output_file=\"/path/to/output.gpx\",\n        add_track=True,  # Include a track connecting waypoints\n        add_elevations=True,  # Include elevation data\n        add_timestamps=True,  # Include timestamps\n        creator=\"My Custom Application\"  # Custom creator tag\n    )\n</code></pre>"},{"location":"api/#direct-gpx-generation","title":"Direct GPX Generation","text":"<p>You can also generate GPX files directly from GPS data:</p> <pre><code>from pixtrail.gpx_generator import GPXGenerator\n\n# Custom GPS data\ngps_data = [\n    {\n        \"latitude\": 35.0394,\n        \"longitude\": 135.7292,\n        \"altitude\": 100.0,\n        \"timestamp\": \"2023-01-01T12:00:00Z\",\n        \"name\": \"Kinkaku-ji Temple\"\n    },\n    {\n        \"latitude\": 35.0395,\n        \"longitude\": 135.7296,\n        \"altitude\": 101.0,\n        \"timestamp\": \"2023-01-01T12:15:00Z\",\n        \"name\": \"Garden View\"\n    }\n]\n\n# Generate a GPX file from the custom data\nGPXGenerator.create_gpx(gps_data, \"/path/to/custom.gpx\")\n</code></pre>"},{"location":"api/#using-the-javascript-api","title":"Using the JavaScript API","text":""},{"location":"api/#map-visualization","title":"Map Visualization","text":"<pre><code>import { MapVisualization } from './modules/mapVisualization.js';\n\n// Initialize the map\nconst map = new MapVisualization({\n    mapContainer: document.getElementById('map-container'),\n    mapElement: document.getElementById('map')\n});\n\n// Set waypoints\nconst waypoints = [\n    { latitude: 35.0394, longitude: 135.7292, name: \"Point 1\", timestamp: \"2023-01-01T12:00:00Z\" },\n    { latitude: 35.0395, longitude: 135.7296, name: \"Point 2\", timestamp: \"2023-01-01T12:15:00Z\" }\n];\nmap.setWaypoints(waypoints);\n\n// Enable additional features\nmap.showHeatmap();\nmap.enableClustering();\n</code></pre>"},{"location":"api/#browser-side-exif-extraction","title":"Browser-Side EXIF Extraction","text":"<pre><code>import { ExifReader } from './modules/exifReader.js';\n\n// Get file input element\nconst fileInput = document.getElementById('file-input');\n\n// Process files when selected\nfileInput.addEventListener('change', async () =&gt; {\n    const files = fileInput.files;\n\n    try {\n        // Extract GPS data directly in the browser\n        const gpsData = await ExifReader.extractGpsDataFromImages(files, (current, total) =&gt; {\n            const percent = Math.round((current / total) * 100);\n            console.log(`Processing: ${percent}%`);\n        });\n\n        // Use the extracted GPS data\n        console.log('GPS data extracted:', gpsData);\n    } catch (error) {\n        console.error('Error extracting GPS data:', error);\n    }\n});\n</code></pre>"},{"location":"api/#api-integration-examples","title":"API Integration Examples","text":""},{"location":"api/#creating-a-custom-processing-script","title":"Creating a Custom Processing Script","text":"<pre><code>#!/usr/bin/env python3\nimport os\nimport sys\nfrom pixtrail.core import PixTrail\nfrom pixtrail.gpx_generator import GPXGenerator\n\ndef process_trip_photos(base_dir, output_dir):\n    \"\"\"Process photos from a trip organized by day.\"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Get all day directories\n    day_dirs = [d for d in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, d))]\n\n    # Initialize PixTrail\n    pt = PixTrail()\n\n    # Process each day\n    all_gps_data = []\n    for day_dir in sorted(day_dirs):\n        day_path = os.path.join(base_dir, day_dir)\n        day_output = os.path.join(output_dir, f\"{day_dir}.gpx\")\n\n        print(f\"Processing {day_dir}...\")\n\n        # Process the day's photos\n        result = pt.process_and_generate(day_path, day_output)\n\n        if result['success']:\n            print(f\"  Created {day_output} with {result['stats']['processed']} photos\")\n            # Collect all GPS data for the combined file\n            all_gps_data.extend(result['gps_data'])\n        else:\n            print(f\"  Failed to process {day_dir}: {result.get('message', 'Unknown error')}\")\n\n    # Create a combined GPX file for the entire trip\n    if all_gps_data:\n        combined_output = os.path.join(output_dir, \"complete_trip.gpx\")\n        if GPXGenerator.create_gpx(all_gps_data, combined_output):\n            print(f\"Created combined GPX file: {combined_output}\")\n\n    return len(all_gps_data)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"Usage: process_trip.py &lt;photos_directory&gt; &lt;output_directory&gt;\")\n        sys.exit(1)\n\n    total_points = process_trip_photos(sys.argv[1], sys.argv[2])\n    print(f\"Total GPS points processed: {total_points}\")\n</code></pre>"},{"location":"api/#building-a-custom-web-interface","title":"Building a Custom Web Interface","text":"<pre><code>// This is a simplified example to demonstrate API usage\nimport { APIClient } from './api/apiClient.js';\nimport { MapVisualization } from './modules/mapVisualization.js';\nimport { Statistics } from './modules/statistics.js';\nimport { ExifReader } from './modules/exifReader.js';\nimport { FileUpload } from './modules/fileUpload.js';\n\n// Initialize map\nconst map = new MapVisualization({\n    mapContainer: document.getElementById('map-container'),\n    mapElement: document.getElementById('map')\n});\n\n// Initialize file upload\nconst fileUpload = new FileUpload({\n    formElement: document.getElementById('upload-form'),\n    fileInput: document.getElementById('file-input'),\n    submitButton: document.getElementById('submit-button'),\n    progressContainer: document.getElementById('progress-container'),\n    progressBar: document.getElementById('progress-bar'),\n    progressText: document.getElementById('progress-text'),\n    onSuccess: (result) =&gt; {\n        // Process the result\n        processGpsData(result.gps_data);\n    }\n});\n\n// Initialize statistics\nconst statistics = new Statistics({\n    container: document.getElementById('statistics-container'),\n    toggleButton: document.getElementById('toggle-statistics')\n});\n\n// Process client-side or send to server depending on file type\nasync function processPhotos(files) {\n    const jpegFiles = Array.from(files).filter(file =&gt; \n        file.type === 'image/jpeg' || file.type === 'image/jpg' || file.type === 'image/tiff');\n    const otherFiles = Array.from(files).filter(file =&gt; \n        !(file.type === 'image/jpeg' || file.type === 'image/jpg' || file.type === 'image/tiff'));\n\n    let allGpsData = [];\n\n    // Process JPEG files in the browser\n    if (jpegFiles.length &gt; 0) {\n        try {\n            const gpsData = await ExifReader.extractGpsDataFromImages(jpegFiles, updateProgress);\n            allGpsData = allGpsData.concat(gpsData);\n        } catch (error) {\n            console.error('Error processing JPEG files:', error);\n        }\n    }\n\n    // Process other files via server\n    if (otherFiles.length &gt; 0) {\n        try {\n            const formData = new FormData();\n            otherFiles.forEach(file =&gt; formData.append('photos', file));\n\n            const response = await APIClient.submitPhotos(formData, updateProgress);\n            const result = await APIClient.processPhotos(response.session_id);\n            allGpsData = allGpsData.concat(result.gps_data);\n        } catch (error) {\n            console.error('Error processing files via server:', error);\n        }\n    }\n\n    return allGpsData;\n}\n\nfunction processGpsData(gpsData) {\n    // Set waypoints on the map\n    map.setWaypoints(gpsData);\n\n    // Update statistics\n    statistics.setWaypoints(gpsData);\n    statistics.show();\n\n    // Enable map features\n    document.getElementById('map-controls').classList.remove('hidden');\n}\n\nfunction updateProgress(progress) {\n    const percent = Math.round((progress.loaded / progress.total) * 100);\n    document.getElementById('progress-bar').style.width = `${percent}%`;\n    document.getElementById('progress-text').textContent = `${percent}%`;\n}\n\n// Set up event listeners for the custom UI\ndocument.getElementById('toggle-heatmap').addEventListener('click', () =&gt; {\n    map.toggleHeatmap();\n});\n\ndocument.getElementById('toggle-clustering').addEventListener('click', () =&gt; {\n    map.toggleClustering();\n});\n\ndocument.getElementById('download-gpx').addEventListener('click', async () =&gt; {\n    try {\n        const gpsData = map.getWaypoints();\n        if (gpsData.length &gt; 0) {\n            const response = await APIClient.createGPX(gpsData);\n            if (response.success) {\n                APIClient.downloadGPX(response.session_id, response.filename);\n            }\n        }\n    } catch (error) {\n        console.error('Error creating GPX file:', error);\n    }\n});\n</code></pre>"},{"location":"api/#data-structures","title":"Data Structures","text":""},{"location":"api/#gps-data-format","title":"GPS Data Format","text":"<p>The standard GPS data format used throughout the API:</p> <pre><code>{\n    latitude: Number,    // Decimal degrees (required)\n    longitude: Number,   // Decimal degrees (required)\n    altitude: Number,    // Meters above sea level (optional)\n    timestamp: String,   // ISO 8601 timestamp (optional)\n    name: String         // Identifier, typically filename (optional)\n}\n</code></pre>"},{"location":"api/#processing-result-format","title":"Processing Result Format","text":"<p>The standard result object returned by processing functions:</p> <pre><code>{\n    success: Boolean,    // Whether processing was successful\n    message: String,     // Status message or error description\n    stats: {\n        processed: Number,  // Number of photos with GPS data\n        total: Number,      // Total number of photos processed\n        skipped: Number     // Number of photos without GPS data\n    },\n    gps_data: Array,     // Array of GPS data objects\n    output_file: String  // Path to the generated GPX file (if applicable)\n}\n</code></pre>"},{"location":"api/#api-change-log","title":"API Change Log","text":""},{"location":"api/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial API release</li> </ul>"},{"location":"api/#version-110","title":"Version 1.1.0","text":"<ul> <li>Added client-side EXIF extraction for JPEG and TIFF files</li> <li>Improved error handling in GPX generation</li> <li>Added support for batch processing in Python API</li> </ul>"},{"location":"api/#version-120","title":"Version 1.2.0","text":"<ul> <li>Added heatmap visualization module</li> <li>Added marker clustering module</li> <li>Enhanced statistics calculation and visualization</li> <li>Improved handling of photos without timestamps</li> </ul>"},{"location":"api/#api-roadmap","title":"API Roadmap","text":"<p>Planned future API enhancements:</p> <ul> <li>Video file GPS extraction</li> <li>Support for custom GPX track styling</li> <li>Filtering and analysis functions</li> <li>Integration with online mapping services</li> <li>Mobile-friendly APIs</li> <li>Geofencing and region detection</li> </ul>"},{"location":"api/core/","title":"PixTrail Core Modules","text":"<p>This page documents the core modules that form the backbone of PixTrail. These modules implement the main features of the application and provide the foundation for both the command-line interface and the web application.</p>"},{"location":"api/core/#core-python-module","title":"Core Python Module","text":"<p>The <code>core.py</code> module contains the main functionality of PixTrail, providing a high-level interface for processing photos and generating GPX files.</p>"},{"location":"api/core/#pixtrail-class","title":"PixTrail Class","text":"<pre><code>class PixTrail:\n    \"\"\"Main class for processing photos and generating GPX files.\"\"\"\n</code></pre>"},{"location":"api/core/#methods","title":"Methods","text":""},{"location":"api/core/#process_directoryinput_dir-recursivefalse-min_photos1-file_typesnone-exclude_dirsnone-verbosefalse","title":"<code>process_directory(input_dir, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, verbose=False)</code>","text":"<pre><code>def process_directory(self, input_dir, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, verbose=False):\n    \"\"\"\n    Process photos in a directory to extract GPS data.\n\n    Args:\n        input_dir (str): Directory containing photos with GPS data\n        recursive (bool): Whether to search subdirectories recursively\n        min_photos (int): Minimum number of photos with GPS data required\n        file_types (list): List of file extensions to process (default: None = all supported)\n        exclude_dirs (list): List of directory names to exclude\n        verbose (bool): Whether to print detailed information\n\n    Returns:\n        dict: Dictionary containing result information\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\nresult = pt.process_directory(\n    input_dir=\"/path/to/photos\",\n    recursive=True,\n    file_types=[\".jpg\", \".jpeg\", \".tiff\"]\n)\n\nif result[\"success\"]:\n    print(f\"Processed {result['stats']['processed']} photos with GPS data\")\n    print(f\"Total photos scanned: {result['stats']['total']}\")\n\n    # Access the extracted GPS data\n    gps_data = result[\"gps_data\"]\n</code></pre></p>"},{"location":"api/core/#generate_gpxoutput_filenone-add_tracktrue-add_timestampstrue-add_elevationstrue-creatornone","title":"<code>generate_gpx(output_file=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None)</code>","text":"<pre><code>def generate_gpx(self, output_file=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None):\n    \"\"\"\n    Generate a GPX file from previously processed GPS data.\n\n    Args:\n        output_file (str): Path where GPX file will be saved (default: auto-named)\n        add_track (bool): Whether to add a track connecting waypoints\n        add_timestamps (bool): Whether to include timestamps\n        add_elevations (bool): Whether to include elevation data\n        creator (str): GPX creator tag (default: \"PixTrail\")\n\n    Returns:\n        dict: Dictionary containing result information\n    \"\"\"\n</code></pre> <p>Example: <pre><code># After processing a directory\nresult = pt.generate_gpx(\n    output_file=\"/path/to/output.gpx\",\n    add_track=True,\n    creator=\"MyCustomApplication\"\n)\n\nif result[\"success\"]:\n    print(f\"GPX file created at: {result['output_file']}\")\n</code></pre></p>"},{"location":"api/core/#process_and_generateinput_dir-output_filenone-recursivefalse-min_photos1-file_typesnone-exclude_dirsnone-add_tracktrue-add_timestampstrue-add_elevationstrue-creatornone-verbosefalse","title":"<code>process_and_generate(input_dir, output_file=None, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None, verbose=False)</code>","text":"<pre><code>def process_and_generate(self, input_dir, output_file=None, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None, verbose=False):\n    \"\"\"\n    Process photos and generate a GPX file in a single step.\n\n    Args:\n        input_dir (str): Directory containing photos with GPS data\n        output_file (str): Path where GPX file will be saved (default: auto-named)\n        recursive (bool): Whether to search subdirectories recursively\n        min_photos (int): Minimum number of photos with GPS data required\n        file_types (list): List of file extensions to process\n        exclude_dirs (list): List of directory names to exclude\n        add_track (bool): Whether to add a track connecting waypoints\n        add_timestamps (bool): Whether to include timestamps\n        add_elevations (bool): Whether to include elevation data\n        creator (str): GPX creator tag (default: \"PixTrail\")\n        verbose (bool): Whether to print detailed information\n\n    Returns:\n        dict: Dictionary containing result information\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\nresult = pt.process_and_generate(\n    input_dir=\"/path/to/photos\",\n    output_file=\"/path/to/output.gpx\",\n    recursive=True,\n    verbose=True\n)\n\nif result[\"success\"]:\n    print(f\"Successfully processed {result['stats']['processed']} photos\")\n    print(f\"GPX file created at: {result['output_file']}\")\nelse:\n    print(f\"Failed: {result['message']}\")\n</code></pre></p>"},{"location":"api/core/#batch_processinput_dirs-output_dirnone-recursivefalse-min_photos1-file_typesnone-exclude_dirsnone-add_tracktrue-add_timestampstrue-add_elevationstrue-creatornone-verbosefalse","title":"<code>batch_process(input_dirs, output_dir=None, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None, verbose=False)</code>","text":"<pre><code>def batch_process(self, input_dirs, output_dir=None, recursive=False, min_photos=1, file_types=None, exclude_dirs=None, add_track=True, add_timestamps=True, add_elevations=True, creator=None, verbose=False):\n    \"\"\"\n    Process multiple directories in batch mode.\n\n    Args:\n        input_dirs (list): List of directories to process\n        output_dir (str): Directory where GPX files will be saved (default: same as input)\n        recursive (bool): Whether to search subdirectories recursively\n        min_photos (int): Minimum number of photos with GPS data required\n        file_types (list): List of file extensions to process\n        exclude_dirs (list): List of directory names to exclude\n        add_track (bool): Whether to add a track connecting waypoints\n        add_timestamps (bool): Whether to include timestamps\n        add_elevations (bool): Whether to include elevation data\n        creator (str): GPX creator tag (default: \"PixTrail\")\n        verbose (bool): Whether to print detailed information\n\n    Returns:\n        dict: Dictionary containing result information for each input directory\n    \"\"\"\n</code></pre> <p>Example: <pre><code>from pixtrail.core import PixTrail\n\npt = PixTrail()\nresults = pt.batch_process(\n    input_dirs=[\"/path/to/trip1\", \"/path/to/trip2\", \"/path/to/trip3\"],\n    output_dir=\"/path/to/gpx_files\",\n    recursive=True\n)\n\nfor dir_name, result in results.items():\n    if result[\"success\"]:\n        print(f\"{dir_name}: Success - {result['stats']['processed']} photos - {result['output_file']}\")\n    else:\n        print(f\"{dir_name}: Failed - {result['message']}\")\n</code></pre></p>"},{"location":"api/core/#return-value-format","title":"Return Value Format","text":"<p>Most methods in the PixTrail class return a dictionary with the following structure:</p> <pre><code>{\n    \"success\": bool,       # Whether the operation was successful\n    \"message\": str,        # Status message or error description\n    \"stats\": {\n        \"processed\": int,  # Number of photos with GPS data\n        \"total\": int,      # Total number of photos processed\n        \"skipped\": int     # Number of photos without GPS data\n    },\n    \"gps_data\": list,      # List of GPS data dictionaries\n    \"output_file\": str     # Path to the generated GPX file (if applicable)\n}\n</code></pre>"},{"location":"api/core/#javascript-api-client","title":"JavaScript API Client","text":"<p>The API Client handles all communication between the browser and the local server in the web interface.</p> <pre><code>/**\n * API Client for PixTrail web interface\n */\nclass APIClient {\n    // Methods for communicating with the server\n}\n</code></pre>"},{"location":"api/core/#methods_1","title":"Methods","text":""},{"location":"api/core/#submitphotosformdata-progresscallback","title":"<code>submitPhotos(formData, progressCallback)</code>","text":"<pre><code>/**\n * Submit photos for processing\n * @param {FormData} formData - Form data with photos\n * @param {Function} progressCallback - Callback for upload progress\n * @returns {Promise&lt;Object&gt;} Promise resolving to the response data\n */\nstatic submitPhotos(formData, progressCallback) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// Create form data with files\nconst formData = new FormData();\nfileInput.files.forEach(file =&gt; formData.append('photos', file));\n\n// Submit photos and track progress\nAPIClient.submitPhotos(formData, (progress) =&gt; {\n  const percent = Math.round((progress.loaded / progress.total) * 100);\n  console.log(`Upload progress: ${percent}%`);\n})\n.then(response =&gt; {\n  console.log('Photos submitted successfully:', response);\n  return response.session_id;\n})\n.catch(error =&gt; {\n  console.error('Error submitting photos:', error);\n});\n</code></pre></p>"},{"location":"api/core/#processphotossessionid","title":"<code>processPhotos(sessionId)</code>","text":"<pre><code>/**\n * Process uploaded photos to extract GPS data\n * @param {string} sessionId - Session ID from the submission\n * @returns {Promise&lt;Object&gt;} Promise resolving to the extracted GPS data\n */\nstatic processPhotos(sessionId) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// After submitting photos\nAPIClient.submitPhotos(formData, progressCallback)\n  .then(response =&gt; {\n    return APIClient.processPhotos(response.session_id);\n  })\n  .then(data =&gt; {\n    console.log('GPS data extracted:', data.waypoints);\n    // Use the waypoints data\n  })\n  .catch(error =&gt; {\n    console.error('Error processing photos:', error);\n  });\n</code></pre></p>"},{"location":"api/core/#creategpxgpsdata","title":"<code>createGPX(gpsData)</code>","text":"<pre><code>/**\n * Create a GPX file from GPS data\n * @param {Array} gpsData - Array of GPS data points\n * @returns {Promise&lt;Object&gt;} Promise resolving to the creation result\n */\nstatic createGPX(gpsData) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// After processing photos\nAPIClient.createGPX(waypoints)\n  .then(result =&gt; {\n    console.log('GPX file created:', result);\n    if (result.success) {\n      window.location.href = APIClient.getDownloadUrl(result.session_id, result.filename);\n    }\n  })\n  .catch(error =&gt; {\n    console.error('Error creating GPX file:', error);\n  });\n</code></pre></p>"},{"location":"api/core/#downloadgpxsessionid-filename","title":"<code>downloadGPX(sessionId, filename)</code>","text":"<pre><code>/**\n * Download a GPX file\n * @param {string} sessionId - Session ID\n * @param {string} filename - GPX filename\n */\nstatic downloadGPX(sessionId, filename) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>document.getElementById('download-button').addEventListener('click', () =&gt; {\n  APIClient.downloadGPX(sessionId, 'track.gpx');\n});\n</code></pre></p>"},{"location":"api/core/#getdownloadurlsessionid-filename","title":"<code>getDownloadUrl(sessionId, filename)</code>","text":"<pre><code>/**\n * Get download URL for a GPX file\n * @param {string} sessionId - Session ID\n * @param {string} filename - GPX filename\n * @returns {string} Download URL\n */\nstatic getDownloadUrl(sessionId, filename) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>const url = APIClient.getDownloadUrl(sessionId, 'track.gpx');\nconsole.log('Download URL:', url);\n</code></pre></p>"},{"location":"api/core/#cleanupsessionsessionid","title":"<code>cleanupSession(sessionId)</code>","text":"<pre><code>/**\n * Clean up session data on the server\n * @param {string} sessionId - Session ID to clean up\n * @returns {Promise&lt;Object&gt;} Promise resolving to the cleanup result\n */\nstatic cleanupSession(sessionId) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// Clean up when done\nwindow.addEventListener('beforeunload', () =&gt; {\n  if (sessionId) {\n    APIClient.cleanupSession(sessionId);\n  }\n});\n</code></pre></p>"},{"location":"api/core/#map-visualization","title":"Map Visualization","text":"<p>The <code>mapVisualization.js</code> module handles the display of maps and routes.</p> <pre><code>/**\n * Map visualization module for PixTrail\n */\nclass MapVisualization {\n    /**\n     * Initialize map visualization\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    // Methods for map handling\n}\n</code></pre>"},{"location":"api/core/#constructor-options","title":"Constructor Options","text":"<pre><code>/**\n * Initialize map visualization\n * @param {Object} config - Configuration options\n * @param {HTMLElement} config.mapContainer - Container element for the map\n * @param {HTMLElement} config.mapElement - The map element itself\n * @param {Object} [config.mapOptions] - Leaflet map options\n * @param {Object} [config.tileLayerOptions] - Tile layer options\n * @param {string} [config.tileLayerUrl] - Tile layer URL template\n * @param {string} [config.attribution] - Map attribution text\n */\nconst mapViz = new MapVisualization({\n  mapContainer: document.getElementById('map-container'),\n  mapElement: document.getElementById('map')\n});\n</code></pre>"},{"location":"api/core/#methods_2","title":"Methods","text":""},{"location":"api/core/#initmap","title":"<code>initMap()</code>","text":"<pre><code>/**\n * Initialize the map and base layer\n * @returns {Object} Leaflet map instance\n */\ninitMap() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#showmapcontainer","title":"<code>showMapContainer()</code>","text":"<pre><code>/**\n * Show the map container if it's hidden\n */\nshowMapContainer() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#setwaypointswaypoints","title":"<code>setWaypoints(waypoints)</code>","text":"<pre><code>/**\n * Set waypoints and display them on the map\n * @param {Array} waypoints - Array of waypoint objects\n */\nsetWaypoints(waypoints) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// After processing photos\nmapViz.setWaypoints(data.waypoints);\n</code></pre></p>"},{"location":"api/core/#showwaypoints","title":"<code>showWaypoints()</code>","text":"<pre><code>/**\n * Display waypoints on the map\n */\nshowWaypoints() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#clearmaplayers","title":"<code>clearMapLayers()</code>","text":"<pre><code>/**\n * Clear all map layers (markers and route)\n */\nclearMapLayers() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#getmap","title":"<code>getMap()</code>","text":"<pre><code>/**\n * Get the map instance\n * @returns {Object} Leaflet map instance\n */\ngetMap() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#showheatmap-hideheatmap","title":"<code>showHeatmap()</code> / <code>hideHeatmap()</code>","text":"<pre><code>/**\n * Show/hide the heat map visualization\n */\nshowHeatmap() {\n    // Implementation\n}\n\nhideHeatmap() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#enableclustering-disableclustering","title":"<code>enableClustering()</code> / <code>disableClustering()</code>","text":"<pre><code>/**\n * Enable/disable marker clustering\n */\nenableClustering() {\n    // Implementation\n}\n\ndisableClustering() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#addcontrol","title":"<code>addControl()</code>","text":"<pre><code>/**\n * Attach a control to the map\n * @param {Object} control - Leaflet control to add\n * @param {string} [position='topright'] - Control position\n * @returns {Object} The added control\n */\naddControl(control, position) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#addbuttoncontrol","title":"<code>addButtonControl()</code>","text":"<pre><code>/**\n * Create and add a simple button control to the map\n * @param {string} html - Button HTML content\n * @param {Function} onClick - Click handler\n * @param {string} [position='topright'] - Control position\n * @param {string} [title=''] - Button title attribute\n * @returns {Object} The created control\n */\naddButtonControl(html, onClick, position, title) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#file-upload","title":"File Upload","text":"<p>The <code>fileUpload.js</code> module manages file selection, validation, and uploading.</p> <pre><code>/**\n * File upload module for PixTrail\n */\nclass FileUpload {\n    /**\n     * Initialize file upload functionality\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    // Methods for file upload handling\n}\n</code></pre>"},{"location":"api/core/#constructor-options_1","title":"Constructor Options","text":"<pre><code>/**\n * Initialize file upload functionality\n * @param {Object} config - Configuration options\n * @param {HTMLElement} config.formElement - Form element\n * @param {HTMLElement} config.progressContainer - Progress container element\n * @param {HTMLElement} config.progressBar - Progress bar element\n * @param {HTMLElement} config.progressText - Progress text element\n * @param {HTMLElement} config.statusContainer - Status message container\n * @param {HTMLInputElement} config.submitButton - Submit button\n * @param {string} config.activeInput - Active input type ('file' or 'directory')\n * @param {HTMLInputElement} config.fileInput - File input element\n * @param {HTMLInputElement} config.directoryInput - Directory input element\n * @param {HTMLInputElement} config.recursiveCheckbox - Recursive processing checkbox\n * @param {HTMLSelectElement} config.depthSelect - Recursive depth select element\n * @param {Function} config.onSuccess - Callback on successful processing\n * @param {Function} config.onError - Callback on error\n */\nconst fileUpload = new FileUpload({\n  formElement: document.getElementById('upload-form'),\n  progressContainer: document.getElementById('progress-container'),\n  progressBar: document.getElementById('progress-bar'),\n  progressText: document.getElementById('progress-text'),\n  statusContainer: document.getElementById('status-messages'),\n  submitButton: document.getElementById('submit-button'),\n  activeInput: 'file',\n  fileInput: document.getElementById('file-input'),\n  directoryInput: document.getElementById('directory-input'),\n  recursiveCheckbox: document.getElementById('recursive-checkbox'),\n  depthSelect: document.getElementById('depth-select'),\n  onSuccess: handleSuccess,\n  onError: handleError\n});\n</code></pre>"},{"location":"api/core/#methods_3","title":"Methods","text":""},{"location":"api/core/#setactiveinputinputtype","title":"<code>setActiveInput(inputType)</code>","text":"<pre><code>/**\n * Set active input type\n * @param {string} inputType - 'file' or 'directory'\n */\nsetActiveInput(inputType) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updatesubmitbuttonstate","title":"<code>updateSubmitButtonState()</code>","text":"<pre><code>/**\n * Update submit button state based on form validity\n */\nupdateSubmitButtonState() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#showprogress-hideprogress","title":"<code>showProgress()</code> / <code>hideProgress()</code>","text":"<pre><code>/**\n * Show/hide progress container\n */\nshowProgress() {\n    // Implementation\n}\n\nhideProgress() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updateprogresscurrent-total-message","title":"<code>updateProgress(current, total, message)</code>","text":"<pre><code>/**\n * Update progress bar and text\n * @param {number} current - Current progress value\n * @param {number} total - Total progress value\n * @param {string} [message] - Optional message to display\n */\nupdateProgress(current, total, message) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#showstatusmessagemessage-type-timeout","title":"<code>showStatusMessage(message, type, timeout)</code>","text":"<pre><code>/**\n * Show a status message\n * @param {string} message - Message to display\n * @param {string} [type='info'] - Message type: 'success', 'error', 'warning', 'info'\n * @param {number} [timeout=10000] - Auto-removal timeout in ms (0 to disable)\n */\nshowStatusMessage(message, type, timeout) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#exif-reader","title":"EXIF Reader","text":"<p>The <code>exifReader.js</code> extracts GPS and other metadata from image files directly in the browser.</p> <pre><code>/**\n * EXIF Reader module for PixTrail\n */\nclass ExifReader {\n    // Methods for EXIF data extraction\n}\n</code></pre>"},{"location":"api/core/#methods_4","title":"Methods","text":""},{"location":"api/core/#extractgpsdatafromimagesfiles-progresscallback","title":"<code>extractGpsDataFromImages(files, progressCallback)</code>","text":"<pre><code>/**\n * Extract GPS data from images directly in the browser\n * @param {File[]} files - Array of image files\n * @param {Function} progressCallback - Callback for processing progress updates\n * @returns {Promise&lt;Array&gt;} Promise resolving to extracted GPS data\n */\nstatic extractGpsDataFromImages(files, progressCallback) {\n    // Implementation\n}\n</code></pre> <p>Example: <pre><code>// Extract GPS data from files in the browser\nExifReader.extractGpsDataFromImages(fileInput.files, (current, total) =&gt; {\n  const percent = Math.round((current / total) * 100);\n  console.log(`Processing: ${percent}%`);\n})\n.then(gpsData =&gt; {\n  console.log('Extracted GPS data:', gpsData);\n  // Use the extracted GPS data\n})\n.catch(error =&gt; {\n  console.error('Error extracting GPS data:', error);\n});\n</code></pre></p>"},{"location":"api/core/#extractgpsfromexiftags-file","title":"<code>extractGpsFromExif(tags, file)</code>","text":"<pre><code>/**\n * Extract GPS data from EXIF metadata tags\n * @param {Object} tags - EXIF tags extracted by EXIF.js\n * @param {File} file - Original file\n * @returns {Object|null} Extracted GPS data or null if not available\n */\nstatic extractGpsFromExif(exifTags, file) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#statistics","title":"Statistics","text":"<p>The <code>statistics.js</code> module handles route statistics calculation and visualization.</p> <pre><code>/**\n * Statistics module for PixTrail\n */\nclass Statistics {\n    /**\n     * Initialize statistics functionality\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    // Methods for statistics handling\n}\n</code></pre>"},{"location":"api/core/#constructor-options_2","title":"Constructor Options","text":"<pre><code>/**\n * Initialize statistics functionality\n * @param {Object} config - Configuration options\n * @param {HTMLElement} config.container - Statistics container element\n * @param {HTMLElement} [config.toggleButton] - Button to toggle statistics panel\n * @param {Object} [config.elements] - Object mapping statistic IDs to their display elements\n * @param {HTMLElement} [config.elevationChartContainer] - Elevation chart container\n * @param {HTMLElement} [config.speedChartContainer] - Speed chart container\n */\nconst statistics = new Statistics({\n  container: document.getElementById('statistics-container'),\n  toggleButton: document.getElementById('toggle-statistics'),\n  elements: {\n    'total-distance': document.getElementById('total-distance'),\n    'total-duration': document.getElementById('total-duration'),\n    // Other elements...\n  },\n  elevationChartContainer: document.getElementById('elevation-chart'),\n  speedChartContainer: document.getElementById('speed-chart')\n});\n</code></pre>"},{"location":"api/core/#methods_5","title":"Methods","text":""},{"location":"api/core/#setwaypointswaypoints_1","title":"<code>setWaypoints(waypoints)</code>","text":"<pre><code>/**\n * Set waypoints data and calculate statistics\n * @param {Array} waypoints - Array of waypoint objects\n */\nsetWaypoints(waypoints) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#calculatestatistics","title":"<code>calculateStatistics()</code>","text":"<pre><code>/**\n * Calculate statistics from waypoints\n */\ncalculateStatistics() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#toggle-show-hide","title":"<code>toggle()</code> / <code>show()</code> / <code>hide()</code>","text":"<pre><code>/**\n * Toggle, show, or hide statistics panel\n */\ntoggle() {\n    // Implementation\n}\n\nshow() {\n    // Implementation\n}\n\nhide() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updatedisplay","title":"<code>updateDisplay()</code>","text":"<pre><code>/**\n * Update statistics display\n */\nupdateDisplay() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updatecharts","title":"<code>updateCharts()</code>","text":"<pre><code>/**\n * Update charts with current statistics data\n */\nupdateCharts() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#getstatistics","title":"<code>getStatistics()</code>","text":"<pre><code>/**\n * Get the current route statistics object\n * @returns {Object} Statistics object\n */\ngetStatistics() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#exportreport","title":"<code>exportReport()</code>","text":"<pre><code>/**\n * Export statistics as a formatted text report\n * @returns {string} Report text\n */\nexportReport() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#heatmap","title":"Heatmap","text":"<p>The <code>heatmap.js</code> provides heat map visualization on the map.</p> <pre><code>/**\n * Heatmap module for PixTrail\n */\nclass Heatmap {\n    /**\n     * Initialize heatmap functionality\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    // Methods for heatmap handling\n}\n</code></pre>"},{"location":"api/core/#constructor-options_3","title":"Constructor Options","text":"<pre><code>/**\n * Initialize heatmap functionality\n * @param {Object} config - Configuration options\n * @param {Object} config.map - Leaflet map instance\n * @param {HTMLElement} [config.toggleButton] - Button to toggle heatmap\n * @param {Object} [config.heatmapOptions] - Leaflet.heat options\n */\nconst heatmap = new Heatmap({\n  map: leafletMap,\n  toggleButton: document.getElementById('toggle-heatmap'),\n  heatmapOptions: {\n    radius: 25,\n    blur: 15,\n    maxZoom: 17\n  }\n});\n</code></pre>"},{"location":"api/core/#methods_6","title":"Methods","text":""},{"location":"api/core/#setwaypointswaypoints_2","title":"<code>setWaypoints(waypoints)</code>","text":"<pre><code>/**\n * Set waypoints data\n * @param {Array} waypoints - Array of waypoint objects\n */\nsetWaypoints(waypoints) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#toggle-show-hide_1","title":"<code>toggle()</code> / <code>show()</code> / <code>hide()</code>","text":"<pre><code>/**\n * Toggle, show, or hide heatmap\n */\ntoggle() {\n    // Implementation\n}\n\nshow() {\n    // Implementation\n}\n\nhide() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updateoptionsoptions","title":"<code>updateOptions(options)</code>","text":"<pre><code>/**\n * Update heatmap options\n * @param {Object} options - New options to apply\n */\nupdateOptions(options) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#marker-clustering","title":"Marker Clustering","text":"<p>The <code>clustering.js</code> provides marker clustering functionality.</p> <pre><code>/**\n * Marker clustering module for PixTrail\n */\nclass MarkerClustering {\n    /**\n     * Initialize marker clustering functionality\n     * @param {Object} config - Configuration options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    // Methods for clustering handling\n}\n</code></pre>"},{"location":"api/core/#constructor-options_4","title":"Constructor Options","text":"<pre><code>/**\n * Initialize marker clustering functionality\n * @param {Object} config - Configuration options\n * @param {Object} config.map - Leaflet map instance\n * @param {HTMLElement} [config.toggleButton] - Button to toggle clustering\n * @param {HTMLElement} [config.radiusSlider] - Slider to control cluster radius\n * @param {HTMLElement} [config.radiusValue] - Element to display radius value\n * @param {HTMLElement} [config.clusterOptions] - Container for cluster options\n * @param {Object} [config.clusteringOptions] - Leaflet.markercluster options\n */\nconst clustering = new MarkerClustering({\n  map: leafletMap,\n  toggleButton: document.getElementById('toggle-clustering'),\n  radiusSlider: document.getElementById('cluster-radius'),\n  radiusValue: document.getElementById('radius-value'),\n  clusterOptions: document.getElementById('cluster-options'),\n  initialRadius: 80\n});\n</code></pre>"},{"location":"api/core/#methods_7","title":"Methods","text":""},{"location":"api/core/#setwaypointswaypoints-setmarkersmarkers","title":"<code>setWaypoints(waypoints)</code> / <code>setMarkers(markers)</code>","text":"<pre><code>/**\n * Set waypoints data\n * @param {Array} waypoints - Array of waypoint objects\n */\nsetWaypoints(waypoints) {\n    // Implementation\n}\n\n/**\n * Set individual markers that will be clustered\n * @param {Array} markers - Array of Leaflet marker objects\n */\nsetMarkers(markers) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#toggle-enable-disable","title":"<code>toggle()</code> / <code>enable()</code> / <code>disable()</code>","text":"<pre><code>/**\n * Toggle, enable, or disable clustering\n */\ntoggle() {\n    // Implementation\n}\n\nenable() {\n    // Implementation\n}\n\ndisable() {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#updateclusterradius-setradiusradius","title":"<code>updateClusterRadius()</code> / <code>setRadius(radius)</code>","text":"<pre><code>/**\n * Update cluster radius\n */\nupdateClusterRadius() {\n    // Implementation\n}\n\n/**\n * Set cluster radius\n * @param {number} radius - New radius in pixels\n */\nsetRadius(radius) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/core/#integration-example","title":"Integration Example","text":"<p>Here's an example showing how these core modules work together:</p> <pre><code>// Initialize map visualization\nconst mapViz = new MapVisualization({\n  mapContainer: document.getElementById('map-container'),\n  mapElement: document.getElementById('map')\n});\n\n// Initialize additional features\nconst heatmap = new Heatmap({ map: mapViz.getMap() });\nconst clustering = new MarkerClustering({ map: mapViz.getMap() });\nconst statistics = new Statistics({\n  container: document.getElementById('statistics-container')\n});\n\n// Initialize file upload\nconst fileUpload = new FileUpload({\n  // Configuration...\n  onSuccess: (result) =&gt; {\n    // Set waypoints to map and features\n    mapViz.setWaypoints(result.waypoints);\n    heatmap.setWaypoints(result.waypoints);\n    clustering.setMarkers(mapViz.markers);\n    statistics.setWaypoints(result.waypoints);\n\n    // Show UI elements\n    mapViz.showMapContainer();\n    document.getElementById('map-controls').classList.remove('hidden');\n  }\n});\n\n// Add toggle buttons for features\ndocument.getElementById('toggle-heatmap').addEventListener('click', () =&gt; {\n  heatmap.toggle();\n});\n\ndocument.getElementById('toggle-clustering').addEventListener('click', () =&gt; {\n  clustering.toggle();\n});\n\ndocument.getElementById('toggle-statistics').addEventListener('click', () =&gt; {\n  statistics.toggle();\n});\n\ndocument.getElementById('download-gpx').addEventListener('click', () =&gt; {\n  const gpsData = mapViz.getWaypoints();\n  if (gpsData.length &gt; 0) {\n    APIClient.createGPX(gpsData)\n      .then(result =&gt; {\n        if (result.success) {\n          APIClient.downloadGPX(result.session_id, result.filename);\n        }\n      });\n  }\n});\n</code></pre>"},{"location":"api/core/#module-dependencies","title":"Module Dependencies","text":"<p>The core modules generally depend on the utility modules and sometimes on each other:</p> <ul> <li>All modules use <code>domHelpers.js</code> for DOM manipulation</li> <li>All modules use <code>uiUtils.js</code> for UI operations</li> <li><code>mapVisualization.js</code> uses <code>gpsUtils.js</code> for coordinate validation</li> <li><code>fileUpload.js</code> uses <code>fileUtils.js</code> for file handling</li> <li><code>statistics.js</code> uses <code>charts.js</code> for chart creation</li> <li><code>heatmap.js</code> and <code>clustering.js</code> depend on <code>mapVisualization.js</code> for the map instance</li> </ul> <p>See the Module Structure document for more details on module dependencies.</p>"},{"location":"api/exif/","title":"EXIF Reader API Reference","text":"<p>The <code>exif_reader</code> module provides functionality for extracting EXIF data from image files, focusing on GPS information.</p>"},{"location":"api/exif/#exifreader-class","title":"ExifReader Class","text":"<pre><code>class ExifReader:\n    \"\"\"Class for reading EXIF data from image files, focusing on GPS information.\"\"\"\n</code></pre> <p>This class is responsible for extracting GPS data from image files using multiple methods to ensure maximum compatibility with different image formats.</p>"},{"location":"api/exif/#key-features","title":"Key Features","text":"<ul> <li>Supports a wide range of image formats including JPEG, TIFF, and RAW</li> <li>Extracts GPS coordinates, altitude, and timestamps</li> <li>Uses a fallback mechanism when primary extraction methods fail</li> <li>Handles error cases gracefully</li> <li>Provides detailed error information in verbose mode</li> </ul>"},{"location":"api/exif/#method-reference","title":"Method Reference","text":""},{"location":"api/exif/#extract_gps_dataimage_path","title":"<code>extract_gps_data(image_path)</code>","text":"<p>Extracts GPS data from an image file.</p> <pre><code>@staticmethod\ndef extract_gps_data(image_path):\n    \"\"\"\n    Extract GPS data from an image file.\n\n    Args:\n        image_path: Path to the image file\n\n    Returns:\n        Dictionary containing GPS information (latitude, longitude, altitude, timestamp)\n        or None if no GPS data is found\n    \"\"\"\n</code></pre>"},{"location":"api/exif/#parameters","title":"Parameters","text":"<ul> <li>image_path (str): Path to the image file</li> </ul>"},{"location":"api/exif/#returns","title":"Returns","text":"<ul> <li>dict or None: Dictionary containing GPS information or None if no GPS data is found</li> </ul>"},{"location":"api/exif/#return-dictionary-structure","title":"Return Dictionary Structure","text":"<pre><code>{\n    \"latitude\": float,     # Latitude in decimal degrees\n    \"longitude\": float,    # Longitude in decimal degrees\n    \"altitude\": float,     # Altitude in meters (optional)\n    \"timestamp\": datetime, # Timestamp from photo (optional)\n    \"name\": str            # Filename or identifier\n}\n</code></pre>"},{"location":"api/exif/#example-usage","title":"Example Usage","text":"<pre><code>from pixtrail.exif_reader import ExifReader\n\n# Extract GPS data from a single image\ngps_data = ExifReader.extract_gps_data(\"/path/to/image.jpg\")\n\nif gps_data:\n    print(f\"Latitude: {gps_data['latitude']}\")\n    print(f\"Longitude: {gps_data['longitude']}\")\n    if 'altitude' in gps_data:\n        print(f\"Altitude: {gps_data['altitude']} meters\")\n    if 'timestamp' in gps_data:\n        print(f\"Timestamp: {gps_data['timestamp']}\")\nelse:\n    print(\"No GPS data found in the image\")\n</code></pre>"},{"location":"api/exif/#_extract_gps_with_pillowimage_path","title":"<code>_extract_gps_with_pillow(image_path)</code>","text":"<p>Extracts GPS data using Pillow as a fallback method.</p> <pre><code>@staticmethod\ndef _extract_gps_with_pillow(image_path):\n    \"\"\"\n    Extract GPS data using Pillow as a fallback method.\n\n    Args:\n        image_path: Path to the image file\n\n    Returns:\n        Dictionary containing GPS information or None if no GPS data is found\n    \"\"\"\n</code></pre> <p>This is an internal method that serves as a fallback when the primary extraction method fails. While not typically called directly, it's documented here for cases where specific Pillow-based extraction is needed.</p>"},{"location":"api/exif/#_convert_to_degreesvalue","title":"<code>_convert_to_degrees(value)</code>","text":"<p>Converts GPS coordinates from degrees, minutes, seconds format to decimal degrees.</p> <pre><code>@staticmethod\ndef _convert_to_degrees(value):\n    \"\"\"\n    Convert GPS coordinates from degrees, minutes, seconds format to decimal degrees.\n\n    Args:\n        value: Tuple of (degrees, minutes, seconds)\n\n    Returns:\n        Decimal degrees as a float\n    \"\"\"\n</code></pre> <p>This utility method is used internally during GPS data extraction but may be useful for custom processing of raw GPS data.</p>"},{"location":"api/exif/#how-the-exifreader-works","title":"How the ExifReader Works","text":"<p>The ExifReader uses a multi-strategy approach to extract GPS data:</p> <ol> <li>Primary Extraction - Tries the <code>exifread</code> library first, which provides detailed and accurate EXIF information from most image formats</li> <li>Fallback Extraction - If the primary method fails, falls back to Pillow (PIL) for basic EXIF data extraction</li> <li>Error Handling - Catches exceptions from both methods and returns None if all extraction attempts fail</li> <li>Data Normalization - Standardizes the extracted data into a consistent format regardless of the extraction method used</li> </ol>"},{"location":"api/exif/#extraction-process-flow","title":"Extraction Process Flow","text":"<pre><code>+-------------------+\n| Image File Input  |\n+-------------------+\n         |\n         v\n+-------------------+\n| Try exifread      | --&gt; Success --&gt; Extract GPS Data\n+-------------------+                      |\n         |                                 v\n         | Fail                    +-------------------+\n         v                         | Convert to        |\n+-------------------+              | Standard Format   |\n| Try Pillow        | --&gt; Success --&gt; and Return      |\n+-------------------+                      |\n         |                                 v\n         | Fail                    +-------------------+\n         v                         | Return GPS Data   |\n+-------------------+              | Dictionary        |\n| Return None       |              +-------------------+\n+-------------------+\n</code></pre>"},{"location":"api/exif/#supported-image-formats","title":"Supported Image Formats","text":"<p>The ExifReader is designed to work with a wide range of image formats:</p> <ul> <li>JPEG/JFIF - Full support through both extraction methods</li> <li>TIFF - Good support through both extraction methods</li> <li>RAW Formats - Support varies by format:</li> <li>Canon CR2: Good support via exifread</li> <li>Nikon NEF: Good support via exifread</li> <li>Sony ARW: Good support via exifread</li> <li>DNG: Good support via exifread</li> <li>Others: Support depends on exifread's capabilities</li> <li>PNG - Limited EXIF support, as PNG typically doesn't contain much EXIF data</li> <li>BMP - No EXIF support (will always return None)</li> </ul>"},{"location":"api/exif/#example-applications","title":"Example Applications","text":""},{"location":"api/exif/#batch-processing-multiple-images","title":"Batch Processing Multiple Images","text":"<pre><code>from pixtrail.exif_reader import ExifReader\nimport os\nimport csv\n\ndef extract_gps_to_csv(directory, output_csv):\n    \"\"\"Extract GPS data from all images in a directory and write to CSV.\"\"\"\n    results = []\n\n    for filename in os.listdir(directory):\n        if filename.lower().endswith(('.jpg', '.jpeg', '.tiff', '.png', '.nef', '.cr2', '.arw')):\n            filepath = os.path.join(directory, filename)\n            gps_data = ExifReader.extract_gps_data(filepath)\n\n            if gps_data:\n                results.append({\n                    'filename': filename,\n                    'latitude': gps_data['latitude'],\n                    'longitude': gps_data['longitude'],\n                    'altitude': gps_data.get('altitude', ''),\n                    'timestamp': gps_data.get('timestamp', '')\n                })\n\n    # Write results to CSV\n    with open(output_csv, 'w', newline='') as csvfile:\n        fieldnames = ['filename', 'latitude', 'longitude', 'altitude', 'timestamp']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for data in results:\n            writer.writerow(data)\n\n    return len(results)\n\n# Usage\ncount = extract_gps_to_csv('/path/to/photos', 'gps_data.csv')\nprint(f\"Extracted GPS data from {count} images\")\n</code></pre>"},{"location":"api/exif/#creating-a-custom-extraction-function","title":"Creating a Custom Extraction Function","text":"<pre><code>from pixtrail.exif_reader import ExifReader\nfrom datetime import datetime\n\ndef extract_with_custom_handling(image_path):\n    \"\"\"Extract GPS data with custom error handling and default values.\"\"\"\n    try:\n        gps_data = ExifReader.extract_gps_data(image_path)\n\n        if gps_data:\n            # Add default altitude if missing\n            if 'altitude' not in gps_data:\n                gps_data['altitude'] = 0.0\n\n            # Add custom fields\n            gps_data['source'] = 'photo'\n            gps_data['processed_at'] = datetime.now()\n\n            # Add photo quality rating based on GPS accuracy (example)\n            # This is hypothetical - EXIF doesn't typically include accuracy metrics\n            lat_minutes = (gps_data['latitude'] % 1) * 60\n            long_minutes = (gps_data['longitude'] % 1) * 60\n\n            if lat_minutes % 1 == 0 and long_minutes % 1 == 0:\n                # Even minutes suggest rounded data, possibly less accurate\n                gps_data['quality'] = 'medium'\n            else:\n                gps_data['quality'] = 'high'\n\n            return gps_data\n        else:\n            print(f\"No GPS data found in {image_path}\")\n            return None\n\n    except Exception as e:\n        print(f\"Error processing {image_path}: {e}\")\n        return None\n\n# Usage\ngps_data = extract_with_custom_handling(\"/path/to/image.jpg\")\n</code></pre>"},{"location":"api/exif/#filtering-photos-by-location","title":"Filtering Photos by Location","text":"<pre><code>from pixtrail.exif_reader import ExifReader\nimport os\nimport math\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"Calculate distance between two points in kilometers using the Haversine formula.\"\"\"\n    # Earth radius in kilometers\n    R = 6371.0\n\n    # Convert degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n\n    # Differences\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n\n    # Haversine formula\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\ndef find_photos_near_location(directory, target_lat, target_lon, radius_km):\n    \"\"\"Find photos taken within a specified radius of a target location.\"\"\"\n    nearby_photos = []\n\n    for filename in os.listdir(directory):\n        if filename.lower().endswith(('.jpg', '.jpeg', '.tiff', '.png', '.nef', '.cr2')):\n            filepath = os.path.join(directory, filename)\n            gps_data = ExifReader.extract_gps_data(filepath)\n\n            if gps_data:\n                distance = distance_between_points(\n                    target_lat, target_lon, \n                    gps_data['latitude'], gps_data['longitude']\n                )\n\n                if distance &lt;= radius_km:\n                    nearby_photos.append({\n                        'filename': filename,\n                        'distance_km': round(distance, 2),\n                        'gps_data': gps_data\n                    })\n\n    # Sort by distance\n    nearby_photos.sort(key=lambda x: x['distance_km'])\n\n    return nearby_photos\n\n# Usage example: Find photos taken within 1km of the Eiffel Tower\nphotos = find_photos_near_location(\n    '/path/to/photos',\n    48.8584, 2.2945,  # Eiffel Tower coordinates\n    1.0  # 1km radius\n)\n\nfor photo in photos:\n    print(f\"{photo['filename']} - {photo['distance_km']}km away\")\n</code></pre>"},{"location":"api/exif/#error-handling","title":"Error Handling","text":"<p>The ExifReader includes robust error handling to deal with various issues:</p> <ul> <li>Missing EXIF Data: Returns None without raising exceptions</li> <li>Corrupted EXIF Data: Catches and logs exceptions, returns None</li> <li>Unsupported File Formats: Gracefully handles unsupported formats</li> <li>File Access Issues: Reports permission problems</li> <li>Memory Limitations: Manages memory efficiently when processing large RAW files</li> </ul>"},{"location":"api/exif/#performance-considerations","title":"Performance Considerations","text":"<p>When processing large numbers of images, consider the following:</p> <ul> <li>JPEG and TIFF files process much faster than RAW formats</li> <li>Consider using a multiprocessing approach for large batches</li> <li>Pillow-based extraction is faster but less accurate than exifread</li> <li>Memory usage can be high when processing RAW files</li> </ul>"},{"location":"api/exif/#limitations","title":"Limitations","text":"<ul> <li>Some image formats have limited or no EXIF support</li> <li>GPS data accuracy depends on the device that took the photo</li> <li>Altitude data may be missing or inaccurate in many photos</li> <li>Timestamp formats can vary between camera manufacturers</li> <li>Extracting GPS data from RAW files requires additional dependencies</li> </ul>"},{"location":"api/exif/#related-modules","title":"Related Modules","text":"<ul> <li>GPX Generator - For creating GPX files from extracted GPS data</li> <li>Core Module - For high-level photo processing functionality</li> <li>Utilities - For helper functions related to GPS data processing</li> </ul>"},{"location":"api/gpx/","title":"GPX Generator API Reference","text":"<p>The <code>gpx_generator</code> module provides functionality for creating GPX files from GPS data extracted from photos.</p>"},{"location":"api/gpx/#gpxgenerator-class","title":"GPXGenerator Class","text":"<pre><code>class GPXGenerator:\n    \"\"\"Class for generating GPX files from GPS data.\"\"\"\n</code></pre> <p>This class is responsible for creating GPX files from GPS data points, allowing you to visualize and share routes based on your photos.</p>"},{"location":"api/gpx/#key-features","title":"Key Features","text":"<ul> <li>Creates GPX files from GPS data points</li> <li>Supports both waypoints and tracks</li> <li>Handles elevation and timestamp data</li> <li>Allows for custom metadata</li> <li>Provides fault-tolerant file generation</li> </ul>"},{"location":"api/gpx/#method-reference","title":"Method Reference","text":""},{"location":"api/gpx/#create_gpxgps_data_list-output_path","title":"<code>create_gpx(gps_data_list, output_path)</code>","text":"<p>Creates a GPX file from a list of GPS data points.</p> <pre><code>@staticmethod\ndef create_gpx(gps_data_list, output_path):\n    \"\"\"\n    Create a GPX file from a list of GPS data points.\n\n    Args:\n        gps_data_list: List of dictionaries containing GPS data\n                       (latitude, longitude, altitude, timestamp, name)\n        output_path: Path where the GPX file will be saved\n\n    Returns:\n        bool: True if the GPX file was created successfully, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"api/gpx/#parameters","title":"Parameters","text":"<ul> <li>gps_data_list (list): List of dictionaries containing GPS data with the following keys:</li> <li>latitude (float): Decimal latitude (required)</li> <li>longitude (float): Decimal longitude (required)</li> <li>altitude (float): Altitude in meters (optional)</li> <li>timestamp (datetime or str): Timestamp (optional)</li> <li> <p>name (str): Waypoint name (optional)</p> </li> <li> <p>output_path (str): Path where the GPX file will be saved</p> </li> </ul>"},{"location":"api/gpx/#returns","title":"Returns","text":"<ul> <li>bool: True if the GPX file was created successfully, False otherwise</li> </ul>"},{"location":"api/gpx/#example-usage","title":"Example Usage","text":"<pre><code>from pixtrail.gpx_generator import GPXGenerator\nfrom datetime import datetime\n\n# Create sample GPS data\ngps_data = [\n    {\n        \"latitude\": 35.0394,\n        \"longitude\": 135.7292,\n        \"altitude\": 100.0,\n        \"timestamp\": datetime(2023, 1, 1, 12, 0, 0),\n        \"name\": \"photo1.jpg\"\n    },\n    {\n        \"latitude\": 35.6812,\n        \"longitude\": 139.7671,\n        \"altitude\": 200.0,\n        \"timestamp\": datetime(2023, 1, 2, 12, 0, 0),\n        \"name\": \"photo2.jpg\"\n    }\n]\n\n# Generate GPX file\nsuccess = GPXGenerator.create_gpx(gps_data, \"/path/to/output.gpx\")\n\nif success:\n    print(\"GPX file created successfully\")\nelse:\n    print(\"Failed to create GPX file\")\n</code></pre>"},{"location":"api/gpx/#add_waypoint_to_gpxgpx_file-latitude-longitude-namenone-altitudenone-timestampnone","title":"<code>add_waypoint_to_gpx(gpx_file, latitude, longitude, name=None, altitude=None, timestamp=None)</code>","text":"<p>Adds a waypoint to an existing GPX file or creates a new file if it doesn't exist.</p> <pre><code>@staticmethod\ndef add_waypoint_to_gpx(gpx_file, latitude, longitude, name=None, altitude=None, timestamp=None):\n    \"\"\"\n    Add a waypoint to an existing GPX file. If the file doesn't exist, create it.\n\n    Args:\n        gpx_file: Path to the GPX file\n        latitude: Waypoint latitude\n        longitude: Waypoint longitude\n        name: Waypoint name (optional)\n        altitude: Waypoint altitude (optional)\n        timestamp: Waypoint timestamp (optional)\n\n    Returns:\n        bool: True if the waypoint was added successfully, False otherwise\n    \"\"\"\n</code></pre>"},{"location":"api/gpx/#parameters_1","title":"Parameters","text":"<ul> <li>gpx_file (str): Path to the GPX file</li> <li>latitude (float): Waypoint latitude</li> <li>longitude (float): Waypoint longitude</li> <li>name (str, optional): Waypoint name</li> <li>altitude (float, optional): Waypoint altitude in meters</li> <li>timestamp (datetime or str, optional): Waypoint timestamp</li> </ul>"},{"location":"api/gpx/#returns_1","title":"Returns","text":"<ul> <li>bool: True if the waypoint was added successfully, False otherwise</li> </ul>"},{"location":"api/gpx/#example-usage_1","title":"Example Usage","text":"<pre><code>from pixtrail.gpx_generator import GPXGenerator\nfrom datetime import datetime\n\n# Add a single waypoint to a GPX file\nsuccess = GPXGenerator.add_waypoint_to_gpx(\n    \"/path/to/output.gpx\",\n    35.0394,\n    135.7292,\n    name=\"Kinkaku-ji\",\n    altitude=100.0,\n    timestamp=datetime.now()\n)\n\nif success:\n    print(\"Waypoint added successfully\")\nelse:\n    print(\"Failed to add waypoint\")\n</code></pre>"},{"location":"api/gpx/#create_gpx_with_optionsgps_data_list-output_path-add_tracktrue-add_timestampstrue-add_elevationstrue-creatornone-namenone-descriptionnone","title":"<code>create_gpx_with_options(gps_data_list, output_path, add_track=True, add_timestamps=True, add_elevations=True, creator=None, name=None, description=None)</code>","text":"<p>Creates a GPX file with additional customization options.</p> <pre><code>@staticmethod\ndef create_gpx_with_options(gps_data_list, output_path, add_track=True, add_timestamps=True, \n                           add_elevations=True, creator=None, name=None, description=None):\n    \"\"\"\n    Create a GPX file with customization options.\n\n    Args:\n        gps_data_list: List of dictionaries containing GPS data\n        output_path: Path where the GPX file will be saved\n        add_track: Whether to add a track connecting the waypoints (default: True)\n        add_timestamps: Whether to include timestamps in the GPX (default: True)\n        add_elevations: Whether to include elevation data in the GPX (default: True)\n        creator: GPX creator tag (default: \"PixTrail\")\n        name: GPX name tag (optional)\n        description: GPX description tag (optional)\n\n    Returns:\n        bool: True if the GPX file was created successfully, False otherwise\n    \"\"\"\n</code></pre> <p>This method provides more control over GPX file generation than the basic <code>create_gpx</code> method.</p>"},{"location":"api/gpx/#example-usage_2","title":"Example Usage","text":"<pre><code>from pixtrail.gpx_generator import GPXGenerator\n\n# Create a custom GPX file\nsuccess = GPXGenerator.create_gpx_with_options(\n    gps_data_list,\n    \"/path/to/custom.gpx\",\n    add_track=True,\n    add_timestamps=True,\n    add_elevations=True,\n    creator=\"My Custom Application\",\n    name=\"My Journey\",\n    description=\"Photos from my vacation\"\n)\n</code></pre>"},{"location":"api/gpx/#gpx-file-structure","title":"GPX File Structure","text":"<p>The GPX files generated by the GPXGenerator include:</p> <ol> <li>Metadata: Information about the GPX file itself</li> <li>Creator: Application that created the file</li> <li>Name: Optional name for the GPX file</li> <li>Description: Optional description</li> <li> <p>Time: Creation time</p> </li> <li> <p>Waypoints: Individual points representing each photo</p> </li> <li>Latitude/Longitude: Geographic coordinates</li> <li>Elevation: Altitude data (if available)</li> <li>Time: Timestamp (if available)</li> <li> <p>Name: Photo filename or custom name</p> </li> <li> <p>Track: A continuous path connecting all the waypoints</p> </li> <li>Track Segment: A collection of track points</li> <li>Track Points: Points matching the waypoints but arranged in a segment</li> </ol>"},{"location":"api/gpx/#example-gpx-structure","title":"Example GPX Structure","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;gpx xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"PixTrail\"&gt;\n  &lt;metadata&gt;\n    &lt;name&gt;My Journey&lt;/name&gt;\n    &lt;desc&gt;Photos from my vacation&lt;/desc&gt;\n    &lt;time&gt;2023-01-10T12:00:00Z&lt;/time&gt;\n  &lt;/metadata&gt;\n  &lt;wpt lat=\"35.0394\" lon=\"135.7292\"&gt;\n    &lt;ele&gt;100.0&lt;/ele&gt;\n    &lt;time&gt;2023-01-01T12:00:00Z&lt;/time&gt;\n    &lt;name&gt;photo1.jpg&lt;/name&gt;\n  &lt;/wpt&gt;\n  &lt;wpt lat=\"35.6812\" lon=\"139.7671\"&gt;\n    &lt;ele&gt;200.0&lt;/ele&gt;\n    &lt;time&gt;2023-01-02T12:00:00Z&lt;/time&gt;\n    &lt;name&gt;photo2.jpg&lt;/name&gt;\n  &lt;/wpt&gt;\n  &lt;trk&gt;\n    &lt;name&gt;My Journey&lt;/name&gt;\n    &lt;trkseg&gt;\n      &lt;trkpt lat=\"35.0394\" lon=\"135.7292\"&gt;\n        &lt;ele&gt;100.0&lt;/ele&gt;\n        &lt;time&gt;2023-01-01T12:00:00Z&lt;/time&gt;\n      &lt;/trkpt&gt;\n      &lt;trkpt lat=\"35.6812\" lon=\"139.7671\"&gt;\n        &lt;ele&gt;200.0&lt;/ele&gt;\n        &lt;time&gt;2023-01-02T12:00:00Z&lt;/time&gt;\n      &lt;/trkpt&gt;\n    &lt;/trkseg&gt;\n  &lt;/trk&gt;\n&lt;/gpx&gt;\n</code></pre>"},{"location":"api/gpx/#how-the-gpx-generator-works","title":"How the GPX Generator Works","text":"<p>The GPXGenerator uses the <code>gpxpy</code> library to create and manipulate GPX files. The process is as follows:</p> <ol> <li>Create a new GPX object or load an existing one</li> <li>Add metadata (creator, name, description, time)</li> <li>Add waypoints for each GPS data point</li> <li>Create a track to connect the waypoints (if requested)</li> <li>Add track points to match the waypoints</li> <li>Sort waypoints and track points by timestamp if available</li> <li>Write the GPX file to the specified output path</li> </ol>"},{"location":"api/gpx/#advanced-usage-examples","title":"Advanced Usage Examples","text":""},{"location":"api/gpx/#creating-a-gpx-file-with-custom-metadata","title":"Creating a GPX File with Custom Metadata","text":"<pre><code>import gpxpy\nimport gpxpy.gpx\nfrom datetime import datetime\nfrom pixtrail.gpx_generator import GPXGenerator\n\n# Create a custom GPX file with detailed metadata\ndef create_custom_gpx(gps_data_list, output_path, journey_name, author=None, keywords=None):\n    # Create a new GPX object\n    gpx = gpxpy.gpx.GPX()\n\n    # Set the creator\n    gpx.creator = \"PixTrail - Custom GPX Creator\"\n\n    # Add metadata\n    gpx.name = journey_name\n\n    # Create metadata extensions for additional information\n    if author or keywords:\n        gpx.metadata = gpxpy.gpx.GPXMetadata()\n        gpx.metadata.author_name = author\n\n        # Add custom extensions\n        if keywords:\n            nsmap = {None: 'http://www.topografix.com/GPX/1/1', \n                    'pixtrail': 'http://www.example.com/pixtrail/1/0'}\n\n            keywords_str = ','.join(keywords)\n            extension = f'&lt;pixtrail:keywords&gt;{keywords_str}&lt;/pixtrail:keywords&gt;'\n            gpx.metadata.extensions = extension\n\n    # Add waypoints\n    for point in gps_data_list:\n        # Create waypoint\n        waypoint = gpxpy.gpx.GPXWaypoint(\n            latitude=point['latitude'],\n            longitude=point['longitude'],\n            elevation=point.get('altitude', 0),\n            time=point.get('timestamp'),\n            name=point.get('name', 'Unknown')\n        )\n        gpx.waypoints.append(waypoint)\n\n    # Create a track\n    track = gpxpy.gpx.GPXTrack()\n    track.name = journey_name\n    gpx.tracks.append(track)\n\n    # Create a segment\n    segment = gpxpy.gpx.GPXTrackSegment()\n    track.segments.append(segment)\n\n    # Sort points by timestamp if available\n    sorted_points = sorted(gps_data_list, \n                          key=lambda x: x.get('timestamp', datetime.min))\n\n    # Add track points\n    for point in sorted_points:\n        track_point = gpxpy.gpx.GPXTrackPoint(\n            latitude=point['latitude'],\n            longitude=point['longitude'],\n            elevation=point.get('altitude', 0),\n            time=point.get('timestamp')\n        )\n        segment.points.append(track_point)\n\n    # Write to file\n    try:\n        with open(output_path, 'w') as f:\n            f.write(gpx.to_xml())\n        return True\n    except Exception as e:\n        print(f\"Error creating GPX file: {e}\")\n        return False\n\n# Usage example\ngps_data = [\n    {\"latitude\": 35.0394, \"longitude\": 135.7292, \"timestamp\": datetime(2023, 1, 1, 12, 0, 0)},\n    {\"latitude\": 35.6812, \"longitude\": 139.7671, \"timestamp\": datetime(2023, 1, 2, 12, 0, 0)}\n]\n\nsuccess = create_custom_gpx(\n    gps_data,\n    \"/path/to/custom.gpx\",\n    journey_name=\"Japan Trip 2023\",\n    author=\"Traveler\",\n    keywords=[\"japan\", \"kyoto\", \"tokyo\", \"vacation\"]\n)\n</code></pre>"},{"location":"api/gpx/#creating-multiple-gpx-files-by-date","title":"Creating Multiple GPX Files by Date","text":"<pre><code>from pixtrail.exif_reader import ExifReader\nfrom pixtrail.gpx_generator import GPXGenerator\nimport os\nfrom datetime import datetime\nfrom collections import defaultdict\n\ndef process_by_date(photo_directory, output_dir):\n    \"\"\"Process photos and create separate GPX files by date.\"\"\"\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Get all image files\n    image_files = []\n    for root, _, files in os.walk(photo_directory):\n        for file in files:\n            if file.lower().endswith(('.jpg', '.jpeg', '.tiff', '.png', '.nef', '.cr2')):\n                image_files.append(os.path.join(root, file))\n\n    # Extract GPS data\n    gps_data_list = []\n    for image_file in image_files:\n        gps_data = ExifReader.extract_gps_data(image_file)\n        if gps_data:\n            gps_data_list.append(gps_data)\n\n    # Group by date\n    data_by_date = defaultdict(list)\n    for point in gps_data_list:\n        if 'timestamp' in point:\n            # Extract date string (YYYY-MM-DD)\n            if isinstance(point['timestamp'], datetime):\n                date_str = point['timestamp'].strftime('%Y-%m-%d')\n            else:\n                # If timestamp is already a string, extract date part\n                date_str = str(point['timestamp']).split('T')[0]\n\n            data_by_date[date_str].append(point)\n        else:\n            # If no timestamp, put in \"unknown\" group\n            data_by_date[\"unknown\"].append(point)\n\n    # Create GPX files for each date\n    results = {}\n    for date_str, data in data_by_date.items():\n        output_path = os.path.join(output_dir, f\"{date_str}.gpx\")\n        success = GPXGenerator.create_gpx_with_options(\n            data, \n            output_path,\n            name=f\"Journey on {date_str}\",\n            description=f\"Photos taken on {date_str}\"\n        )\n        results[date_str] = {\n            'success': success,\n            'count': len(data),\n            'path': output_path\n        }\n\n    return results\n\n# Usage example\nresults = process_by_date(\"/path/to/photos\", \"/path/to/output\")\n\n# Print results\nfor date, result in results.items():\n    status = \"Success\" if result['success'] else \"Failed\"\n    print(f\"{date}: {status} - {result['count']} photos - {result['path']}\")\n</code></pre>"},{"location":"api/gpx/#merging-multiple-gpx-files","title":"Merging Multiple GPX Files","text":"<pre><code>import gpxpy\nimport os\nfrom datetime import datetime\nfrom pixtrail.gpx_generator import GPXGenerator\n\ndef merge_gpx_files(input_files, output_file):\n    \"\"\"Merge multiple GPX files into a single file.\"\"\"\n    # Create a new GPX object for the merged output\n    merged_gpx = gpxpy.gpx.GPX()\n    merged_gpx.creator = \"PixTrail GPX Merger\"\n\n    # Add metadata\n    merged_gpx.name = \"Merged GPX File\"\n    merged_gpx.description = f\"Merged from {len(input_files)} GPX files\"\n    merged_gpx.time = datetime.now()\n\n    # Create a track for the merged data\n    merged_track = gpxpy.gpx.GPXTrack()\n    merged_track.name = \"Merged Track\"\n    merged_gpx.tracks.append(merged_track)\n\n    # Create a segment\n    merged_segment = gpxpy.gpx.GPXTrackSegment()\n    merged_track.segments.append(merged_segment)\n\n    # Store all waypoints\n    all_waypoints = []\n    all_points = []\n\n    # Process each input file\n    for input_file in input_files:\n        try:\n            with open(input_file, 'r') as f:\n                gpx = gpxpy.parse(f)\n\n                # Add waypoints\n                for waypoint in gpx.waypoints:\n                    all_waypoints.append(waypoint)\n\n                # Extract track points\n                for track in gpx.tracks:\n                    for segment in track.segments:\n                        for point in segment.points:\n                            all_points.append(point)\n        except Exception as e:\n            print(f\"Error processing {input_file}: {e}\")\n\n    # Sort points by time if available\n    all_points_with_time = [(p, p.time) for p in all_points]\n    all_points_with_time.sort(key=lambda x: x[1] if x[1] else datetime.min)\n\n    # Add sorted points to the merged segment\n    for point, _ in all_points_with_time:\n        merged_segment.points.append(point)\n\n    # Sort and add waypoints\n    all_waypoints_with_time = [(w, w.time) for w in all_waypoints]\n    all_waypoints_with_time.sort(key=lambda x: x[1] if x[1] else datetime.min)\n\n    for waypoint, _ in all_waypoints_with_time:\n        merged_gpx.waypoints.append(waypoint)\n\n    # Write the merged GPX to file\n    try:\n        with open(output_file, 'w') as f:\n            f.write(merged_gpx.to_xml())\n        return True\n    except Exception as e:\n        print(f\"Error writing merged GPX file: {e}\")\n        return False\n\n# Usage example\ninput_files = [\n    \"/path/to/day1.gpx\",\n    \"/path/to/day2.gpx\",\n    \"/path/to/day3.gpx\"\n]\n\nsuccess = merge_gpx_files(input_files, \"/path/to/merged_trip.gpx\")\nif success:\n    print(\"Successfully merged GPX files\")\nelse:\n    print(\"Failed to merge GPX files\")\n</code></pre>"},{"location":"api/gpx/#error-handling","title":"Error Handling","text":"<p>The GPXGenerator includes error handling for various scenarios:</p> <ul> <li>If the GPS data list is empty, the function returns <code>False</code></li> <li>If there is an error creating the output directory, an error message is printed</li> <li>If there is an error writing the GPX file, an error message is printed</li> <li>Any other exceptions during GPX creation are caught and logged</li> </ul>"},{"location":"api/gpx/#gpx-compatibility","title":"GPX Compatibility","text":"<p>The GPX files generated by PixTrail are compatible with most GPS and mapping applications, including:</p> <ul> <li>Google Earth</li> <li>OpenStreetMap</li> <li>Garmin GPS devices</li> <li>Strava and other fitness tracking apps</li> <li>GIS software like QGIS</li> </ul> <p>The GPX files follow the GPX 1.1 schema, which is the most widely supported version.</p>"},{"location":"api/gpx/#limitations","title":"Limitations","text":"<ul> <li>The GPX file format has some limitations, such as not supporting image embedding</li> <li>Large numbers of waypoints can make the GPX file large and potentially slow to load in some applications</li> <li>Some GPX viewers might not support all features (like elevation or timestamps)</li> <li>Custom extensions might not be recognized by all GPX viewers</li> </ul>"},{"location":"api/gpx/#related-modules","title":"Related Modules","text":"<ul> <li>EXIF Reader - For extracting GPS data from photos</li> <li>Core Module - For high-level photo processing functionality</li> <li>Utilities - For helper functions related to GPX file handling</li> </ul>"},{"location":"api/utils/","title":"PixTrail Utility Modules","text":"<p>This page documents the utility modules in PixTrail. These modules provide shared functionality used throughout the application and are designed to be reusable across different parts of the codebase.</p>"},{"location":"api/utils/#javascript-utility-modules","title":"JavaScript Utility Modules","text":""},{"location":"api/utils/#dom-helpers","title":"DOM Helpers","text":"<p><code>domHelpers.js</code> provides utilities for working with the DOM, making common operations more concise and consistent.</p>"},{"location":"api/utils/#key-functions","title":"Key Functions","text":"<pre><code>/**\n * Get an element by ID\n * @param {string} id - Element ID\n * @returns {HTMLElement|null} - The element or null if not found\n */\nfunction getById(id) {\n    return document.getElementById(id);\n}\n\n/**\n * Get elements by selector\n * @param {string} selector - CSS selector\n * @returns {NodeList} - List of matching elements\n */\nfunction getAll(selector) {\n    return document.querySelectorAll(selector);\n}\n\n/**\n * Get first matching element\n * @param {string} selector - CSS selector\n * @returns {HTMLElement|null} - The element or null if not found\n */\nfunction get(selector) {\n    return document.querySelector(selector);\n}\n\n/**\n * Create a new element with options\n * @param {string} tag - Element tag name\n * @param {Object} options - Element options\n * @param {string[]} [options.classes] - Classes to add\n * @param {Object} [options.attributes] - Attributes to set\n * @param {string} [options.text] - Text content\n * @param {string} [options.html] - HTML content\n * @returns {HTMLElement} - The created element\n */\nfunction create(tag, options = {}) {\n    // Implementation\n}\n\n/**\n * Add event listener\n * @param {HTMLElement} element - Element to add listener to\n * @param {string} event - Event name\n * @param {Function} handler - Event handler\n */\nfunction on(element, event, handler) {\n    element.addEventListener(event, handler);\n}\n\n/**\n * Remove event listener\n * @param {HTMLElement} element - Element to remove listener from\n * @param {string} event - Event name\n * @param {Function} handler - Event handler\n */\nfunction off(element, event, handler) {\n    element.removeEventListener(event, handler);\n}\n\n/**\n * Show element\n * @param {HTMLElement} element - Element to show\n */\nfunction show(element) {\n    element.classList.remove('hidden');\n}\n\n/**\n * Hide element\n * @param {HTMLElement} element - Element to hide\n */\nfunction hide(element) {\n    element.classList.add('hidden');\n}\n\n/**\n * Check if element is visible\n * @param {HTMLElement} element - Element to check\n * @returns {boolean} - Whether the element is visible\n */\nfunction isVisible(element) {\n    return !element.classList.contains('hidden');\n}\n\n/**\n * Toggle class based on condition\n * @param {HTMLElement} element - Element to modify\n * @param {string} className - Class to toggle\n * @param {boolean} condition - Whether to add or remove\n */\nfunction toggleClass(element, className, condition) {\n    if (condition) {\n        element.classList.add(className);\n    } else {\n        element.classList.remove(className);\n    }\n}\n\n/**\n * Scroll to element\n * @param {HTMLElement} element - Element to scroll to\n * @param {Object} options - Scroll options\n */\nfunction scrollTo(element, options = {}) {\n    element.scrollIntoView({\n        behavior: options.behavior || 'smooth',\n        block: options.block || 'start'\n    });\n}\n</code></pre>"},{"location":"api/utils/#usage-example","title":"Usage Example","text":"<pre><code>import { getById, create, on, show, hide } from '../utils/domHelpers.js';\n\n// Get an element\nconst container = getById('map-container');\n\n// Create new element\nconst button = create('button', {\n    classes: ['primary-button', 'large'],\n    attributes: { 'data-action': 'submit' },\n    text: 'Submit'\n});\ncontainer.appendChild(button);\n\n// Add event listener\non(button, 'click', () =&gt; {\n    console.log('Button clicked');\n});\n\n// Show/hide elements\nhide(getById('loading-indicator'));\nshow(getById('results-container'));\n</code></pre>"},{"location":"api/utils/#file-utilities","title":"File Utilities","text":"<p><code>fileUtils.js</code> provides utilities for working with files, making file operations more robust.</p>"},{"location":"api/utils/#key-functions_1","title":"Key Functions","text":"<pre><code>/**\n * Check if file is an image\n * @param {File} file - File to check\n * @returns {boolean} - Whether the file is an image\n */\nfunction isImageFile(file) {\n    return file.type.startsWith('image/');\n}\n\n/**\n * Check if file can be processed client-side\n * @param {File} file - File to check\n * @returns {boolean} - Whether the file can be processed in browser\n */\nfunction canProcessClientSide(file) {\n    const clientSideTypes = ['image/jpeg', 'image/jpg', 'image/tiff'];\n    return clientSideTypes.includes(file.type.toLowerCase());\n}\n\n/**\n * Get file extension\n * @param {string} filename - Filename\n * @returns {string} - File extension\n */\nfunction getExtension(filename) {\n    return filename.split('.').pop().toLowerCase();\n}\n\n/**\n * Format file size\n * @param {number} bytes - Size in bytes\n * @returns {string} - Formatted size\n */\nfunction formatFileSize(bytes) {\n    if (bytes &lt; 1024) return bytes + ' B';\n    if (bytes &lt; 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / 1048576).toFixed(1) + ' MB';\n}\n\n/**\n * Create a FileList from an array of Files\n * @param {File[]} files - Array of File objects\n * @returns {FileList} - FileList-like object\n */\nfunction createFileList(files) {\n    // Implementation\n}\n\n/**\n * Filter files by type\n * @param {FileList} files - Files to filter\n * @param {string[]} types - MIME types to include\n * @returns {File[]} - Filtered files\n */\nfunction filterByType(files, types) {\n    return Array.from(files).filter(file =&gt; types.includes(file.type));\n}\n\n/**\n * Read file as data URL\n * @param {File} file - File to read\n * @returns {Promise&lt;string&gt;} - Promise resolving to data URL\n */\nfunction readAsDataURL(file) {\n    return new Promise((resolve, reject) =&gt; {\n        const reader = new FileReader();\n        reader.onload = () =&gt; resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n    });\n}\n\n/**\n * Read file as array buffer\n * @param {File} file - File to read\n * @returns {Promise&lt;ArrayBuffer&gt;} - Promise resolving to array buffer\n */\nfunction readAsArrayBuffer(file) {\n    return new Promise((resolve, reject) =&gt; {\n        const reader = new FileReader();\n        reader.onload = () =&gt; resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(file);\n    });\n}\n\n/**\n * Read file as text\n * @param {File} file - File to read\n * @returns {Promise&lt;string&gt;} - Promise resolving to text\n */\nfunction readAsText(file) {\n    return new Promise((resolve, reject) =&gt; {\n        const reader = new FileReader();\n        reader.onload = () =&gt; resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsText(file);\n    });\n}\n</code></pre>"},{"location":"api/utils/#usage-example_1","title":"Usage Example","text":"<pre><code>import { isImageFile, readAsArrayBuffer, filterByType, formatFileSize } from '../utils/fileUtils.js';\n\n// Handle file input change\ndocument.getElementById('file-input').addEventListener('change', async (event) =&gt; {\n    const files = event.target.files;\n\n    // Filter for images\n    const imageFiles = filterByType(files, ['image/jpeg', 'image/png', 'image/tiff']);\n    console.log(`Selected ${imageFiles.length} images`);\n\n    // Display file sizes\n    imageFiles.forEach(file =&gt; {\n        console.log(`${file.name}: ${formatFileSize(file.size)}`);\n    });\n\n    // Process files that can be handled in browser\n    for (const file of imageFiles) {\n        if (isImageFile(file)) {\n            try {\n                const buffer = await readAsArrayBuffer(file);\n                // Process the file buffer\n            } catch (error) {\n                console.error(`Error reading ${file.name}:`, error);\n            }\n        }\n    }\n});\n</code></pre>"},{"location":"api/utils/#gps-utilities","title":"GPS Utilities","text":"<p><code>gpsUtils.js</code> provides utilities for working with GPS data, including coordinate conversion, distance calculations, and validation.</p>"},{"location":"api/utils/#key-functions_2","title":"Key Functions","text":"<pre><code>/**\n * Convert DMS to decimal degrees\n * @param {number} degrees - Degrees\n * @param {number} minutes - Minutes\n * @param {number} seconds - Seconds\n * @param {string} direction - Direction ('N', 'S', 'E', 'W')\n * @returns {number} - Decimal degrees\n */\nfunction convertDMSToDD(degrees, minutes, seconds, direction) {\n    let dd = degrees + minutes / 60 + seconds / 3600;\n    if (direction === 'S' || direction === 'W') {\n        dd = -dd;\n    }\n    return dd;\n}\n\n/**\n * Calculate distance between coordinates\n * @param {number} lat1 - Latitude of point 1\n * @param {number} lon1 - Longitude of point 1\n * @param {number} lat2 - Latitude of point 2\n * @param {number} lon2 - Longitude of point 2\n * @returns {number} - Distance in kilometers\n */\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n    // Implementation using Haversine formula\n}\n\n/**\n * Calculate speed between points\n * @param {number} lat1 - Latitude of point 1\n * @param {number} lon1 - Longitude of point 1\n * @param {Date|string} timestamp1 - Timestamp of point 1\n * @param {number} lat2 - Latitude of point 2\n * @param {number} lon2 - Longitude of point 2\n * @param {Date|string} timestamp2 - Timestamp of point 2\n * @returns {number} - Speed in km/h\n */\nfunction calculateSpeed(lat1, lon1, timestamp1, lat2, lon2, timestamp2) {\n    // Implementation\n}\n\n/**\n * Validate coordinates\n * @param {number} latitude - Latitude to validate\n * @param {number} longitude - Longitude to validate\n * @returns {boolean} - Whether coordinates are valid\n */\nfunction validateCoordinates(latitude, longitude) {\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n        return false;\n    }\n    return latitude &gt;= -90 &amp;&amp; latitude &lt;= 90 &amp;&amp; longitude &gt;= -180 &amp;&amp; longitude &lt;= 180;\n}\n\n/**\n * Get center point of multiple coordinates\n * @param {Array} points - Array of {latitude, longitude} objects\n * @returns {Object} - Center point {latitude, longitude}\n */\nfunction getCenter(points) {\n    // Implementation\n}\n\n/**\n * Format coordinates for display\n * @param {number} latitude - Latitude\n * @param {number} longitude - Longitude\n * @returns {string} - Formatted coordinates\n */\nfunction formatCoordinates(latitude, longitude) {\n    const latDir = latitude &gt;= 0 ? 'N' : 'S';\n    const lonDir = longitude &gt;= 0 ? 'E' : 'W';\n    return `${Math.abs(latitude).toFixed(6)}\u00b0 ${latDir}, ${Math.abs(longitude).toFixed(6)}\u00b0 ${lonDir}`;\n}\n\n/**\n * Calculate comprehensive route statistics\n * @param {Array} waypoints - Array of waypoint objects\n * @returns {Object} - Statistics object\n */\nfunction calculateRouteStatistics(waypoints) {\n    // Implementation\n}\n</code></pre>"},{"location":"api/utils/#usage-example_2","title":"Usage Example","text":"<pre><code>import { calculateDistance, validateCoordinates, formatCoordinates } from '../utils/gpsUtils.js';\n\n// Validate coordinates from user input\nconst lat = parseFloat(document.getElementById('latitude').value);\nconst lon = parseFloat(document.getElementById('longitude').value);\n\nif (validateCoordinates(lat, lon)) {\n    console.log(`Valid coordinates: ${formatCoordinates(lat, lon)}`);\n\n    // Calculate distance to another point\n    const distance = calculateDistance(lat, lon, 35.6812, 139.7671);\n    console.log(`Distance to Tokyo: ${distance.toFixed(2)} km`);\n} else {\n    console.error('Invalid coordinates');\n}\n</code></pre>"},{"location":"api/utils/#ui-utilities","title":"UI Utilities","text":"<p><code>uiUtils.js</code> provides utilities for common UI operations, such as formatting, status messages, and user interface interactions.</p>"},{"location":"api/utils/#key-functions_3","title":"Key Functions","text":"<pre><code>/**\n * Format duration in seconds to HH:MM:SS\n * @param {number} seconds - Duration in seconds\n * @returns {string} - Formatted duration\n */\nfunction formatDuration(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\n/**\n * Format date\n * @param {Date} date - Date to format\n * @returns {string} - Formatted date\n */\nfunction formatDate(date) {\n    return date.toLocaleString();\n}\n\n/**\n * Format number with units\n * @param {number} value - Value to format\n * @param {number} decimals - Number of decimal places\n * @param {string} unit - Unit to append\n * @returns {string} - Formatted number\n */\nfunction formatNumber(value, decimals, unit) {\n    return `${value.toFixed(decimals)} ${unit}`;\n}\n\n/**\n * Update progress bar\n * @param {HTMLElement} progressBar - Progress bar element\n * @param {HTMLElement} progressText - Progress text element\n * @param {number} current - Current progress value\n * @param {number} total - Total progress value\n * @param {string} [message] - Optional message\n */\nfunction updateProgressBar(progressBar, progressText, current, total, message) {\n    const percent = Math.round((current / total) * 100);\n    progressBar.style.width = `${percent}%`;\n    progressText.textContent = message ? `${percent}% - ${message}` : `${percent}%`;\n}\n\n/**\n * Show status message\n * @param {HTMLElement} container - Status message container\n * @param {string} message - Message to display\n * @param {string} type - Message type ('success', 'error', 'warning', 'info')\n * @param {number} [timeout] - Auto-removal timeout in ms\n */\nfunction showStatusMessage(container, message, type, timeout) {\n    // Implementation\n}\n\n/**\n * Toggle element visibility\n * @param {HTMLElement} element - Element to toggle\n * @param {boolean} [show] - Whether to show or hide (toggle if undefined)\n * @returns {boolean} - New visibility state\n */\nfunction toggleVisibility(element, show) {\n    // Implementation\n}\n\n/**\n * Initialize tabs\n * @param {string} tabButtonSelector - Tab button selector\n * @param {string} tabContentSelector - Tab content selector\n * @param {Function} [callback] - Callback when tab changes\n */\nfunction initTabs(tabButtonSelector, tabContentSelector, callback) {\n    // Implementation\n}\n\n/**\n * Debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in ms\n * @returns {Function} - Debounced function\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() =&gt; func.apply(this, args), wait);\n    };\n}\n\n/**\n * Throttle function\n * @param {Function} func - Function to throttle\n * @param {number} limit - Limit in ms\n * @returns {Function} - Throttled function\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function(...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() =&gt; inThrottle = false, limit);\n        }\n    };\n}\n</code></pre>"},{"location":"api/utils/#usage-example_3","title":"Usage Example","text":"<pre><code>import { formatDuration, showStatusMessage, debounce } from '../utils/uiUtils.js';\n\n// Format a duration\nconst duration = 3665; // seconds\ndocument.getElementById('duration').textContent = formatDuration(duration); // \"01:01:05\"\n\n// Show a status message\nshowStatusMessage(\n    document.getElementById('status-container'),\n    'Operation successful',\n    'success',\n    5000 // Auto-hide after 5 seconds\n);\n\n// Debounce a resize handler\nwindow.addEventListener('resize', debounce(() =&gt; {\n    console.log('Window resized');\n    // Update layout\n}, 250));\n</code></pre>"},{"location":"api/utils/#python-utility-modules","title":"Python Utility Modules","text":""},{"location":"api/utils/#file-handling","title":"File Handling","text":"<p><code>file_utils.py</code> provides utilities for working with files in the backend.</p>"},{"location":"api/utils/#key-functions_4","title":"Key Functions","text":"<pre><code>def get_supported_image_extensions():\n    \"\"\"\n    Get a list of supported image file extensions.\n\n    Returns:\n        list: List of supported extensions\n    \"\"\"\n    return ['.jpg', '.jpeg', '.tiff', '.tif', '.png', '.nef', '.cr2', '.arw', '.dng']\n\ndef is_image_file(file_path):\n    \"\"\"\n    Check if a file is an image based on extension.\n\n    Args:\n        file_path: Path to the file\n\n    Returns:\n        bool: Whether the file is an image\n    \"\"\"\n    return os.path.splitext(file_path.lower())[1] in get_supported_image_extensions()\n\ndef get_files_in_directory(directory, recursive=False, file_types=None, exclude_dirs=None):\n    \"\"\"\n    Get a list of files in a directory.\n\n    Args:\n        directory: Directory to search\n        recursive: Whether to search subdirectories\n        file_types: List of file extensions to include\n        exclude_dirs: List of directory names to exclude\n\n    Returns:\n        list: List of file paths\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"api/utils/#path-utilities","title":"Path Utilities","text":"<p><code>path_utils.py</code> provides utilities for working with file paths.</p>"},{"location":"api/utils/#key-functions_5","title":"Key Functions","text":"<pre><code>def sanitize_filename(filename):\n    \"\"\"\n    Sanitize a filename to be safe for all operating systems.\n\n    Args:\n        filename: Filename to sanitize\n\n    Returns:\n        str: Sanitized filename\n    \"\"\"\n    # Implementation\n\ndef generate_output_filename(input_dir, output_dir=None, extension=\".gpx\"):\n    \"\"\"\n    Generate an output filename based on input directory.\n\n    Args:\n        input_dir: Input directory\n        output_dir: Output directory (optional)\n        extension: File extension\n\n    Returns:\n        str: Output filename\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"api/utils/#gps-utilities_1","title":"GPS Utilities","text":"<p><code>gps_utils.py</code> provides utilities for working with GPS data in the backend.</p>"},{"location":"api/utils/#key-functions_6","title":"Key Functions","text":"<pre><code>def calculate_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using Haversine formula.\n\n    Args:\n        lat1: Latitude of point 1\n        lon1: Longitude of point 1\n        lat2: Latitude of point 2\n        lon2: Longitude of point 2\n\n    Returns:\n        float: Distance in kilometers\n    \"\"\"\n    # Implementation\n\ndef calculate_speed(lat1, lon1, timestamp1, lat2, lon2, timestamp2):\n    \"\"\"\n    Calculate speed between two points.\n\n    Args:\n        lat1: Latitude of point 1\n        lon1: Longitude of point 1\n        timestamp1: Timestamp of point 1\n        lat2: Latitude of point 2\n        lon2: Longitude of point 2\n        timestamp2: Timestamp of point 2\n\n    Returns:\n        float: Speed in km/h\n    \"\"\"\n    # Implementation\n\ndef calculate_bearing(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate initial bearing between two points.\n\n    Args:\n        lat1: Latitude of point 1\n        lon1: Longitude of point 1\n        lat2: Latitude of point 2\n        lon2: Longitude of point 2\n\n    Returns:\n        float: Bearing in degrees\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"api/utils/#best-practices-for-using-utility-modules","title":"Best Practices for Using Utility Modules","text":""},{"location":"api/utils/#1-import-only-what-you-need","title":"1. Import Only What You Need","text":"<p>For better performance and readability, import only the functions you need:</p> <pre><code>// Good\nimport { getById, show, hide } from '../utils/domHelpers.js';\n\n// Avoid unless you need everything\nimport * as DOMHelpers from '../utils/domHelpers.js';\n</code></pre>"},{"location":"api/utils/#2-combine-with-other-modules","title":"2. Combine with Other Modules","text":"<pre><code>import { getById } from '../utils/domHelpers.js';\nimport { showStatusMessage } from '../utils/uiUtils.js';\n\n// Show loading indicator\nconst loadingElement = getById('loading-indicator');\nloadingElement.style.display = 'block';\n\n// Process data\nprocessData()\n    .then(result =&gt; {\n        // Show success message\n        showStatusMessage(getById('status-container'), 'Success!', 'success');\n        // Hide loading indicator\n        loadingElement.style.display = 'none';\n    })\n    .catch(error =&gt; {\n        // Show error message\n        showStatusMessage(getById('status-container'), error.message, 'error');\n        // Hide loading indicator\n        loadingElement.style.display = 'none';\n    });\n</code></pre>"},{"location":"api/utils/#3-use-for-common-patterns","title":"3. Use for Common Patterns","text":"<p>The utility functions are designed to standardize common operations. Using them consistently makes the code more maintainable:</p> <pre><code>// Without utilities\ndocument.getElementById('my-button').addEventListener('click', function() {\n    document.getElementById('loading').style.display = 'block';\n    document.getElementById('error-message').textContent = '';\n\n    // Process data\n});\n\n// With utilities\nimport { getById, on, show, hide } from '../utils/domHelpers.js';\n\non(getById('my-button'), 'click', () =&gt; {\n    show(getById('loading'));\n    getById('error-message').textContent = '';\n\n    // Process data\n});\n</code></pre>"},{"location":"api/utils/#4-extend-when-needed","title":"4. Extend When Needed","text":"<p>If you find yourself repeating similar patterns that aren't covered by the utilities, consider extending the appropriate utility module:</p> <pre><code>// Add to domHelpers.js\n/**\n * Add multiple event listeners at once\n * @param {HTMLElement} element - Element to add listeners to\n * @param {Object} events - Object mapping event names to handlers\n */\nfunction addEvents(element, events) {\n    for (const [event, handler] of Object.entries(events)) {\n        element.addEventListener(event, handler);\n    }\n}\n\n// Usage\nimport { addEvents } from '../utils/domHelpers.js';\n\naddEvents(dropArea, {\n    dragenter: handleDragEnter,\n    dragover: handleDragOver,\n    dragleave: handleDragLeave,\n    drop: handleDrop\n});\n</code></pre>"},{"location":"api/utils/#charts-module","title":"Charts Module","text":"<p><code>charts.js</code> provides a wrapper around Chart.js for creating and managing charts.</p>"},{"location":"api/utils/#key-methods","title":"Key Methods","text":"<pre><code>/**\n * Chart manager for PixTrail\n */\nclass ChartManager {\n    /**\n     * Initialize chart manager\n     * @param {Object} config - Configuration options\n     * @param {HTMLElement} config.container - Container element\n     * @param {string} config.type - Chart type\n     * @param {Object} config.data - Chart data\n     * @param {Object} config.options - Chart options\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    /**\n     * Update chart data\n     * @param {Object} newData - New chart data\n     */\n    updateChart(newData) {\n        // Implementation\n    }\n\n    /**\n     * Update chart options\n     * @param {Object} newOptions - New chart options\n     */\n    updateOptions(newOptions) {\n        // Implementation\n    }\n\n    /**\n     * Create a pre-configured line chart\n     * @param {HTMLElement} container - Container element\n     * @param {string} title - Chart title\n     * @param {string[]} labels - X-axis labels\n     * @param {number[]} data - Y-axis data\n     * @param {string} yAxisLabel - Y-axis label\n     * @returns {ChartManager} - Chart manager instance\n     */\n    static createLineChart(container, title, labels, data, yAxisLabel) {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"api/utils/#drag-and-drop","title":"Drag and Drop","text":"<p><code>dragAndDrop.js</code> manages file and directory drag and drop functionality.</p>"},{"location":"api/utils/#key-methods_1","title":"Key Methods","text":"<pre><code>/**\n * Drag and drop handler for PixTrail\n */\nclass DragAndDrop {\n    /**\n     * Initialize drag and drop\n     * @param {Object} config - Configuration options\n     * @param {HTMLElement} config.fileDropArea - File drop area\n     * @param {HTMLElement} config.directoryDropArea - Directory drop area\n     * @param {HTMLInputElement} config.fileInput - File input\n     * @param {HTMLInputElement} config.directoryInput - Directory input\n     * @param {Function} config.onFileDrop - File drop handler\n     * @param {Function} config.onDirectoryDrop - Directory drop handler\n     */\n    constructor(config) {\n        // Implementation\n    }\n\n    /**\n     * Initialize event listeners\n     */\n    init() {\n        // Implementation\n    }\n\n    /**\n     * Handle file drop\n     * @param {DragEvent} event - Drop event\n     */\n    handleFileDrop(event) {\n        // Implementation\n    }\n\n    /**\n     * Handle directory drop\n     * @param {DragEvent} event - Drop event\n     */\n    handleDirectoryDrop(event) {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"api/utils/#related-documentation","title":"Related Documentation","text":"<ul> <li>Module Structure</li> <li>Core Modules Documentation</li> <li>EXIF Reader Documentation</li> <li>GPX Generator Documentation</li> </ul>"},{"location":"development/","title":"PixTrail Development Guide","text":"<p>This section provides information for developers who want to understand, modify, or extend PixTrail. It covers the architecture, module structure, and best practices for development.</p>"},{"location":"development/#architecture-overview","title":"Architecture Overview","text":"<p>PixTrail uses a modular architecture designed for:</p> <ul> <li>Maintainability: Separate modules with clear responsibilities</li> <li>Extensibility: Easy to add new features without modifying core code</li> <li>Reusability: Common utilities shared across features</li> <li>Testability: Isolated components that can be tested individually</li> </ul> <p>For a detailed overview of the architecture, see the Architecture Document.</p>"},{"location":"development/#module-structure","title":"Module Structure","text":"<p>The JavaScript code is organized into a hierarchy of modules:</p> <ul> <li>Main Application (<code>main.js</code>) - Application entry point and controller</li> <li>API Client (<code>api/apiClient.js</code>) - Server communication</li> <li>Feature Modules (<code>modules/*.js</code>) - Encapsulated feature implementations</li> <li>Utility Functions (<code>utils/*.js</code>) - Shared helper functions</li> </ul> <p>The Module Structure document provides detailed information on how these modules are organized and interact.</p>"},{"location":"development/#css-architecture","title":"CSS Architecture","text":"<p>Similarly, the CSS is organized into modular components:</p> <ul> <li>Base Styles - Reset, typography, and variables</li> <li>Layout Styles - Page structure and grid system</li> <li>Module Styles - Component-specific styles</li> </ul> <p>Learn more in the CSS Architecture document.</p>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#setting-up-a-development-environment","title":"Setting Up a Development Environment","text":"<ol> <li>Clone the repository</li> <li>Install dependencies</li> <li>Start the development server</li> <li>Make changes</li> <li>Test your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"development/#testing","title":"Testing","text":"<p>All code should be tested before submission. See the Testing Guide for details on how to test your changes.</p>"},{"location":"development/#documentation","title":"Documentation","text":"<p>When adding new features or modifying existing ones, be sure to update the relevant documentation. Documentation should be kept in sync with the code.</p>"},{"location":"development/#extending-pixtrail","title":"Extending PixTrail","text":""},{"location":"development/#adding-new-features","title":"Adding New Features","text":"<p>New features should be implemented as modules that integrate with the existing architecture. The Extending Modules Tutorial provides a step-by-step guide to creating new modules.</p>"},{"location":"development/#modifying-existing-features","title":"Modifying Existing Features","text":"<p>When modifying existing features, follow these guidelines:</p> <ol> <li>Understand the current implementation</li> <li>Make minimal changes to achieve your goal</li> <li>Maintain backward compatibility where possible</li> <li>Update tests and documentation</li> </ol>"},{"location":"development/#creating-custom-themes","title":"Creating Custom Themes","text":"<p>PixTrail uses CSS variables for theming. To create a custom theme:</p> <ol> <li>Create a new CSS file with your variable definitions</li> <li>Include it after the main CSS file</li> <li>Override the desired variables</li> </ol>"},{"location":"development/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"development/#working-with-gps-data","title":"Working with GPS Data","text":"<p>GPS data is handled by the <code>gpsUtils.js</code> module, which provides functions for:</p> <ul> <li>Converting between coordinate formats</li> <li>Calculating distances and speeds</li> <li>Validating coordinates</li> <li>Computing route statistics</li> </ul>"},{"location":"development/#processing-photos","title":"Processing Photos","text":"<p>Photos are processed using the <code>exifReader.js</code> module, which extracts EXIF metadata from images.</p>"},{"location":"development/#map-visualization","title":"Map Visualization","text":"<p>The map visualization is handled by the <code>mapVisualization.js</code> module, which wraps Leaflet.js functionality.</p>"},{"location":"development/#best-practices","title":"Best Practices","text":"<ul> <li>Module Design: Follow the single responsibility principle</li> <li>Dependencies: Explicitly declare dependencies via imports</li> <li>State Management: Keep state within modules when possible</li> <li>Error Handling: Gracefully handle errors and edge cases</li> <li>Performance: Consider performance implications, especially for large data sets</li> <li>Accessibility: Ensure UI components are accessible</li> <li>Browser Compatibility: Test in different browsers and devices</li> </ul>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you have questions about development, check the following resources:</p> <ul> <li>Contributing Guide</li> <li>API Documentation</li> <li>Project Repository</li> </ul> <p>For specific development questions, open an issue on the GitHub repository.</p>"},{"location":"development/css-architecture/","title":"PixTrail CSS Architecture","text":"<p>This document explains the CSS architecture of PixTrail, focusing on its modular structure, naming conventions, and best practices for extending the styling.</p>"},{"location":"development/css-architecture/#overview","title":"Overview","text":"<p>PixTrail uses a modular CSS approach with separate files for different components and concerns. This architecture provides several benefits:</p> <ul> <li>Maintainability: Smaller files are easier to understand and maintain</li> <li>Organization: Clear structure makes it easier to locate styles</li> <li>Reusability: Common styles are abstracted and reused</li> <li>Scalability: New styles can be added without affecting existing ones</li> </ul>"},{"location":"development/css-architecture/#directory-structure","title":"Directory Structure","text":"<p>The CSS is organized into a hierarchical structure:</p> <pre><code>css/\n\u251c\u2500\u2500 base/                   # Base styles\n\u2502   \u251c\u2500\u2500 reset.css           # Resets browser defaults\n\u2502   \u251c\u2500\u2500 typography.css      # Text and font styles\n\u2502   \u2514\u2500\u2500 variables.css       # CSS variables for theming\n\u251c\u2500\u2500 layouts/                # Layout styles\n\u2502   \u251c\u2500\u2500 container.css       # Main container styles\n\u2502   \u2514\u2500\u2500 grid.css            # Grid and flexbox layouts\n\u251c\u2500\u2500 modules/                # Component-specific styles\n\u2502   \u251c\u2500\u2500 buttons.css         # Button styles\n\u2502   \u251c\u2500\u2500 dropdown.css        # Dropdown menu styles\n\u2502   \u251c\u2500\u2500 forms.css           # Form element styles\n\u2502   \u251c\u2500\u2500 header.css          # Header styles\n\u2502   \u251c\u2500\u2500 footer.css          # Footer styles\n\u2502   \u251c\u2500\u2500 map-section.css     # Map section styles\n\u2502   \u251c\u2500\u2500 photo-section.css   # Photo upload section styles\n\u2502   \u251c\u2500\u2500 statistics-section.css # Statistics section styles\n\u2502   \u251c\u2500\u2500 status-messages.css # Status message styles\n\u2502   \u2514\u2500\u2500 utilities.css       # Utility classes\n\u2514\u2500\u2500 main.css                # Main CSS file that imports all modules\n</code></pre>"},{"location":"development/css-architecture/#import-system","title":"Import System","text":"<p>All CSS modules are imported in <code>main.css</code> in a specific order to manage the cascade and specificity:</p> <pre><code>/* Base styles first */\n@import 'base/variables.css';\n@import 'base/reset.css';\n@import 'base/typography.css';\n\n/* Layouts next */\n@import 'layouts/container.css';\n@import 'layouts/grid.css';\n\n/* Modules last */\n@import 'modules/header.css';\n@import 'modules/footer.css';\n/* Other modules... */\n@import 'modules/utilities.css';\n</code></pre> <p>The import order is important because: 1. Variables need to be available first 2. Reset styles provide a consistent foundation 3. Layout styles define the overall page structure 4. Module styles build on top of the foundation 5. Utility classes come last to override other styles when needed</p>"},{"location":"development/css-architecture/#css-variables","title":"CSS Variables","text":"<p>PixTrail uses CSS custom properties (variables) extensively for theming and consistency. These are defined in <code>variables.css</code>:</p> <pre><code>:root {\n    /* Color palette */\n    --primary-color: #3498db;\n    --primary-dark: #2980b9;\n    --secondary-color: #2ecc71;\n    --tertiary-color: #f39c12;\n\n    /* Text colors */\n    --text-color: #333;\n    --text-light: #666;\n    --text-muted: #999;\n\n    /* Background colors */\n    --bg-light: #f8f9fa;\n    --bg-medium: #f4f4f4;\n    --bg-dark: #eaeaea;\n\n    /* Border colors */\n    --border-light: #ddd;\n    --border-medium: #ccc;\n    --border-dark: #aaa;\n\n    /* Status colors */\n    --error-color: #e74c3c;\n    --success-color: #2ecc71;\n    --warning-color: #f39c12;\n    --info-color: #3498db;\n\n    /* Spacing */\n    --spacing-xs: 0.25rem;  /* 4px */\n    --spacing-sm: 0.5rem;   /* 8px */\n    --spacing-md: 1rem;     /* 16px */\n    --spacing-lg: 1.5rem;   /* 24px */\n    --spacing-xl: 2rem;     /* 32px */\n\n    /* Font sizes */\n    --font-size-xs: 0.75rem;   /* 12px */\n    --font-size-sm: 0.875rem;  /* 14px */\n    --font-size-md: 1rem;      /* 16px */\n    --font-size-lg: 1.25rem;   /* 20px */\n    --font-size-xl: 1.5rem;    /* 24px */\n\n    /* Border radius */\n    --border-radius-sm: 4px;\n    --border-radius-md: 8px;\n    --border-radius-lg: 12px;\n\n    /* Shadows */\n    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 2px 10px rgba(0, 0, 0, 0.05);\n    --shadow-lg: 0 5px 15px rgba(0, 0, 0, 0.1);\n\n    /* Transitions */\n    --transition-fast: 0.2s;\n    --transition-medium: 0.3s;\n    --transition-slow: 0.5s;\n\n    /* Z-index layers */\n    --z-index-dropdown: 1000;\n    --z-index-modal: 2000;\n    --z-index-tooltip: 3000;\n}\n</code></pre> <p>Using these variables ensures consistency throughout the application and makes theming easier.</p>"},{"location":"development/css-architecture/#naming-conventions","title":"Naming Conventions","text":"<p>PixTrail uses a modified BEM (Block, Element, Modifier) naming convention:</p> <ul> <li>Blocks: Main components (<code>.map-section</code>, <code>.button</code>, <code>.dropdown</code>)</li> <li>Elements: Parts of a block (<code>.map-section__title</code>, <code>.button__icon</code>)</li> <li>Modifiers: Variations of blocks or elements (<code>.button--primary</code>, <code>.status-message--error</code>)</li> </ul> <p>Example:</p> <pre><code>/* Block */\n.photo-section {\n    background-color: white;\n    border-radius: var(--border-radius-md);\n    padding: var(--spacing-md);\n}\n\n/* Element */\n.photo-section__title {\n    color: var(--primary-color);\n    margin-bottom: var(--spacing-sm);\n}\n\n/* Modifier */\n.photo-section--compact {\n    padding: var(--spacing-sm);\n}\n</code></pre>"},{"location":"development/css-architecture/#module-structure","title":"Module Structure","text":"<p>Each CSS module focuses on a specific component or concern. Here's the typical structure of a module file:</p> <pre><code>/**\n * PixTrail - Component Name\n * Brief description of the component\n */\n\n/* Main component styles */\n.component {\n    /* Base styles */\n}\n\n/* Component elements */\n.component__header {\n    /* Element styles */\n}\n\n.component__body {\n    /* Element styles */\n}\n\n.component__footer {\n    /* Element styles */\n}\n\n/* Component modifiers */\n.component--large {\n    /* Modifier styles */\n}\n\n.component--small {\n    /* Modifier styles */\n}\n\n/* States */\n.component.is-active {\n    /* State styles */\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .component {\n        /* Mobile styles */\n    }\n}\n</code></pre>"},{"location":"development/css-architecture/#utility-classes","title":"Utility Classes","text":"<p>For common styling patterns, PixTrail provides utility classes in <code>utilities.css</code>:</p> <pre><code>/* Visibility */\n.hidden { display: none !important; }\n.invisible { visibility: hidden !important; }\n\n/* Spacing */\n.mt-1 { margin-top: var(--spacing-xs); }\n.mt-2 { margin-top: var(--spacing-sm); }\n/* More spacing utilities... */\n\n/* Text alignment */\n.text-left { text-align: left; }\n.text-center { text-align: center; }\n.text-right { text-align: right; }\n\n/* More utilities... */\n</code></pre> <p>These utilities help avoid repetition and provide a consistent way to apply common styles.</p>"},{"location":"development/css-architecture/#responsive-design","title":"Responsive Design","text":"<p>PixTrail uses a mobile-first approach with media queries for larger screens:</p> <pre><code>/* Base styles (mobile first) */\n.component {\n    width: 100%;\n    padding: var(--spacing-sm);\n}\n\n/* Tablet and desktop adjustments */\n@media (min-width: 768px) {\n    .component {\n        padding: var(--spacing-md);\n        display: flex;\n    }\n}\n</code></pre> <p>Media queries are included within each component's CSS rather than in separate files to keep related styles together.</p>"},{"location":"development/css-architecture/#adding-new-styles","title":"Adding New Styles","text":"<p>To add styles for a new feature:</p> <ol> <li>Determine if the styles fit into an existing module</li> <li>If not, create a new CSS file in the appropriate directory</li> <li>Follow the naming conventions and file structure</li> <li>Import the new file in <code>main.css</code></li> </ol> <p>Example for a new component:</p> <pre><code>/**\n * PixTrail - New Feature\n * Styles for the new feature component\n */\n\n.new-feature {\n    background-color: var(--bg-light);\n    border-radius: var(--border-radius-md);\n    padding: var(--spacing-md);\n    margin-bottom: var(--spacing-md);\n}\n\n.new-feature__title {\n    color: var(--primary-color);\n    margin-bottom: var(--spacing-sm);\n}\n\n.new-feature__content {\n    display: flex;\n    gap: var(--spacing-sm);\n}\n\n@media (max-width: 768px) {\n    .new-feature__content {\n        flex-direction: column;\n    }\n}\n</code></pre> <p>Then import in <code>main.css</code>:</p> <pre><code>/* Add to the appropriate section in main.css */\n@import 'modules/new-feature.css';\n</code></pre>"},{"location":"development/css-architecture/#best-practices","title":"Best Practices","text":"<ol> <li>Use CSS Variables: Always use variables for colors, spacing, etc.</li> <li>Follow Naming Conventions: Use the BEM-style naming for consistency</li> <li>Mobile-First: Start with mobile styles and add media queries for larger screens</li> <li>Component Isolation: Keep styles for one component in one file</li> <li>Minimize Nesting: Keep selectors simple and avoid deep nesting</li> <li>Comment Your Code: Add comments for complex or non-obvious styles</li> <li>Reuse Patterns: Use utility classes for common patterns</li> <li>Responsive Testing: Test styles on various screen sizes</li> <li>Performance: Avoid expensive selectors and animations</li> <li>Maintainability: Keep files small and focused</li> </ol>"},{"location":"development/css-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Module Structure</li> <li>Architecture Overview</li> <li>Contributing Guide</li> </ul>"},{"location":"development/module-structure/","title":"PixTrail Module Structure","text":"<p>This document explains the modular architecture of PixTrail's JavaScript and CSS codebase for developers who want to understand, maintain, or extend the application.</p>"},{"location":"development/module-structure/#javascript-module-structure","title":"JavaScript Module Structure","text":"<p>The JavaScript code is organized into a modular structure that emphasizes separation of concerns and reusability. Each module focuses on a specific functionality, has clear dependencies, and provides a well-defined public API.</p>"},{"location":"development/module-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>js/\n\u251c\u2500\u2500 api/                    # API communication modules\n\u2502   \u2514\u2500\u2500 apiClient.js        # Handles server communication\n\u251c\u2500\u2500 modules/                # Feature modules\n\u2502   \u251c\u2500\u2500 charts.js           # Chart creation and management\n\u2502   \u251c\u2500\u2500 clustering.js       # Map marker clustering\n\u2502   \u251c\u2500\u2500 dragAndDrop.js      # File drag and drop functionality\n\u2502   \u251c\u2500\u2500 exifReader.js       # Extract EXIF metadata\n\u2502   \u251c\u2500\u2500 fileUpload.js       # File upload handling\n\u2502   \u251c\u2500\u2500 heatmap.js          # Heatmap visualization\n\u2502   \u251c\u2500\u2500 mapVisualization.js # Map display and manipulation\n\u2502   \u2514\u2500\u2500 statistics.js       # Statistics calculations and display\n\u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u251c\u2500\u2500 domHelpers.js       # DOM manipulation utilities\n\u2502   \u251c\u2500\u2500 fileUtils.js        # File handling utilities\n\u2502   \u251c\u2500\u2500 gpsUtils.js         # GPS data processing utilities\n\u2502   \u2514\u2500\u2500 uiUtils.js          # UI helper functions\n\u2514\u2500\u2500 main.js                 # Main application entry point\n</code></pre>"},{"location":"development/module-structure/#module-types","title":"Module Types","text":"<ol> <li>API Modules: Handle communication with the server</li> <li> <p><code>apiClient.js</code>: Provides methods for all server interactions</p> </li> <li> <p>Feature Modules: Implement specific application features</p> </li> <li>Use class-based approach with constructor for initialization</li> <li>Provide public methods for interaction</li> <li> <p>Handle their own internal state</p> </li> <li> <p>Utility Modules: Provide shared functionality</p> </li> <li>Typically export a collection of related functions</li> <li>Focus on a specific domain (DOM, files, GPS, UI)</li> <li> <p>Stateless to promote reusability</p> </li> <li> <p>Main Application: Orchestrates the modules</p> </li> <li>Initializes all modules</li> <li>Manages application state</li> <li>Handles cross-module communication</li> </ol>"},{"location":"development/module-structure/#dependency-management","title":"Dependency Management","text":"<p>Modules declare their dependencies explicitly using ES6 import/export syntax:</p> <pre><code>// Example from heatmap.js\nimport DOMHelpers from '../utils/domHelpers.js';\nimport UIUtils from '../utils/uiUtils.js';\n\nclass Heatmap {\n    // Implementation\n}\n\nexport default Heatmap;\n</code></pre> <p>The dependency graph is designed to avoid circular dependencies and minimize coupling between modules.</p>"},{"location":"development/module-structure/#css-module-structure","title":"CSS Module Structure","text":"<p>The CSS is similarly modularized to improve maintainability and organization.</p>"},{"location":"development/module-structure/#directory-structure_1","title":"Directory Structure","text":"<pre><code>css/\n\u251c\u2500\u2500 base/                   # Base styles\n\u2502   \u251c\u2500\u2500 reset.css           # CSS reset\n\u2502   \u251c\u2500\u2500 typography.css      # Typography styles\n\u2502   \u2514\u2500\u2500 variables.css       # CSS variables (colors, sizes, etc.)\n\u251c\u2500\u2500 layouts/                # Layout styles\n\u2502   \u251c\u2500\u2500 container.css       # Container layout\n\u2502   \u2514\u2500\u2500 grid.css            # Grid layouts\n\u251c\u2500\u2500 modules/                # Feature-specific styles\n\u2502   \u251c\u2500\u2500 buttons.css         # Button styles\n\u2502   \u251c\u2500\u2500 dropdown.css        # Dropdown menu styles\n\u2502   \u251c\u2500\u2500 forms.css           # Form element styles\n\u2502   \u251c\u2500\u2500 header.css          # Header styles\n\u2502   \u251c\u2500\u2500 footer.css          # Footer styles\n\u2502   \u251c\u2500\u2500 map-section.css     # Map section styles\n\u2502   \u251c\u2500\u2500 photo-section.css   # Photo upload section styles\n\u2502   \u251c\u2500\u2500 statistics-section.css # Statistics section styles\n\u2502   \u251c\u2500\u2500 status-messages.css # Status message styles\n\u2502   \u2514\u2500\u2500 utilities.css       # Utility classes\n\u2514\u2500\u2500 main.css                # Main CSS file that imports all modules\n</code></pre>"},{"location":"development/module-structure/#css-module-types","title":"CSS Module Types","text":"<ol> <li>Base Styles: Foundational styles that apply globally</li> <li><code>reset.css</code>: Normalizes browser differences</li> <li><code>typography.css</code>: Text styles</li> <li> <p><code>variables.css</code>: CSS custom properties for theming</p> </li> <li> <p>Layout Styles: Define the page structure</p> </li> <li><code>container.css</code>: Main content container</li> <li> <p><code>grid.css</code>: Grid and flexbox layouts</p> </li> <li> <p>Module Styles: Component-specific styles</p> </li> <li>Each file corresponds to a UI component or section</li> <li>Follows BEM-like naming conventions</li> <li> <p>Encapsulates styling for a specific feature</p> </li> <li> <p>Main CSS: Imports all modules</p> </li> <li>Controls the import order to manage specificity</li> <li>Entry point for the entire CSS system</li> </ol>"},{"location":"development/module-structure/#css-variables","title":"CSS Variables","text":"<p>The <code>variables.css</code> file defines custom properties used throughout the application:</p> <pre><code>:root {\n    /* Color palette */\n    --primary-color: #3498db;\n    --primary-dark: #2980b9;\n\n    /* Spacing */\n    --spacing-xs: 0.25rem;\n    --spacing-sm: 0.5rem;\n    --spacing-md: 1rem;\n\n    /* Other variables */\n    /* ... */\n}\n</code></pre> <p>These variables are used in all modules to ensure consistent styling and make theming easier.</p>"},{"location":"development/module-structure/#adding-new-modules","title":"Adding New Modules","text":""},{"location":"development/module-structure/#adding-a-javascript-module","title":"Adding a JavaScript Module","text":"<ol> <li>Create a new file in the appropriate directory</li> <li>Use ES6 imports to declare dependencies</li> <li>Implement your feature using a class or function approach</li> <li>Export your module</li> <li>Import and initialize it in <code>main.js</code></li> </ol> <p>Example:</p> <pre><code>// js/modules/newFeature.js\nimport DOMHelpers from '../utils/domHelpers.js';\n\nclass NewFeature {\n    constructor(config) {\n        this.config = config;\n        this.init();\n    }\n\n    init() {\n        // Initialization code\n    }\n\n    // Public methods\n}\n\nexport default NewFeature;\n\n// In main.js\nimport NewFeature from './modules/newFeature.js';\n\n// Initialize with the application\nthis.newFeature = new NewFeature({\n    // Configuration\n});\n</code></pre>"},{"location":"development/module-structure/#adding-a-css-module","title":"Adding a CSS Module","text":"<ol> <li>Create a new CSS file in the appropriate directory</li> <li>Use CSS variables for consistent styling</li> <li>Focus on a single component or feature</li> <li>Add your import to <code>main.css</code></li> </ol> <p>Example:</p> <pre><code>/* css/modules/new-feature.css */\n.new-feature {\n    background-color: var(--bg-light);\n    padding: var(--spacing-md);\n    border-radius: var(--border-radius-sm);\n}\n\n.new-feature__title {\n    color: var(--primary-color);\n    margin-bottom: var(--spacing-sm);\n}\n\n/* In main.css */\n@import 'modules/new-feature.css';\n</code></pre>"},{"location":"development/module-structure/#best-practices","title":"Best Practices","text":"<ol> <li>Single Responsibility: Each module should focus on a single feature or concern</li> <li>Explicit Dependencies: Declare all dependencies using imports</li> <li>Encapsulation: Use private methods/properties for internal implementation</li> <li>Consistent Naming: Follow the established naming conventions</li> <li>Documentation: Use JSDoc comments for all public methods</li> <li>Avoid Global State: Keep state within modules when possible</li> <li>Event-Based Communication: Use events for loose coupling between modules</li> <li>CSS Scoping: Prefix CSS classes to avoid conflicts between modules</li> </ol>"},{"location":"development/module-structure/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview</li> <li>Contributing Guide</li> <li>API Documentation</li> <li>Tutorial: Extending Modules</li> </ul>"},{"location":"development/testing/","title":"Testing PixTrail Modules","text":"<p>This document provides guidance on testing PixTrail modules to ensure their quality, reliability, and compatibility.</p>"},{"location":"development/testing/#testing-approach","title":"Testing Approach","text":"<p>PixTrail uses a modular architecture that makes testing more manageable. Each module can be tested independently, and then integration tests can verify that modules work together correctly.</p> <p>The testing approach includes:</p> <ol> <li>Unit Testing: Testing individual functions and methods in isolation</li> <li>Module Testing: Testing each module as a whole</li> <li>Integration Testing: Testing interactions between modules</li> <li>UI Testing: Testing the user interface elements</li> <li>End-to-End Testing: Testing complete user workflows</li> </ol>"},{"location":"development/testing/#testing-environment","title":"Testing Environment","text":""},{"location":"development/testing/#prerequisites","title":"Prerequisites","text":"<p>You'll need the following for testing:</p> <ul> <li>Modern web browser (Chrome, Firefox, Safari, Edge)</li> <li>Development server running</li> <li>Test data (sample photos with GPS data)</li> <li>Browser developer tools</li> </ul>"},{"location":"development/testing/#setting-up-a-testing-environment","title":"Setting Up a Testing Environment","text":"<ol> <li>Clone the repository</li> <li>Install dependencies</li> <li>Start the development server</li> <li>Open the application in your browser</li> <li>Open browser developer tools (F12 or Ctrl+Shift+I)</li> </ol>"},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"development/testing/#testing-utility-functions","title":"Testing Utility Functions","text":"<p>Utility functions can be tested directly in the browser console:</p> <pre><code>// Import utilities\nimport DOMHelpers from './utils/domHelpers.js';\nimport GPSUtils from './utils/gpsUtils.js';\n\n// Test DOM helper function\nconst element = DOMHelpers.create('div', { \n    classes: 'test-class',\n    text: 'Test element' \n});\ndocument.body.appendChild(element);\nconsole.assert(element.className === 'test-class', 'Class was not applied correctly');\nconsole.assert(element.textContent === 'Test element', 'Text was not set correctly');\n\n// Test GPS utility function\nconst distance = GPSUtils.calculateDistance(35.0394, 135.7292, 35.6812, 139.7671);\nconsole.assert(distance &gt; 0, 'Distance calculation failed');\nconsole.log(`Distance: ${distance} km`);\n</code></pre>"},{"location":"development/testing/#using-a-testing-framework","title":"Using a Testing Framework","text":"<p>For more comprehensive testing, consider using a testing framework like Jest or Mocha:</p> <pre><code>// Example Jest test for gpsUtils.js\nimport GPSUtils from '../utils/gpsUtils.js';\n\ndescribe('GPSUtils', () =&gt; {\n  test('calculateDistance should return correct value', () =&gt; {\n    const distance = GPSUtils.calculateDistance(35.0394, 135.7292, 35.6812, 139.7671);\n    expect(distance).toBeGreaterThan(0);\n    expect(distance).toBeCloseTo(371.5, 0); // Kyoto to Tokyo ~371.5 km\n  });\n\n  test('validateCoordinates should detect invalid coordinates', () =&gt; {\n    expect(GPSUtils.validateCoordinates(35.0394, 135.7292)).toBe(true);\n    expect(GPSUtils.validateCoordinates(190, 135.7292)).toBe(false);\n    expect(GPSUtils.validateCoordinates(35.0394, 190)).toBe(false);\n    expect(GPSUtils.validateCoordinates('abc', 135.7292)).toBe(false);\n  });\n});\n</code></pre>"},{"location":"development/testing/#module-testing","title":"Module Testing","text":""},{"location":"development/testing/#testing-class-based-modules","title":"Testing Class-Based Modules","text":"<p>Most PixTrail feature modules use a class-based approach. Here's how to test them:</p> <pre><code>// Test MapVisualization module\nimport MapVisualization from './modules/mapVisualization.js';\n\n// Create container elements\nconst mapContainer = document.createElement('div');\nconst mapElement = document.createElement('div');\nmapContainer.appendChild(mapElement);\ndocument.body.appendChild(mapContainer);\n\n// Initialize the module\nconst mapViz = new MapVisualization({\n  mapContainer: mapContainer,\n  mapElement: mapElement\n});\n\n// Test map initialization\nconst map = mapViz.getMap();\nconsole.assert(map !== null, 'Map should be initialized');\n\n// Test waypoint addition\nconst testWaypoints = [\n  { latitude: 35.0394, longitude: 135.7292, name: 'Point 1', timestamp: '2023-01-01T12:00:00Z' },\n  { latitude: 35.6812, longitude: 139.7671, name: 'Point 2', timestamp: '2023-01-01T15:00:00Z' }\n];\nmapViz.setWaypoints(testWaypoints);\nconsole.assert(mapViz.markers.length === 2, 'Markers should be created');\nconsole.assert(mapViz.routeLine !== null, 'Route line should be created');\n\n// Test clearing\nmapViz.clearMapLayers();\nconsole.assert(mapViz.markers.length === 0, 'Markers should be cleared');\nconsole.assert(mapViz.routeLine === null, 'Route line should be cleared');\n</code></pre>"},{"location":"development/testing/#mock-objects","title":"Mock Objects","text":"<p>For modules that interact with external services or APIs, use mock objects:</p> <pre><code>// Mock APIClient for testing\nconst mockAPIClient = {\n  submitPhotos: (formData, progressCallback) =&gt; {\n    // Simulate progress updates\n    setTimeout(() =&gt; progressCallback({ loaded: 50, total: 100 }), 100);\n    setTimeout(() =&gt; progressCallback({ loaded: 100, total: 100 }), 200);\n\n    // Return mock response\n    return Promise.resolve({ session_id: 'test-session-123' });\n  },\n\n  processPhotos: (sessionId) =&gt; {\n    console.log(`Processing session ${sessionId}`);\n    return Promise.resolve({\n      success: true,\n      waypoints: [\n        { latitude: 35.0394, longitude: 135.7292, name: 'Test1.jpg', timestamp: '2023-01-01T12:00:00Z' },\n        { latitude: 35.6812, longitude: 139.7671, name: 'Test2.jpg', timestamp: '2023-01-01T15:00:00Z' }\n      ]\n    });\n  }\n};\n\n// Replace actual API client with mock\nwindow.originalAPIClient = window.APIClient;\nwindow.APIClient = mockAPIClient;\n\n// Test code that uses APIClient\n// ...\n\n// Restore original API client\nwindow.APIClient = window.originalAPIClient;\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration tests verify that modules work together correctly:</p> <pre><code>// Integration test for Map Visualization + Heatmap\nimport MapVisualization from './modules/mapVisualization.js';\nimport Heatmap from './modules/heatmap.js';\n\n// Set up containers\n// ...\n\n// Initialize modules\nconst mapViz = new MapVisualization({ /* config */ });\nconst heatmap = new Heatmap({ \n  map: mapViz.getMap(),\n  toggleButton: document.getElementById('toggle-heatmap')\n});\n\n// Test data\nconst testWaypoints = [/* waypoints */];\n\n// Test integration\nmapViz.setWaypoints(testWaypoints);\nheatmap.setWaypoints(testWaypoints);\n\n// Verify heatmap works\nheatmap.show();\nconsole.assert(heatmap.isVisible(), 'Heatmap should be visible');\nconsole.assert(heatmap.heatLayer !== null, 'Heat layer should be created');\n\n// Verify toggle works\ndocument.getElementById('toggle-heatmap').click();\nconsole.assert(!heatmap.isVisible(), 'Heatmap should be hidden after toggle');\n</code></pre>"},{"location":"development/testing/#ui-testing","title":"UI Testing","text":"<p>Test UI components to ensure they work correctly:</p>"},{"location":"development/testing/#event-handling","title":"Event Handling","text":"<pre><code>// Test button click handling\nconst button = document.getElementById('process-button');\nbutton.click();\n// Verify expected behavior occurred\n\n// Test drag and drop\nconst dropArea = document.getElementById('file-drop-area');\nconst dragEvent = new Event('dragover');\ndropArea.dispatchEvent(dragEvent);\nconsole.assert(dropArea.classList.contains('drag-over'), \n               'Drop area should have drag-over class');\n</code></pre>"},{"location":"development/testing/#form-submission","title":"Form Submission","text":"<pre><code>// Test form submission\nconst form = document.getElementById('process-form');\nconst submitEvent = new Event('submit', { cancelable: true });\nform.dispatchEvent(submitEvent);\n// Verify form submission was handled\n</code></pre>"},{"location":"development/testing/#responsive-design","title":"Responsive Design","text":"<p>Test on different screen sizes:</p> <pre><code>// Test responsive behavior\nconst originalWidth = window.innerWidth;\nconst originalHeight = window.innerHeight;\n\n// Simulate mobile\nwindow.innerWidth = 375;\nwindow.innerHeight = 667;\nwindow.dispatchEvent(new Event('resize'));\n// Verify mobile layout\n\n// Restore size\nwindow.innerWidth = originalWidth;\nwindow.innerHeight = originalHeight;\nwindow.dispatchEvent(new Event('resize'));\n</code></pre>"},{"location":"development/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>End-to-end tests simulate complete user workflows:</p> <pre><code>// End-to-end test for photo processing workflow\nasync function testPhotoProcessingWorkflow() {\n  console.log('Starting E2E test: Photo processing workflow');\n\n  // 1. Select photos\n  console.log('Selecting photos...');\n  const fileInput = document.getElementById('photo-input');\n  // Create mock file\n  const file = new File([''], 'test.jpg', { type: 'image/jpeg' });\n  const dataTransfer = new DataTransfer();\n  dataTransfer.items.add(file);\n  fileInput.files = dataTransfer.files;\n  fileInput.dispatchEvent(new Event('change'));\n\n  // 2. Submit form\n  console.log('Submitting form...');\n  const form = document.getElementById('process-form');\n  const submitEvent = new Event('submit', { cancelable: true });\n  form.dispatchEvent(submitEvent);\n\n  // 3. Wait for processing\n  console.log('Waiting for processing...');\n  await new Promise(resolve =&gt; setTimeout(resolve, 2000));\n\n  // 4. Verify map is displayed\n  console.log('Verifying map display...');\n  const mapContainer = document.getElementById('map-container');\n  console.assert(!mapContainer.classList.contains('hidden'), \n                'Map should be visible after processing');\n\n  // 5. Test map controls\n  console.log('Testing map controls...');\n  document.getElementById('toggle-heatmap').click();\n  document.getElementById('toggle-clustering').click();\n  document.getElementById('toggle-statistics').click();\n\n  // 6. Verify statistics\n  console.log('Verifying statistics...');\n  const statsContainer = document.getElementById('statistics-container');\n  console.assert(!statsContainer.classList.contains('hidden'), \n                'Statistics should be visible');\n\n  console.log('E2E test completed successfully');\n}\n\n// Run the E2E test\ntestPhotoProcessingWorkflow()\n  .catch(error =&gt; console.error('E2E test failed:', error));\n</code></pre>"},{"location":"development/testing/#testing-modular-css","title":"Testing Modular CSS","text":"<p>Test CSS modules to ensure they apply correctly:</p> <pre><code>// Test CSS module application\nfunction testCSSModules() {\n  console.log('Testing CSS modules...');\n\n  // Test button styles\n  const button = document.createElement('button');\n  button.className = 'primary-button';\n  document.body.appendChild(button);\n\n  const style = window.getComputedStyle(button);\n  console.assert(style.backgroundColor !== 'rgba(0, 0, 0, 0)', \n                'Button should have background color');\n  console.assert(style.color === 'rgb(255, 255, 255)', \n                'Primary button should have white text');\n\n  document.body.removeChild(button);\n\n  // Test responsive behavior\n  // ...\n\n  console.log('CSS module tests completed');\n}\n\ntestCSSModules();\n</code></pre>"},{"location":"development/testing/#automated-testing-setup","title":"Automated Testing Setup","text":"<p>For ongoing development and CI/CD pipelines, consider setting up automated testing:</p> <ol> <li> <p>Add Testing Framework:    <pre><code>npm install --save-dev jest\n</code></pre></p> </li> <li> <p>Configure Jest for ES Modules:    <pre><code>// jest.config.js\nmodule.exports = {\n  transform: {\n    '^.+\\\\.js$': 'babel-jest',\n  },\n  moduleFileExtensions: ['js'],\n  testEnvironment: 'jsdom',\n};\n</code></pre></p> </li> <li> <p>Create Test Scripts:    <pre><code>// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n</code></pre></p> </li> <li> <p>Write Test Files:    <pre><code>// __tests__/utils/gpsUtils.test.js\nimport GPSUtils from '../../static/js/utils/gpsUtils.js';\n\ndescribe('GPSUtils', () =&gt; {\n  // Tests...\n});\n</code></pre></p> </li> </ol>"},{"location":"development/testing/#testing-custom-modules","title":"Testing Custom Modules","text":"<p>When testing custom modules you've developed:</p> <ol> <li>Create a Test Plan: Define what you want to test</li> <li>Test in Isolation: First test your module by itself</li> <li>Test Integration: Test how it works with existing modules</li> <li>Test Edge Cases: Consider boundary conditions and errors</li> <li>Test Performance: Ensure the module performs well with large data sets</li> </ol> <p>Example test for a custom module:</p> <pre><code>// Test for a custom PhotoCarousel module\nimport PhotoCarousel from './modules/photoCarousel.js';\n\nfunction testPhotoCarousel() {\n  console.log('Testing PhotoCarousel module...');\n\n  // Create container\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  // Initialize carousel\n  const carousel = new PhotoCarousel({\n    container: container,\n    onPhotoChange: (index, photo) =&gt; {\n      console.log(`Photo changed to ${index}: ${photo.name}`);\n    }\n  });\n\n  // Test setting photos\n  const photos = [\n    { url: 'test1.jpg', name: 'Test 1' },\n    { url: 'test2.jpg', name: 'Test 2' },\n    { url: 'test3.jpg', name: 'Test 3' }\n  ];\n  carousel.setPhotos(photos);\n\n  // Test showing the carousel\n  carousel.show();\n  console.assert(carousel.isVisible(), 'Carousel should be visible');\n\n  // Test navigation\n  carousel.showNext();\n  console.assert(carousel.currentIndex === 1, 'Should advance to next photo');\n\n  carousel.showPrevious();\n  console.assert(carousel.currentIndex === 0, 'Should go back to previous photo');\n\n  // Test hiding\n  carousel.hide();\n  console.assert(!carousel.isVisible(), 'Carousel should be hidden');\n\n  // Clean up\n  document.body.removeChild(container);\n\n  console.log('PhotoCarousel tests completed');\n}\n\ntestPhotoCarousel();\n</code></pre>"},{"location":"development/testing/#common-testing-issues","title":"Common Testing Issues","text":"<p>Watch out for these common testing issues:</p> <ol> <li>Asynchronous Operations: Use <code>async/await</code> or callbacks for asynchronous tests</li> <li>DOM Dependencies: Ensure test DOM elements exist before testing</li> <li>Browser Differences: Test in multiple browsers</li> <li>CSS Isolation: CSS modules should not affect each other</li> <li>Module Dependencies: Mock dependencies when testing individual modules</li> <li>Performance Testing: Test with realistic data volumes</li> </ol>"},{"location":"development/testing/#test-documentation","title":"Test Documentation","text":"<p>When writing tests, document:</p> <ol> <li>Purpose: What aspect is being tested</li> <li>Setup: Required environment and initial conditions</li> <li>Actions: Steps to execute</li> <li>Expected Results: What should happen</li> <li>Cleanup: How to restore the system after testing</li> </ol>"},{"location":"development/testing/#conclusion","title":"Conclusion","text":"<p>Testing is essential for maintaining the quality and reliability of PixTrail. By testing both individual modules and their integration, you can ensure that changes and extensions work correctly without breaking existing functionality.</p> <p>Remember to test across different browsers, screen sizes, and with various inputs to ensure a robust application.</p>"},{"location":"tutorials/","title":"PixTrail Tutorials","text":"<p>Welcome to the PixTrail tutorials section! Here you'll find comprehensive, step-by-step guides to help you get the most out of PixTrail. These tutorials are designed to cover both basic usage and advanced features, catering to users of all experience levels.</p>"},{"location":"tutorials/#tutorial-categories","title":"Tutorial Categories","text":"<p>The tutorials are organized by skill level and topic to help you find exactly what you need:</p> <ul> <li>Beginner Tutorials: Essential knowledge for new users</li> <li>Intermediate Tutorials: More advanced features and techniques</li> <li>Advanced Tutorials: Expert-level customization and integration</li> <li>CLI Tutorials: Command-line usage and automation</li> </ul> <p>Each tutorial includes detailed steps, screenshots, examples, and troubleshooting tips to ensure your success.</p>"},{"location":"tutorials/#beginner-tutorials","title":"Beginner Tutorials","text":"<p>If you're new to PixTrail, start with these fundamental tutorials:</p>"},{"location":"tutorials/#photo-journey","title":"Photo Journey","text":"<p>Learn how to create a route visualization from a set of photos taken during a journey. This introductory tutorial covers:</p> <ul> <li>Uploading photos with GPS data</li> <li>Viewing the route on a map</li> <li>Exploring basic statistics</li> <li>Exporting a GPX file for use in other applications</li> </ul> <p>This is the perfect starting point if you're new to PixTrail and want to quickly see what it can do with your photos.</p>"},{"location":"tutorials/#batch-processing","title":"Batch Processing","text":"<p>Learn how to process large collections of photos efficiently. This tutorial covers:</p> <ul> <li>Selecting and processing entire directories</li> <li>Using recursive processing for nested folders</li> <li>Setting depth limits for directory traversal</li> <li>Optimizing performance for large collections</li> </ul> <p>This tutorial is essential for users with extensive photo collections or multiple journeys to process.</p>"},{"location":"tutorials/#intermediate-tutorials","title":"Intermediate Tutorials","text":"<p>Once you're comfortable with the basics, explore these more advanced features:</p>"},{"location":"tutorials/#custom-visualizations","title":"Custom Visualizations","text":"<p>Take your map visualizations to the next level. This tutorial covers:</p> <ul> <li>Customizing the map appearance</li> <li>Using heatmaps to visualize density</li> <li>Configuring marker clustering</li> <li>Adjusting visualization parameters</li> <li>Working with the statistics charts</li> </ul> <p>Learn how to create more insightful and visually appealing representations of your journeys.</p>"},{"location":"tutorials/#advanced-statistics","title":"Advanced Statistics","text":"<p>Dive deeper into the statistics features of PixTrail. Learn about:</p> <ul> <li>Understanding the elevation profile</li> <li>Analyzing speed patterns</li> <li>Interpreting time-based data</li> <li>Exporting statistics reports</li> <li>Comparing multiple journeys</li> </ul> <p>This tutorial helps you extract meaningful insights from the quantitative data of your journeys.</p>"},{"location":"tutorials/#advanced-tutorials","title":"Advanced Tutorials","text":"<p>For power users and developers, these advanced tutorials offer deeper customization:</p>"},{"location":"tutorials/#extending-pixtrail-modules","title":"Extending PixTrail Modules","text":"<p>Learn how to extend PixTrail with your own custom modules. This tutorial is for developers who want to add new features to the application. It covers:</p> <ul> <li>Understanding the modular architecture</li> <li>Creating a new JavaScript module</li> <li>Adding corresponding CSS styles</li> <li>Integrating with existing modules</li> <li>Building more complex extensions</li> </ul> <p>This tutorial demonstrates how to create two example modules: 1. A photo carousel for viewing images along your route 2. A route animation feature for visualizing journeys over time</p>"},{"location":"tutorials/#api-integration","title":"API Integration","text":"<p>Learn how to integrate PixTrail's functionality into your own applications. This tutorial covers:</p> <ul> <li>Using the Python API for custom processing</li> <li>Integrating with photo management workflows</li> <li>Creating custom reports and exports</li> <li>Building automated pipelines</li> </ul> <p>This tutorial is ideal for developers who want to incorporate PixTrail's capabilities into larger systems or workflows.</p>"},{"location":"tutorials/#cli-tutorials","title":"CLI Tutorials","text":"<p>For command-line users and automation enthusiasts:</p>"},{"location":"tutorials/#automation-with-cli","title":"Automation with CLI","text":"<p>Learn how to use PixTrail's command-line interface for automation. This tutorial covers:</p> <ul> <li>Basic CLI usage</li> <li>Creating batch processing scripts</li> <li>Integrating with other tools</li> <li>Setting up automated workflows</li> <li>Scheduling regular processing tasks</li> </ul> <p>This tutorial is perfect for users who want to integrate PixTrail into automated workflows or process photos without a graphical interface.</p>"},{"location":"tutorials/#special-use-cases","title":"Special Use Cases","text":"<p>These tutorials address specific scenarios and applications:</p>"},{"location":"tutorials/#travel-blog-mapping","title":"Travel Blog Mapping","text":"<p>Learn how to create maps for travel blogs and websites. This tutorial covers:</p> <ul> <li>Processing photos from a trip</li> <li>Creating visually appealing route maps</li> <li>Exporting for web publication</li> <li>Integrating with popular blogging platforms</li> </ul>"},{"location":"tutorials/#event-documentation","title":"Event Documentation","text":"<p>Learn how to document events like festivals, conferences, or sports competitions. This tutorial covers:</p> <ul> <li>Efficient photo collection strategies</li> <li>Creating time-based visualizations</li> <li>Analyzing movement patterns during events</li> <li>Creating shareable event summaries</li> </ul>"},{"location":"tutorials/#multi-day-trip-analysis","title":"Multi-Day Trip Analysis","text":"<p>Learn how to process and analyze longer journeys spanning multiple days. This tutorial covers:</p> <ul> <li>Organizing photos by day</li> <li>Creating daily and cumulative visualizations</li> <li>Analyzing patterns across different days</li> <li>Comparing daily statistics</li> </ul>"},{"location":"tutorials/#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial follows a similar structure to ensure clarity and ease of use:</p> <ol> <li>Introduction: Overview of what you'll learn and prerequisites</li> <li>Setup: Any preparation needed before starting</li> <li>Step-by-Step Instructions: Detailed guidance with screenshots</li> <li>Examples: Practical examples to follow along with</li> <li>Troubleshooting: Solutions to common issues</li> <li>Next Steps: Suggestions for further learning</li> </ol>"},{"location":"tutorials/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues while following these tutorials:</p> <ol> <li>Check the Troubleshooting Guide for common solutions</li> <li>Review the FAQ for answers to frequent questions</li> <li>Consult the detailed API Reference for technical details</li> <li>Search or ask in the GitHub Issues section of the repository</li> </ol>"},{"location":"tutorials/#request-a-tutorial","title":"Request a Tutorial","text":"<p>Don't see what you're looking for? Open an issue on the GitHub repository to request a new tutorial topic. Please include:</p> <ul> <li>The topic or feature you'd like covered</li> <li>Your current understanding or experience level</li> <li>Specific questions or challenges you're facing</li> <li>Any examples of what you're trying to achieve</li> </ul>"},{"location":"tutorials/#contributing-tutorials","title":"Contributing Tutorials","text":"<p>If you have expertise with PixTrail and would like to contribute a tutorial:</p> <ol> <li>Check the Contributing Guide for submission guidelines</li> <li>Use the existing tutorials as templates for structure and style</li> <li>Focus on clear, step-by-step instructions with plenty of examples</li> <li>Include screenshots or diagrams where helpful</li> <li>Submit your tutorial as a pull request</li> </ol> <p>We welcome community contributions that help other users get the most out of PixTrail!</p>"},{"location":"tutorials/batch-processing/","title":"Batch Processing Large Photo Collections","text":"<p>Skill Level: Intermediate</p> <p>This tutorial will guide you through processing large collections of photos spread across multiple directories using PixTrail's batch processing capabilities.</p>"},{"location":"tutorials/batch-processing/#introduction","title":"Introduction","text":"<p>When dealing with large photo collections from multiple journeys or trips, processing them one by one can be time-consuming. PixTrail offers batch processing capabilities that allow you to process multiple directories at once, saving you time and effort.</p> <p>By the end of this tutorial, you will know how to: - Process multiple photo directories in a single operation - Organize GPX outputs effectively - Automate batch processing with scripts - Manage large collections efficiently</p>"},{"location":"tutorials/batch-processing/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ol> <li> <p>PixTrail installed:    <pre><code>pip install pixtrail\n</code></pre></p> </li> <li> <p>Multiple directories of geotagged photos organized on your computer</p> </li> <li>For example, different trips or days of a vacation</li> <li> <p>Each directory should contain photos with GPS data</p> </li> <li> <p>Basic command-line knowledge for running commands and scripts</p> </li> </ol>"},{"location":"tutorials/batch-processing/#step-1-understanding-batch-processing-options","title":"Step 1: Understanding Batch Processing Options","text":"<p>PixTrail offers several options for batch processing:</p> <ol> <li>Command-Line Batch Mode (<code>-b</code> / <code>--batch</code> flag):</li> <li>Process multiple directories in a single command</li> <li>Automatically name the GPX files based on the directory names</li> <li> <p>Optionally specify a common output directory</p> </li> <li> <p>Python API Batch Processing:</p> </li> <li>Process directories programmatically</li> <li>Customize processing with filters and transformations</li> <li>Integrate with other Python tools and workflows</li> </ol>"},{"location":"tutorials/batch-processing/#step-2-command-line-batch-processing","title":"Step 2: Command-Line Batch Processing","text":"<p>Let's start with the simplest approach using the command line:</p> <ol> <li> <p>Open a terminal or command prompt</p> </li> <li> <p>Run the following command to process multiple directories:    <pre><code>pixtrail -b /path/to/trip1 /path/to/trip2 /path/to/trip3\n</code></pre></p> </li> <li> <p>This will:</p> </li> <li>Process each directory separately</li> <li>Create a GPX file in each directory, named after the directory</li> <li> <p>Print progress information for each directory</p> </li> <li> <p>To save all GPX files to a specific output directory:    <pre><code>pixtrail -b /path/to/trip1 /path/to/trip2 -d /path/to/gpx_output\n</code></pre></p> </li> <li> <p>For recursive processing of subdirectories:    <pre><code>pixtrail -b /path/to/trip1 /path/to/trip2 -r\n</code></pre></p> </li> <li> <p>For verbose output showing detailed progress:    <pre><code>pixtrail -b /path/to/trip1 /path/to/trip2 -v\n</code></pre></p> </li> </ol>"},{"location":"tutorials/batch-processing/#step-3-processing-an-entire-photo-library","title":"Step 3: Processing an Entire Photo Library","text":"<p>To process all subdirectories in your photo library:</p> <ol> <li> <p>Navigate to your main photos directory</p> </li> <li> <p>Use the batch mode with the recursive flag:    <pre><code>pixtrail -b ./2023/* -r -d ./gpx_files\n</code></pre></p> </li> </ol> <p>This example:    - Processes all directories in the \"2023\" folder    - Searches recursively in each directory    - Saves all GPX files to the \"gpx_files\" directory</p> <ol> <li>Check the results:</li> <li>Each subdirectory with GPS-tagged photos will generate a GPX file</li> <li>The GPX files will be named after the respective directories</li> <li>Directories without GPS data will be skipped with a message</li> </ol>"},{"location":"tutorials/batch-processing/#step-4-creating-a-batch-processing-script","title":"Step 4: Creating a Batch Processing Script","text":"<p>For repeated batch processing tasks, creating a script can be helpful:</p>"},{"location":"tutorials/batch-processing/#bash-script-linuxmacos","title":"Bash Script (Linux/macOS)","text":"<p>Create a file named <code>process_photos.sh</code>:</p> <pre><code>#!/bin/bash\n\n# Directory containing photo folders\nPHOTO_BASE=\"/home/username/Photos\"\n\n# Output directory for GPX files\nOUTPUT_DIR=\"/home/username/GPX_Files\"\n\n# Ensure output directory exists\nmkdir -p \"$OUTPUT_DIR\"\n\n# Process all year directories\nfor YEAR in \"$PHOTO_BASE\"/*/; do\n    YEAR_NAME=$(basename \"$YEAR\")\n    echo \"Processing year: $YEAR_NAME\"\n\n    # Create year subdirectory in output\n    mkdir -p \"$OUTPUT_DIR/$YEAR_NAME\"\n\n    # Process all trip directories for this year\n    pixtrail -b \"$YEAR\"/* -r -d \"$OUTPUT_DIR/$YEAR_NAME\" -v\ndone\n\necho \"Batch processing complete!\"\n</code></pre> <p>Make the script executable: <pre><code>chmod +x process_photos.sh\n</code></pre></p> <p>Run the script: <pre><code>./process_photos.sh\n</code></pre></p>"},{"location":"tutorials/batch-processing/#windows-batch-script","title":"Windows Batch Script","text":"<p>Create a file named <code>process_photos.bat</code>:</p> <pre><code>@echo off\nsetlocal enabledelayedexpansion\n\n:: Directory containing photo folders\nset PHOTO_BASE=C:\\Users\\username\\Photos\n\n:: Output directory for GPX files\nset OUTPUT_DIR=C:\\Users\\username\\GPX_Files\n\n:: Ensure output directory exists\nif not exist \"%OUTPUT_DIR%\" mkdir \"%OUTPUT_DIR%\"\n\n:: Process all year directories\nfor /D %%Y in (\"%PHOTO_BASE%\\*\") do (\n    set YEAR_NAME=%%~nxY\n    echo Processing year: !YEAR_NAME!\n\n    :: Create year subdirectory in output\n    if not exist \"%OUTPUT_DIR%\\!YEAR_NAME!\" mkdir \"%OUTPUT_DIR%\\!YEAR_NAME!\"\n\n    :: Process all trip directories for this year\n    pixtrail -b \"%%Y\\*\" -r -d \"%OUTPUT_DIR%\\!YEAR_NAME!\" -v\n)\n\necho Batch processing complete!\n</code></pre> <p>Run the script: <pre><code>process_photos.bat\n</code></pre></p>"},{"location":"tutorials/batch-processing/#step-5-using-the-python-api-for-advanced-batch-processing","title":"Step 5: Using the Python API for Advanced Batch Processing","text":"<p>For more complex batch processing needs, you can use the PixTrail Python API:</p> <p>Create a file named <code>batch_process.py</code>:</p> <pre><code>#!/usr/bin/env python3\nimport os\nimport sys\nfrom datetime import datetime\nfrom pixtrail.core import PixTrail\n\ndef process_directories(base_dir, output_dir, min_photos=3):\n    \"\"\"Process all subdirectories with minimum number of photos.\"\"\"\n    # Create PixTrail object\n    pt = PixTrail()\n\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Get all subdirectories\n    subdirs = [d for d in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, d))]\n\n    results = {\n        'success': [],\n        'failed': [],\n        'skipped': []\n    }\n\n    # Process each directory\n    for subdir in subdirs:\n        input_path = os.path.join(base_dir, subdir)\n        output_path = os.path.join(output_dir, f\"{subdir}.gpx\")\n\n        print(f\"Processing {subdir}...\")\n\n        # Check number of image files (simple check for *.jpg)\n        image_count = len([f for f in os.listdir(input_path) \n                          if f.lower().endswith(('.jpg', '.jpeg'))])\n\n        if image_count &lt; min_photos:\n            print(f\"  Skipping: Only {image_count} images found (minimum: {min_photos})\")\n            results['skipped'].append(subdir)\n            continue\n\n        # Process and generate GPX\n        try:\n            result = pt.process_and_generate(input_path, output_path, recursive=True)\n\n            if result and 'success' in result and result['success']:\n                print(f\"  Success: Created {output_path}\")\n                print(f\"  Photos processed: {result['stats']['processed']}\")\n                results['success'].append(subdir)\n            else:\n                print(f\"  Failed: No GPS data found\")\n                results['failed'].append(subdir)\n        except Exception as e:\n            print(f\"  Error: {str(e)}\")\n            results['failed'].append(subdir)\n\n    # Print summary\n    print(\"\\nBatch Processing Summary:\")\n    print(f\"  Successfully processed: {len(results['success'])}\")\n    print(f\"  Failed: {len(results['failed'])}\")\n    print(f\"  Skipped (too few photos): {len(results['skipped'])}\")\n\n    return results\n\nif __name__ == \"__main__\":\n    if len(sys.argv) &lt; 3:\n        print(\"Usage: batch_process.py &lt;photos_directory&gt; &lt;output_directory&gt; [min_photos]\")\n        sys.exit(1)\n\n    photos_dir = sys.argv[1]\n    output_dir = sys.argv[2]\n    min_photos = int(sys.argv[3]) if len(sys.argv) &gt; 3 else 3\n\n    process_directories(photos_dir, output_dir, min_photos)\n</code></pre> <p>Run the script: <pre><code>python batch_process.py /path/to/photos /path/to/output 5\n</code></pre></p> <p>This script: - Processes all subdirectories in the specified base directory - Skips directories with fewer than the specified minimum number of photos - Creates GPX files in the output directory - Provides a summary of successfully processed, failed, and skipped directories</p>"},{"location":"tutorials/batch-processing/#step-6-organizing-and-managing-gpx-outputs","title":"Step 6: Organizing and Managing GPX Outputs","text":"<p>As you process large collections, organizing your GPX files becomes important:</p> <ol> <li> <p>Create a hierarchical output structure:    <pre><code>pixtrail -b /Photos/2023/Italy/* -d /GPX_Files/2023/Italy\n</code></pre></p> </li> <li> <p>Use descriptive naming:    <pre><code>pixtrail -i /Photos/2023/Italy/Rome -o /GPX_Files/2023/Italy/Rome_City_Tour.gpx\n</code></pre></p> </li> <li> <p>Create a master index file to keep track of your GPX files:    <pre><code># Create a simple index.html file listing all GPX files\nimport os\n\ndef create_index(gpx_dir, output_file):\n    with open(output_file, 'w') as f:\n        f.write(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;GPX Files Index&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\\n\")\n        f.write(\"&lt;h1&gt;GPX Files Index&lt;/h1&gt;\\n&lt;ul&gt;\\n\")\n\n        for root, dirs, files in os.walk(gpx_dir):\n            for file in files:\n                if file.endswith('.gpx'):\n                    rel_path = os.path.relpath(os.path.join(root, file), os.path.dirname(output_file))\n                    f.write(f'&lt;li&gt;&lt;a href=\"{rel_path}\"&gt;{os.path.basename(rel_path)}&lt;/a&gt;&lt;/li&gt;\\n')\n\n        f.write(\"&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;\")\n\n# Usage\ncreate_index(\"/path/to/gpx_files\", \"/path/to/gpx_files/index.html\")\n</code></pre></p> </li> </ol>"},{"location":"tutorials/batch-processing/#tips-for-efficient-batch-processing","title":"Tips for Efficient Batch Processing","text":"<ol> <li>Organize photos by trip/event before processing:</li> <li>Keep each journey or event in its own directory</li> <li> <p>Use descriptive directory names that will become GPX filenames</p> </li> <li> <p>Use selective processing for large collections:</p> </li> <li>Process the most important directories first</li> <li> <p>Skip directories with too few photos or those without GPS data</p> </li> <li> <p>Preserve disk space:</p> </li> <li>GPX files are small, but processing RAW files temporarily uses space</li> <li> <p>Clean up any temporary files after processing</p> </li> <li> <p>Monitor system resources:</p> </li> <li>Processing many large RAW files can be memory-intensive</li> <li>Process in smaller batches if you encounter resource limitations</li> </ol>"},{"location":"tutorials/batch-processing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/batch-processing/#script-or-command-errors","title":"Script or Command Errors","text":"<p>If your batch process fails with errors:</p> <ol> <li>Try processing a single directory first to isolate the issue</li> <li>Use the <code>-v</code> (verbose) flag to get more detailed error information</li> <li>Check file permissions on both input and output directories</li> <li>Ensure you have enough disk space for temporary files</li> </ol>"},{"location":"tutorials/batch-processing/#some-directories-are-skipped","title":"Some Directories Are Skipped","text":"<p>If some directories are processed but others are skipped:</p> <ol> <li>Check if the skipped directories contain photos with GPS data</li> <li>Verify that you have read access to all directories</li> <li>Check for special characters or spaces in directory names</li> <li>Try processing the skipped directories individually with verbose output</li> </ol>"},{"location":"tutorials/batch-processing/#performance-issues","title":"Performance Issues","text":"<p>If batch processing is slow:</p> <ol> <li>Process fewer directories at once</li> <li>Close other memory-intensive applications</li> <li>Use an SSD for temporary storage if available</li> <li>Process the most important directories first</li> </ol>"},{"location":"tutorials/batch-processing/#next-steps","title":"Next Steps","text":"<p>After mastering batch processing, you might want to explore:</p> <ul> <li>Customizing Visualizations to create custom views of your processed data</li> <li>Python API for even more advanced processing options</li> <li>Setting up scheduled batch processing tasks for automatic updates</li> </ul>"},{"location":"tutorials/batch-processing/#example-processing-a-vacation-photo-collection","title":"Example: Processing a Vacation Photo Collection","text":"<p>Here's an example workflow for processing photos from a two-week vacation:</p> <ol> <li> <p>Organize photos by day:    <pre><code>/Vacation2023/\n  Day1-Arrival/\n  Day2-CityTour/\n  Day3-Museum/\n  ...\n  Day14-Departure/\n</code></pre></p> </li> <li> <p>Process all days at once:    <pre><code>pixtrail -b /Vacation2023/* -d /Vacation2023/GPX_Tracks\n</code></pre></p> </li> <li> <p>Check results:</p> </li> <li>14 GPX files are created in the <code>/Vacation2023/GPX_Tracks</code> directory</li> <li>Each file is named after its corresponding day directory</li> <li> <p>Days without GPS data are skipped with a message</p> </li> <li> <p>Import all GPX files into Google Earth or other mapping software</p> </li> <li>Each day's journey appears as a separate track</li> <li>Different colors can be assigned to each day</li> <li>The entire vacation route can be visualized at once</li> </ol> <p>This example demonstrates how batch processing can quickly transform a large collection of vacation photos into a comprehensive set of GPX tracks documenting the entire trip.</p>"},{"location":"tutorials/custom-visualizations/","title":"Customizing Visualizations","text":"<p>Skill Level: Intermediate</p> <p>This tutorial will guide you through the process of customizing the visualization features in PixTrail's web interface to create more insightful and useful views of your journey data.</p>"},{"location":"tutorials/custom-visualizations/#introduction","title":"Introduction","text":"<p>PixTrail's web interface offers several powerful visualization tools that can be customized to better understand and analyze your photo journeys. By learning how to effectively use these tools, you can extract deeper insights from your GPS data and create more compelling visualizations.</p> <p>By the end of this tutorial, you will know how to: - Customize the map view for different types of journeys - Configure and interpret heat maps effectively - Optimize marker clustering for different scenarios - Use statistics and charts to analyze your routes - Combine multiple visualization techniques for comprehensive analysis</p>"},{"location":"tutorials/custom-visualizations/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ol> <li> <p>PixTrail installed with web interface support:    <pre><code>pip install pixtrail[web]\n</code></pre></p> </li> <li> <p>Processed photo data from at least one journey</p> </li> <li>For best results, use a journey with at least 20-30 photos</li> <li> <p>Having photos from different types of activities (urban exploration, hiking, etc.) is useful for comparison</p> </li> <li> <p>Basic familiarity with PixTrail's web interface</p> </li> <li>If you're new to PixTrail, complete the Documenting a Photo Journey tutorial first</li> </ol>"},{"location":"tutorials/custom-visualizations/#step-1-customizing-the-base-map","title":"Step 1: Customizing the Base Map","text":"<p>Let's start by understanding how to customize the basic map view:</p> <ol> <li> <p>Start the web interface:    <pre><code>pixtrail -w\n</code></pre></p> </li> <li> <p>Process your photos using either:</p> </li> <li>The \"Files\" tab for individual photos</li> <li> <p>The \"Directory\" tab for a folder of photos</p> </li> <li> <p>Adjust the map view:</p> </li> <li>Zoom in/out using the mouse wheel or +/- buttons</li> <li>Pan by clicking and dragging</li> <li> <p>Double-click to zoom in on a specific location</p> </li> <li> <p>Find the optimal zoom level:</p> </li> <li>For city tours: Zoom in close to see street details</li> <li>For hiking trips: Zoom out slightly to see terrain context</li> <li> <p>For road trips: Zoom out to see the entire route</p> </li> <li> <p>Center the map on the most important part of your journey by double-clicking that area</p> </li> </ol>"},{"location":"tutorials/custom-visualizations/#step-2-mastering-heat-maps","title":"Step 2: Mastering Heat Maps","text":"<p>Heat maps are a powerful way to visualize where you spent the most time during your journey:</p> <ol> <li> <p>Enable the heat map by clicking the \"Show Heatmap\" button</p> </li> <li> <p>Understand how heat maps work:</p> </li> <li>Red/yellow areas: High intensity (many photos or long duration)</li> <li>Green areas: Medium intensity</li> <li> <p>Blue areas: Low intensity (few photos or brief visits)</p> </li> <li> <p>Adjust your viewing zoom level:</p> </li> <li>Zoom in to see detailed heat patterns in specific areas</li> <li> <p>Zoom out to see the overall heat distribution across your journey</p> </li> <li> <p>Interpreting heat map patterns:</p> </li> <li>Point hotspots: Indicate locations where you spent significant time (e.g., tourist attractions, viewpoints)</li> <li>Line hotspots: Indicate slow movement along a path (e.g., scenic routes)</li> <li> <p>Scattered patterns: Indicate exploration of an area without specific focus points</p> </li> <li> <p>Use heat maps for different journey types:</p> </li> <li>Urban exploration: Identify which attractions held your interest longest</li> <li>Hiking: Find rest spots or viewpoints where you took multiple photos</li> <li> <p>Road trips: Identify stopover points versus transit areas</p> </li> <li> <p>Combine with base map features:</p> </li> <li>Look for correlations between heat intensity and map features (e.g., scenic viewpoints, museums)</li> <li>Identify patterns in your behavior (e.g., spending more time at historical sites)</li> </ol>"},{"location":"tutorials/custom-visualizations/#step-3-optimizing-marker-clustering","title":"Step 3: Optimizing Marker Clustering","text":"<p>For journeys with many photos, marker clustering helps manage visual complexity:</p> <ol> <li> <p>Enable clustering by clicking the \"Enable Clustering\" button</p> </li> <li> <p>Adjust the cluster radius using the slider that appears:</p> </li> <li>Lower values (20-40px): Create more clusters with fewer markers each</li> <li> <p>Higher values (100-200px): Create fewer clusters with more markers each</p> </li> <li> <p>Find the optimal radius for different journey types:</p> </li> <li>Urban journeys (40-60px): Differentiate between nearby attractions</li> <li>Hiking trips (60-80px): Group photos taken at viewpoints</li> <li> <p>Road trips (100-150px): Group photos by general areas/stops</p> </li> <li> <p>Interact with clusters:</p> </li> <li>Click on clusters to zoom in and see the contained markers</li> <li>Hover over clusters to see their boundaries</li> <li> <p>Notice how clusters dynamically break apart as you zoom in</p> </li> <li> <p>Advanced clustering techniques:</p> </li> <li>Staged analysis: Start with a high radius for overview, then reduce to see details</li> <li>Comparison: Toggle clustering on/off to compare individual markers with clustered patterns</li> <li>Combined with heat map: Use both together to see density (heat map) and grouping (clusters)</li> </ol>"},{"location":"tutorials/custom-visualizations/#step-4-utilizing-statistics-and-charts","title":"Step 4: Utilizing Statistics and Charts","text":"<p>The statistics panel provides quantitative insights into your journey:</p> <ol> <li> <p>Open the statistics panel by clicking the \"Show Statistics\" button</p> </li> <li> <p>Understand the summary statistics:</p> </li> <li>Total distance traveled</li> <li>Journey duration</li> <li>Average and maximum speeds</li> <li>Elevation data</li> <li> <p>Photo count</p> </li> <li> <p>Interpret the elevation chart:</p> </li> <li>Sharp peaks: Steep climbs or descents</li> <li>Plateaus: Flat sections at consistent elevation</li> <li> <p>Gradual slopes: Gentle climbs or descents</p> </li> <li> <p>Analyze the speed chart:</p> </li> <li>High values: Rapid movement (e.g., driving, cycling)</li> <li>Low values: Slow movement or stops</li> <li> <p>Variations: Changes in transportation mode or terrain difficulty</p> </li> <li> <p>Correlate statistics with map features:</p> </li> <li>Match speed drops with points of interest on the map</li> <li>Identify challenging sections of a hike based on speed and elevation</li> <li>Recognize rest stops or photo opportunities</li> </ol>"},{"location":"tutorials/custom-visualizations/#step-5-combined-visualization-techniques","title":"Step 5: Combined Visualization Techniques","text":"<p>For the most insightful analysis, combine multiple visualization techniques:</p> <ol> <li>Heat Map + Clustering for high-density areas:</li> <li>Enable both heat map and clustering</li> <li>Look for clusters that align with heat intensity</li> <li> <p>This combination works well for busy urban areas</p> </li> <li> <p>Clustering + Statistics for pattern recognition:</p> </li> <li>Use clustering to identify major stops</li> <li>Check the statistics to see time spent and distance between clusters</li> <li> <p>Correlate clusters with speed changes in the chart</p> </li> <li> <p>Heat Map + Statistics for detailed analysis:</p> </li> <li>Compare heat intensity with elevation changes</li> <li>Identify areas of high interest that also coincide with speed drops</li> <li> <p>Check if elevation viewpoints correspond to heat map hotspots</p> </li> <li> <p>All three together for comprehensive analysis:</p> </li> <li>Start with clustering for an organized overview</li> <li>Add the heat map to see intensity patterns</li> <li>Open statistics to quantify the observations</li> <li>This provides the most complete picture of your journey</li> </ol>"},{"location":"tutorials/custom-visualizations/#step-6-creating-custom-views-for-different-journey-types","title":"Step 6: Creating Custom Views for Different Journey Types","text":"<p>Different types of journeys benefit from different visualization settings:</p>"},{"location":"tutorials/custom-visualizations/#urban-exploration-settings","title":"Urban Exploration Settings","text":"<p>Best for city tours, museum visits, or urban photography:</p> <ol> <li>Base map: Zoom level 15-17 to see street details</li> <li>Clustering: Enable with 40-60px radius</li> <li>Heat map: Enable to identify major attractions</li> <li>Statistics: Focus on total distance walked and duration</li> </ol>"},{"location":"tutorials/custom-visualizations/#hiking-trip-settings","title":"Hiking Trip Settings","text":"<p>Best for trail hikes, mountain climbing, or nature walks:</p> <ol> <li>Base map: Zoom level 13-15 to see terrain features</li> <li>Clustering: Enable with 60-80px radius</li> <li>Heat map: Enable to identify viewpoints and rest areas</li> <li>Statistics: Focus on elevation chart and elevation gain</li> </ol>"},{"location":"tutorials/custom-visualizations/#road-trip-settings","title":"Road Trip Settings","text":"<p>Best for long-distance journeys by car or motorcycle:</p> <ol> <li>Base map: Zoom level 10-12 to see the entire route</li> <li>Clustering: Enable with 100-150px radius</li> <li>Heat map: Enable to identify major stopover points</li> <li>Statistics: Focus on total distance and average speed</li> </ol>"},{"location":"tutorials/custom-visualizations/#photography-session-settings","title":"Photography Session Settings","text":"<p>Best for dedicated photography outings where many photos are taken in a small area:</p> <ol> <li>Base map: Zoom level 16-18 for maximum detail</li> <li>Clustering: Disable or use very small radius (20-30px)</li> <li>Heat map: Enable to see the focus of your photography</li> <li>Statistics: Less relevant, focus on the map view</li> </ol>"},{"location":"tutorials/custom-visualizations/#advanced-tips-and-tricks","title":"Advanced Tips and Tricks","text":""},{"location":"tutorials/custom-visualizations/#creating-multi-journey-visualizations","title":"Creating Multi-Journey Visualizations","text":"<p>To compare or combine multiple journeys:</p> <ol> <li>Process each journey separately</li> <li>Note the patterns and heat map hotspots in each</li> <li>Look for common patterns or differences in your behavior</li> </ol>"},{"location":"tutorials/custom-visualizations/#time-based-analysis","title":"Time-Based Analysis","text":"<p>To understand your journey in terms of time:</p> <ol> <li>Check timestamps in photo markers by clicking on them</li> <li>Correlate the time of day with heat map intensity</li> <li>Look for patterns in your behavior at different times (e.g., attractions in the morning, restaurants in the evening)</li> </ol>"},{"location":"tutorials/custom-visualizations/#learning-from-visualization-patterns","title":"Learning from Visualization Patterns","text":"<p>Over time, your visualizations can reveal insights about your travel style:</p> <ol> <li>Do you tend to spend more time at certain types of locations?</li> <li>How does your pace vary between different environments?</li> <li>Are there patterns in your photo-taking behavior?</li> </ol>"},{"location":"tutorials/custom-visualizations/#troubleshooting-visualization-issues","title":"Troubleshooting Visualization Issues","text":""},{"location":"tutorials/custom-visualizations/#heat-map-not-showing-clear-patterns","title":"Heat Map Not Showing Clear Patterns","text":"<p>If your heat map looks uniform or unclear:</p> <ol> <li>Check if your photos have accurate timestamps</li> <li>Ensure you have enough photos to create meaningful patterns</li> <li>Try zooming in to see more detailed heat patterns</li> <li>Consider if your journey actually had uniform movement without major stops</li> </ol>"},{"location":"tutorials/custom-visualizations/#clustering-creates-too-many-or-too-few-clusters","title":"Clustering Creates Too Many or Too Few Clusters","text":"<p>If you're not happy with the clustering results:</p> <ol> <li>Adjust the radius slider to find the sweet spot</li> <li>For dense areas, use a smaller radius</li> <li>For sparse areas, use a larger radius</li> <li>If clustering doesn't improve visualization, try disabling it</li> </ol>"},{"location":"tutorials/custom-visualizations/#statistics-showing-unlikely-values","title":"Statistics Showing Unlikely Values","text":"<p>If your statistics seem incorrect:</p> <ol> <li>Check for outliers in your GPS data (e.g., erroneous GPS readings)</li> <li>Verify that your photos have accurate timestamps</li> <li>Be aware that gaps between photos can lead to misleading speed calculations</li> <li>For elevation data, note that not all cameras record accurate altitude</li> </ol>"},{"location":"tutorials/custom-visualizations/#next-steps","title":"Next Steps","text":"<p>After mastering visualization customization, you might want to explore:</p> <ul> <li>Using the Python API to create custom visualizations</li> <li>Batch Processing multiple journeys for comparison</li> <li>Creating a portfolio of journey visualizations for different trips</li> </ul>"},{"location":"tutorials/custom-visualizations/#example-analyzing-a-mixed-urbannature-journey","title":"Example: Analyzing a Mixed Urban/Nature Journey","text":"<p>Here's a practical example of customizing visualizations for a day trip that includes both urban exploration and a nature hike:</p> <ol> <li> <p>Process the photos from the mixed journey</p> </li> <li> <p>Initial assessment:</p> </li> <li>The map shows a route starting in a city, moving to a natural area, and returning</li> <li> <p>Photos are clustered both in the urban area and at points along the hiking trail</p> </li> <li> <p>Urban section analysis:</p> </li> <li>Zoom in to the urban area</li> <li>Set clustering radius to 50px for detailed grouping</li> <li>Enable heat map to see major points of interest</li> <li> <p>Note the statistics showing slower speed in this section</p> </li> <li> <p>Nature section analysis:</p> </li> <li>Zoom to the hiking trail section</li> <li>Increase clustering radius to 70px</li> <li>Keep heat map enabled to identify viewpoints</li> <li> <p>Check the elevation chart to correlate viewpoints with elevation changes</p> </li> <li> <p>Comprehensive analysis:</p> </li> <li>Zoom out to see the entire journey</li> <li>Set clustering radius at 80px for a balanced view</li> <li>Compare the heat patterns between urban and nature sections</li> <li>Note the speed differences between walking in the city and hiking on trails</li> </ol> <p>This example demonstrates how you can adjust visualization settings as you analyze different portions of a mixed journey, gaining insights into each section's unique characteristics.</p>"},{"location":"tutorials/photo-journey/","title":"Documenting a Photo Journey","text":"<p>Skill Level: Beginner</p> <p>This tutorial will guide you through the process of using PixTrail to document and visualize a journey using your geotagged photos. You'll learn how to transform your travel photos into an interactive map that tells the story of your adventure.</p>"},{"location":"tutorials/photo-journey/#introduction","title":"Introduction","text":"<p>When we travel or go on adventures, we often take photos along the way. These photos can contain valuable GPS data that allows us to reconstruct our journey. This tutorial will show you how to use PixTrail to extract this GPS data and create a visual record of your journey.</p> <p>By the end of this tutorial, you will have: - Processed your geotagged photos to extract GPS data - Generated a GPX file containing your route - Visualized your journey on an interactive map - Analyzed your route with statistics and charts - Created a shareable record of your adventure</p>"},{"location":"tutorials/photo-journey/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ol> <li> <p>PixTrail installed with web interface support:    <pre><code>pip install pixtrail[web]\n</code></pre></p> </li> <li> <p>A collection of geotagged photos from a journey or trip</p> </li> <li>Most smartphone photos are automatically geotagged</li> <li> <p>If using a digital camera, ensure GPS tagging was enabled</p> </li> <li> <p>Photos organized in a directory on your computer</p> </li> </ol>"},{"location":"tutorials/photo-journey/#step-1-prepare-your-photos","title":"Step 1: Prepare Your Photos","text":""},{"location":"tutorials/photo-journey/#check-for-gps-data","title":"Check for GPS Data","text":"<p>First, ensure your photos contain GPS data:</p> <ol> <li>Most modern smartphones automatically embed GPS coordinates in photos</li> <li>For digital cameras, you may need to enable GPS tagging in the settings</li> <li>You can check if location data is present using:</li> <li>The Properties or Info panel in your operating system's file browser</li> <li>Photo management software like Adobe Lightroom, Apple Photos, or Google Photos</li> <li>Online EXIF viewers that can show GPS coordinates</li> </ol>"},{"location":"tutorials/photo-journey/#organize-your-photos","title":"Organize Your Photos","text":"<p>For best results, organize your photos in a logical structure:</p> <ol> <li>Create a dedicated directory for the journey you want to document</li> <li>Include only relevant photos from the specific journey</li> <li>Maintain chronological order if possible (based on file timestamps)</li> <li>For multi-day trips, you might want to create subdirectories for each day</li> </ol> <p>Example directory structure: <pre><code>Italy_Vacation/\n\u251c\u2500\u2500 Day1_Rome/\n\u2502   \u251c\u2500\u2500 IMG_0001.jpg\n\u2502   \u251c\u2500\u2500 IMG_0002.jpg\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 Day2_Florence/\n\u2502   \u251c\u2500\u2500 IMG_0045.jpg\n\u2502   \u251c\u2500\u2500 IMG_0046.jpg\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 Day3_Venice/\n    \u251c\u2500\u2500 IMG_0098.jpg\n    \u251c\u2500\u2500 IMG_0099.jpg\n    \u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"tutorials/photo-journey/#step-2-start-the-pixtrail-web-interface","title":"Step 2: Start the PixTrail Web Interface","text":"<ol> <li>Open a terminal or command prompt</li> <li>Run the following command to start the PixTrail web interface:    <pre><code>pixtrail -w\n</code></pre></li> <li>PixTrail will start a local web server and automatically open your default browser to the interface</li> <li>If the browser doesn't open automatically, navigate to <code>http://127.0.0.1:5000</code> manually</li> </ol>"},{"location":"tutorials/photo-journey/#step-3-process-your-photos","title":"Step 3: Process Your Photos","text":""},{"location":"tutorials/photo-journey/#using-the-directory-tab","title":"Using the Directory Tab","text":"<ol> <li>In the PixTrail web interface, click on the \"Directory\" tab</li> <li>Click the \"Select Directory\" button and navigate to the folder containing your photos</li> <li>If your photos are organized in subdirectories, check the \"Process subdirectories recursively\" option</li> <li>If using recursive processing, you can set the maximum depth level</li> <li>Click the \"Process Photos\" button</li> <li>Wait while PixTrail extracts GPS data from your photos</li> <li>For JPEG files, processing happens directly in your browser</li> <li>For RAW files, they will be temporarily uploaded to the local server for processing</li> </ol>"},{"location":"tutorials/photo-journey/#using-the-files-tab","title":"Using the Files Tab","text":"<p>Alternatively, you can upload individual photo files:</p> <ol> <li>Click on the \"Files\" tab</li> <li>Click the \"Choose Files\" button and select your photos, or drag and drop them onto the designated area</li> <li>Click the \"Process Photos\" button</li> <li>Wait for processing to complete</li> </ol>"},{"location":"tutorials/photo-journey/#processing-status","title":"Processing Status","text":"<p>During processing, you'll see: 1. A progress bar showing the current status 2. Status messages indicating what's happening 3. Upon completion, the map will automatically display your route</p>"},{"location":"tutorials/photo-journey/#step-4-explore-your-journey-on-the-map","title":"Step 4: Explore Your Journey on the Map","text":"<p>Once processing is complete, PixTrail will display a map showing your journey:</p>"},{"location":"tutorials/photo-journey/#basic-map-navigation","title":"Basic Map Navigation","text":"<ol> <li>View the route marked by a blue line connecting all photo locations</li> <li>Examine photo markers by clicking on them to see details:</li> <li>Photo name</li> <li>Coordinates</li> <li>Timestamp</li> <li>Altitude (if available)</li> <li>Navigate the map using standard controls:</li> <li>Zoom in/out with the mouse wheel or +/- buttons</li> <li>Pan by clicking and dragging</li> <li>Double-click to zoom in on a specific location</li> </ol>"},{"location":"tutorials/photo-journey/#understanding-the-route-line","title":"Understanding the Route Line","text":"<p>The blue line connecting your photo markers represents your journey: - The line follows the chronological order of your photos based on their timestamps - Straighter lines indicate direct travel between points - The line assumes direct paths between consecutive photo locations</p>"},{"location":"tutorials/photo-journey/#step-5-use-advanced-visualization-features","title":"Step 5: Use Advanced Visualization Features","text":"<p>PixTrail offers several advanced visualization options to help you understand your journey better:</p>"},{"location":"tutorials/photo-journey/#enable-the-heat-map","title":"Enable the Heat Map","text":"<p>The heat map shows where you spent the most time or took the most photos:</p> <ol> <li>Click the \"Show Heatmap\" button</li> <li>Observe the color overlay that appears on the map:</li> <li>Red/yellow areas show where you spent the most time or took the most photos</li> <li>Blue areas indicate brief stops or fewer photos</li> <li>Use this visualization to identify the focal points of your journey</li> <li>Click \"Hide Heatmap\" to turn off this feature when done</li> </ol>"},{"location":"tutorials/photo-journey/#enable-clustering","title":"Enable Clustering","text":"<p>For journeys with many photos, clustering helps keep the map organized:</p> <ol> <li>Click the \"Enable Clustering\" button</li> <li>Notice how nearby markers are grouped into clusters with numbers indicating how many photos they contain</li> <li>Adjust the cluster radius using the slider that appears</li> <li>Smaller radius (left) creates more smaller clusters</li> <li>Larger radius (right) creates fewer larger clusters</li> <li>Click on clusters to zoom in and see individual photos</li> <li>Click \"Disable Clustering\" to turn off this feature when done</li> </ol>"},{"location":"tutorials/photo-journey/#view-journey-statistics","title":"View Journey Statistics","text":"<p>To analyze the quantitative aspects of your journey:</p> <ol> <li>Click the \"Show Statistics\" button</li> <li>Review the statistics panel that appears below the map:</li> <li>Check the total distance traveled</li> <li>See the duration of your journey</li> <li>Review elevation data and speed information</li> <li>Examine the interactive charts for:</li> <li>Elevation profile showing altitude changes during your journey</li> <li>Speed variations throughout your trip</li> <li>Hover over the charts to see exact values at specific points</li> <li>Click \"Hide Statistics\" to collapse this panel when done</li> </ol>"},{"location":"tutorials/photo-journey/#step-6-export-and-share-your-journey","title":"Step 6: Export and Share Your Journey","text":""},{"location":"tutorials/photo-journey/#download-the-gpx-file","title":"Download the GPX File","text":"<p>To save and share your journey data:</p> <ol> <li>Click the \"Download GPX\" button</li> <li>Choose where to save the GPX file on your computer</li> <li>The GPX file will contain:</li> <li>Waypoints for each photo location</li> <li>A track connecting all points in chronological order</li> <li>Timestamps and elevation data (when available)</li> </ol>"},{"location":"tutorials/photo-journey/#using-your-gpx-file","title":"Using Your GPX File","text":"<p>The GPX file can be imported into various applications:</p> <ul> <li>Google Earth: Import for 3D visualization</li> <li>OpenStreetMap: View on web-based maps</li> <li>GPS Devices: Load onto Garmin, TomTom, and other GPS units</li> <li>Fitness Apps: Import into Strava, Komoot, and similar platforms</li> <li>GIS Software: Use in professional geographic information systems</li> </ul>"},{"location":"tutorials/photo-journey/#sharing-options","title":"Sharing Options","text":"<p>Share your journey with others:</p> <ol> <li>Share the GPX file directly</li> <li>Create screenshots of the map view with interesting visualizations</li> <li>Combine with photos in a presentation or blog post</li> <li>Import into travel sharing platforms that support GPX files</li> </ol>"},{"location":"tutorials/photo-journey/#alternative-command-line-processing","title":"Alternative: Command Line Processing","text":"<p>If you prefer using the command line instead of the web interface:</p> <ol> <li>Open a terminal or command prompt</li> <li>Navigate to a directory where you want to save the GPX file</li> <li>Run the following command:    <pre><code>pixtrail -i /path/to/your/photos -o /path/to/output.gpx\n</code></pre></li> <li>Replace <code>/path/to/your/photos</code> with the actual path to your photo directory</li> <li>Replace <code>/path/to/output.gpx</code> with your desired output file path</li> <li>For recursive processing of subdirectories, add the <code>-r</code> flag:    <pre><code>pixtrail -i /path/to/your/photos -o /path/to/output.gpx -r\n</code></pre></li> <li>For more detailed output, add the <code>-v</code> (verbose) flag:    <pre><code>pixtrail -i /path/to/your/photos -o /path/to/output.gpx -v\n</code></pre></li> </ol>"},{"location":"tutorials/photo-journey/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"tutorials/photo-journey/#for-more-accurate-routes","title":"For More Accurate Routes","text":"<ul> <li>Take photos regularly along your journey, not just at major stops</li> <li>Ensure your camera's time is correctly set for accurate timestamps</li> <li>Let your camera/phone establish a GPS fix before taking photos</li> <li>Take more photos at complex parts of your route (e.g., winding trails)</li> </ul>"},{"location":"tutorials/photo-journey/#for-better-visualization","title":"For Better Visualization","text":"<ul> <li>For city trips: Use a smaller cluster radius (40-60px) to distinguish between nearby locations</li> <li>For road trips: Use a larger cluster radius (80-120px) to reduce clutter on the map</li> <li>For hiking: Pay attention to the elevation chart to analyze climbs and descents</li> <li>For multi-day journeys: Process each day separately for clearer visualization</li> </ul>"},{"location":"tutorials/photo-journey/#for-performance","title":"For Performance","text":"<ul> <li>Optimize large collections: If processing hundreds of photos, consider selecting a representative subset</li> <li>Use clustering: Enable clustering when displaying many photos for better performance</li> <li>Process in batches: For very large collections, process smaller batches separately</li> </ul>"},{"location":"tutorials/photo-journey/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/photo-journey/#no-gps-data-found","title":"No GPS Data Found","text":"<p>If PixTrail reports \"No GPS data found in photos\":</p> <ol> <li>Verify that your photos actually contain GPS data using other software</li> <li>Ensure you have permission to read the photos (file access rights)</li> <li>Check that you're processing supported file formats</li> <li>Try processing a single photo that you know has GPS data</li> <li>Use the verbose flag (<code>-v</code>) with the command line to see detailed information</li> </ol>"},{"location":"tutorials/photo-journey/#map-shows-incorrect-locations","title":"Map Shows Incorrect Locations","text":"<p>If the map shows points in unexpected locations:</p> <ol> <li>Check the GPS accuracy of your camera or smartphone</li> <li>Look for patterns in the errors (all points shifted in one direction)</li> <li>Verify the timestamps to ensure photos are in the correct sequence</li> <li>Consider the possibility of GPS interference during photo capture (buildings, canyons, etc.)</li> </ol>"},{"location":"tutorials/photo-journey/#performance-issues-with-many-photos","title":"Performance Issues with Many Photos","text":"<p>If processing many photos (hundreds or thousands):</p> <ol> <li>Process smaller batches of photos</li> <li>Use the clustering feature with a larger radius</li> <li>Consider filtering photos before processing (e.g., one photo every few minutes)</li> <li>Close other browser tabs and applications to free up memory</li> </ol>"},{"location":"tutorials/photo-journey/#next-steps","title":"Next Steps","text":"<p>Now that you've successfully documented a photo journey, you might want to explore:</p> <ul> <li>Batch Processing Large Photo Collections for handling multiple trips</li> <li>Customizing Visualizations for more advanced map options</li> <li>Advanced Statistics for deeper journey analysis</li> <li>Command Line Interface for automation and scripting</li> </ul>"},{"location":"tutorials/photo-journey/#example-a-day-in-rome","title":"Example: A Day in Rome","text":"<p>Here's a concrete example of using PixTrail to document a day trip in Rome:</p>"},{"location":"tutorials/photo-journey/#1-prepare-photos","title":"1. Prepare Photos","text":"<ul> <li>Collect 87 photos taken on a smartphone during a day in Rome</li> <li>Create a directory called \"Rome_Day_Trip\" and place all photos in it</li> </ul>"},{"location":"tutorials/photo-journey/#2-process-photos","title":"2. Process Photos","text":"<ul> <li>Start PixTrail web interface: <code>pixtrail -w</code></li> <li>Select the \"Rome_Day_Trip\" directory</li> <li>Click \"Process Photos\"</li> </ul>"},{"location":"tutorials/photo-journey/#3-explore-the-map","title":"3. Explore the Map","text":"<ul> <li>The map shows a walking route through central Rome</li> <li>Photo markers appear at locations like the Colosseum, Roman Forum, Trevi Fountain</li> <li>The route line shows the walking path between attractions</li> </ul>"},{"location":"tutorials/photo-journey/#4-enable-visualizations","title":"4. Enable Visualizations","text":"<ul> <li>Enable the heat map to see that most time was spent at major attractions</li> <li>Enable clustering with a radius of 50px to group photos taken at each landmark</li> <li>View statistics to see a total walking distance of 8.4 km over 7 hours 15 minutes</li> </ul>"},{"location":"tutorials/photo-journey/#5-analyze-the-journey","title":"5. Analyze the Journey","text":"<ul> <li>The elevation chart shows several hills (Rome's famous seven hills!)</li> <li>The speed chart reveals regular patterns of walking and stopping</li> <li>Clusters reveal that the most photos were taken at the Colosseum and Vatican</li> </ul>"},{"location":"tutorials/photo-journey/#6-export-and-share","title":"6. Export and Share","text":"<ul> <li>Download the GPX file</li> <li>Import into Google Maps to share with family</li> <li>Take screenshots of the heat map to show where most time was spent</li> </ul> <p>This example demonstrates how PixTrail transforms a collection of vacation photos into a comprehensive record of the journey, complete with route information, highlights, and statistics.</p> <p>By following this tutorial, you've learned how to document your own journeys with PixTrail, creating meaningful visualizations and data that enhance your travel memories.</p>"},{"location":"visualization/","title":"Visualization Features","text":"<p>PixTrail offers several powerful visualization features to help you understand and analyze your journeys. These features are available in the web interface and provide different ways to view and interact with your photo location data.</p>"},{"location":"visualization/#overview","title":"Overview","text":"<p>The visualization features in PixTrail include:</p> <ol> <li>Basic Route Mapping: View your photo locations as markers on an interactive map</li> <li>Heat Maps: Visualize where you spent the most time during your journey</li> <li>Marker Clustering: Group nearby photos for cleaner map displays</li> <li>Route Statistics: View detailed metrics about your journey</li> <li>Interactive Charts: Visualize elevation profiles and speed variations</li> </ol>"},{"location":"visualization/#basic-route-mapping","title":"Basic Route Mapping","text":"<p>After processing your photos, PixTrail will display a map showing:</p> <ul> <li>Markers for each photo location</li> <li>A line connecting the markers in chronological order (when timestamps are available)</li> <li>Pop-up information when clicking on markers, including:</li> <li>Photo name</li> <li>Coordinates</li> <li>Timestamp (when available)</li> <li>Altitude (when available)</li> </ul> <p>The map is based on OpenStreetMap and provides standard map controls: - Zoom in/out using buttons or mouse wheel - Pan by clicking and dragging - Reset view to show the entire route</p>"},{"location":"visualization/#map-controls","title":"Map Controls","text":"<p>The map interface includes several controls to enhance your visualization experience:</p> <ul> <li>Show/Hide Heatmap: Toggle the heat map overlay</li> <li>Enable/Disable Clustering: Toggle marker clustering</li> <li>Show/Hide Statistics: Show/hide the statistics panel</li> <li>Download GPX: Download the generated GPX file</li> <li>Clear Data: Remove all loaded data and reset the interface</li> </ul>"},{"location":"visualization/#advanced-visualization-features","title":"Advanced Visualization Features","text":""},{"location":"visualization/#heat-maps","title":"Heat Maps","text":"<p>The heat map feature visualizes where you spent the most time during your journey by creating a color-coded overlay on the map. Areas with higher intensity (red/yellow) indicate more photos or longer time spent at that location, while areas with lower intensity (blue/green) indicate fewer photos or shorter visits.</p> <p>Heat maps are particularly useful for: - Identifying the focal points of your journey - Discovering patterns in your travel behavior - Highlighting areas of particular interest - Visualizing density patterns across large datasets</p> <p>Learn more in the Heat Maps documentation.</p>"},{"location":"visualization/#marker-clustering","title":"Marker Clustering","text":"<p>The marker clustering feature helps manage routes with many photos by grouping nearby markers into clusters. This keeps the map clean and navigable, even with hundreds of photo locations.</p> <p>Marker clustering offers several benefits: - Reduces visual clutter when dealing with many photos - Improves map performance by reducing the number of visible markers - Provides a better overview of your journey - Allows dynamic exploration by clicking on clusters to zoom in</p> <p>Learn more in the Marker Clustering documentation.</p>"},{"location":"visualization/#route-statistics-and-charts","title":"Route Statistics and Charts","text":"<p>The statistics feature provides detailed metrics about your journey, including:</p> <ul> <li>Total distance traveled</li> <li>Duration of your journey</li> <li>Average and maximum speeds</li> <li>Elevation data (minimum, maximum, total gain)</li> <li>Photo count</li> </ul> <p>The statistics panel also includes interactive charts: - Elevation Profile: Visualizes altitude changes throughout your journey - Speed Profile: Shows speed variations between photo locations</p> <p>These charts help you understand the physical aspects of your journey, such as challenging climbs during a hike or varying speeds during a road trip.</p> <p>Learn more in the Statistics and Charts documentation.</p>"},{"location":"visualization/#using-visualization-features-together","title":"Using Visualization Features Together","text":"<p>PixTrail's visualization features can be combined to gain deeper insights:</p>"},{"location":"visualization/#combined-example-city-tour-analysis","title":"Combined Example: City Tour Analysis","text":"<p>For a city tour: - Basic map shows the overall route through the city - Clustering groups photos taken at the same landmark - Heat map highlights where you spent the most time (museums, landmarks) - Statistics reveal how far you walked and how long the tour took</p>"},{"location":"visualization/#combined-example-hiking-trip-visualization","title":"Combined Example: Hiking Trip Visualization","text":"<p>For a hiking trip: - Basic map shows the trail route - Elevation chart reveals the challenging sections with steep climbs - Speed chart correlates with difficulty (slower in steep sections) - Heat map identifies rest stops and viewpoints where you took multiple photos</p>"},{"location":"visualization/#combined-example-road-trip-documentation","title":"Combined Example: Road Trip Documentation","text":"<p>For a road trip: - Basic map shows the entire journey across multiple locations - Clustering organizes photos by location/stop - Statistics provide total distance and travel time - Speed chart distinguishes between highway travel and local exploration</p>"},{"location":"visualization/#best-practices-for-effective-visualization","title":"Best Practices for Effective Visualization","text":"<p>To get the most out of PixTrail's visualization features:</p> <ol> <li>Choose the right visualization for your purpose:</li> <li>Use the basic map for a simple overview</li> <li>Add clustering when working with many photos</li> <li>Enable the heat map to identify key locations</li> <li> <p>Use statistics to understand quantitative aspects</p> </li> <li> <p>Adjust settings for your specific data:</p> </li> <li>Use a smaller cluster radius for dense urban areas</li> <li>Use a larger cluster radius for sparse rural journeys</li> <li>Zoom in for detailed exploration of specific areas</li> <li> <p>Zoom out for a broader overview</p> </li> <li> <p>Interpret visualizations in context:</p> </li> <li>Heat intensity may indicate interest or simply waiting time</li> <li>Clusters don't always represent intentional stops</li> <li>Speed variations may be due to traffic or intentional pauses</li> <li> <p>Elevation data depends on the accuracy of your camera's GPS</p> </li> <li> <p>Compare different journeys:</p> </li> <li>Process multiple journeys and compare their statistics</li> <li>Look for patterns in your travel behavior across different trips</li> <li>Compare similar journeys (e.g., different hikes on the same trail)</li> </ol>"},{"location":"visualization/#technical-details","title":"Technical Details","text":"<p>PixTrail's visualization features are built using the following technologies:</p> <ul> <li>Maps: Leaflet.js for interactive mapping</li> <li>Heat Maps: Leaflet.heat plugin for heat map visualization</li> <li>Clustering: Leaflet.markercluster plugin for marker clustering</li> <li>Charts: Chart.js for interactive charts</li> <li>GPS Data: Processed from the EXIF metadata in your photos</li> </ul> <p>All visualization processing happens locally in your browser, ensuring your data remains private.</p>"},{"location":"visualization/#next-steps","title":"Next Steps","text":"<p>To learn more about specific visualization features, see:</p> <ul> <li>Heat Maps - Detailed information about heat map visualization</li> <li>Marker Clustering - How to use marker clustering effectively</li> <li>Statistics and Charts - Understanding journey metrics and charts</li> </ul> <p>For practical applications of these features, check out the Tutorials section, especially:</p> <ul> <li>Documenting a Photo Journey - Basic workflow</li> <li>Custom Visualizations - Advanced visualization techniques</li> </ul>"},{"location":"visualization/clustering/","title":"Marker Clustering","text":"<p>Marker clustering in PixTrail helps manage routes with many photos by grouping nearby markers into clusters. This keeps the map clean and navigable, even with hundreds of photo locations, while still allowing you to explore your journey in detail.</p>"},{"location":"visualization/clustering/#what-is-marker-clustering","title":"What is Marker Clustering?","text":"<p>Marker clustering is a technique that combines multiple map markers that are close together into a single cluster marker. This:</p> <ul> <li>Reduces visual clutter on the map</li> <li>Improves map performance with large datasets</li> <li>Makes it easier to identify general areas of activity</li> <li>Allows for dynamic exploration when zooming in</li> </ul>"},{"location":"visualization/clustering/#how-pixtrail-implements-clustering","title":"How PixTrail Implements Clustering","text":"<p>PixTrail uses the Leaflet.markercluster plugin to provide a sophisticated clustering system:</p> <ul> <li>Nearby markers are combined into a single cluster marker</li> <li>Clusters display the number of markers they contain</li> <li>Clusters are color-coded based on the number of contained markers</li> <li>Clusters dynamically split and recombine as you zoom in and out</li> <li>Clicking a cluster zooms the map to show its contents</li> <li>At maximum zoom, all individual markers are visible</li> </ul>"},{"location":"visualization/clustering/#using-the-clustering-feature","title":"Using the Clustering Feature","text":""},{"location":"visualization/clustering/#enabling-clustering","title":"Enabling Clustering","text":"<ol> <li>After processing your photos and viewing the map, click the \"Enable Clustering\" button in the map controls</li> <li>The markers will immediately reorganize into clusters where appropriate</li> <li>Click the button again (now labeled \"Disable Clustering\") to toggle it off</li> </ol>"},{"location":"visualization/clustering/#adjusting-cluster-radius","title":"Adjusting Cluster Radius","text":"<p>When clustering is enabled, a radius slider appears in the map controls:</p> <ol> <li>Move the slider left (smaller radius) to create more clusters with fewer markers each</li> <li>Move the slider right (larger radius) to create fewer clusters with more markers each</li> <li>The radius value (in pixels) is displayed next to the slider</li> <li>Changes take effect immediately as you move the slider</li> </ol> <p>The cluster radius represents the maximum distance (in screen pixels) between markers that will be grouped into a single cluster. This is different from geographic distance\u2014it's based on the current zoom level and screen position.</p>"},{"location":"visualization/clustering/#interacting-with-clusters","title":"Interacting with Clusters","text":"<ul> <li>Clicking a cluster: Zooms the map to show the markers in that cluster</li> <li>Hovering over a cluster: Shows the bounds of the contained markers</li> <li>Zooming in: Breaks large clusters into smaller clusters or individual markers</li> <li>Zooming out: Combines markers and small clusters into larger clusters</li> </ul>"},{"location":"visualization/clustering/#understanding-cluster-colors","title":"Understanding Cluster Colors","text":"<p>Clusters are automatically color-coded based on the number of markers they contain:</p> <ul> <li>Small clusters (few markers): Blue/green</li> <li>Medium clusters: Yellow/orange</li> <li>Large clusters (many markers): Red/purple</li> </ul> <p>This color coding helps you quickly identify areas with high concentration of photos.</p>"},{"location":"visualization/clustering/#when-to-use-clustering","title":"When to Use Clustering","text":"<p>Marker clustering is particularly useful in the following scenarios:</p>"},{"location":"visualization/clustering/#dense-urban-areas","title":"Dense Urban Areas","text":"<p>When photos are taken in a city or densely populated area, markers can become extremely cluttered. Clustering helps by:</p> <ul> <li>Grouping markers for each neighborhood or attraction</li> <li>Allowing you to explore areas of interest by clicking on clusters</li> <li>Maintaining performance even with hundreds of photos</li> </ul>"},{"location":"visualization/clustering/#large-photo-collections","title":"Large Photo Collections","text":"<p>For journeys with many photos (50+), clustering helps maintain usability:</p> <ul> <li>Prevents the map from becoming overwhelmed with markers</li> <li>Makes it easier to identify general areas of activity</li> <li>Improves the performance of the map interface</li> <li>Provides a cleaner visual presentation</li> </ul>"},{"location":"visualization/clustering/#multiple-day-trips","title":"Multiple Day Trips","text":"<p>For multi-day journeys covering large areas, clustering helps organize the data:</p> <ul> <li>Each day's activities might form natural clusters</li> <li>Different locations visited during the trip are clearly separated</li> <li>The overall journey structure becomes more apparent</li> </ul>"},{"location":"visualization/clustering/#advanced-usage","title":"Advanced Usage","text":""},{"location":"visualization/clustering/#finding-the-optimal-radius","title":"Finding the Optimal Radius","text":"<p>The optimal cluster radius depends on several factors:</p> <ul> <li>Type of journey: Urban explorations typically benefit from smaller radii (40-60px), while road trips work better with larger radii (80-120px)</li> <li>Number of photos: More photos generally require a larger radius</li> <li>Geographic spread: Widely dispersed photos need a larger radius than concentrated ones</li> <li>Desired level of detail: Smaller radius shows more detail but can be cluttered</li> </ul> <p>Experiment with the radius slider to find the best setting for your specific dataset.</p>"},{"location":"visualization/clustering/#multi-level-exploration","title":"Multi-level Exploration","text":"<p>Clustering enables a multi-level exploration approach:</p> <ol> <li>Overview level: Start with a zoomed-out view with clustering enabled to see the overall journey structure</li> <li>Area level: Click on clusters to zoom in and see sub-areas</li> <li>Detail level: Continue zooming until you see individual markers</li> <li>Photo level: Click on individual markers to see photo details</li> </ol> <p>This hierarchical approach is especially useful for complex journeys with many stops.</p>"},{"location":"visualization/clustering/#combining-with-other-visualizations","title":"Combining with Other Visualizations","text":"<p>Clustering works well in combination with other PixTrail features:</p> <ul> <li>With heat maps: See both clusters and heat intensity for a more complete picture</li> <li>With statistics: Understand the quantitative aspects while keeping the map clean</li> <li>With time filtering: Focus on specific parts of your journey while maintaining order</li> </ul>"},{"location":"visualization/clustering/#technical-details","title":"Technical Details","text":"<p>The marker clustering in PixTrail has the following default settings:</p> <ul> <li>Default cluster radius: 80 pixels</li> <li>Adjustable range: 20-200 pixels</li> <li>Spider mode: On (spreads markers when clicked at maximum zoom)</li> <li>Show coverage on hover: On (shows the bounds of contained markers)</li> <li>Zoom to bounds on click: On (zooms to show all markers in a cluster)</li> <li>Chunked loading: On (for better performance with large datasets)</li> </ul> <p>These settings provide a balance between visual clarity and detailed exploration, while maintaining good performance even with large datasets.</p>"},{"location":"visualization/clustering/#performance-considerations","title":"Performance Considerations","text":"<p>Clustering significantly improves map performance with large datasets:</p> <ul> <li>Without clustering: Each marker is individually rendered and managed by the browser</li> <li>With clustering: Fewer objects need to be rendered, especially at lower zoom levels</li> </ul> <p>This difference becomes more pronounced with larger datasets:</p> Number of Photos Without Clustering With Clustering 50 photos Good performance Excellent performance 100-200 photos Moderate performance Good performance 300+ photos Poor performance Good performance 1000+ photos Very poor/unusable Moderate performance <p>For very large collections (1000+ photos), consider processing your journey in segments.</p>"},{"location":"visualization/clustering/#tips-for-using-clustering-effectively","title":"Tips for Using Clustering Effectively","text":""},{"location":"visualization/clustering/#for-city-tours","title":"For City Tours","text":"<ul> <li>Use a smaller radius (40-60px) to distinguish between nearby attractions</li> <li>Zoom in to specific neighborhoods to explore in detail</li> <li>Look for natural clusters that form around major points of interest</li> </ul>"},{"location":"visualization/clustering/#for-road-trips","title":"For Road Trips","text":"<ul> <li>Use a larger radius (80-120px) to create clearer stops</li> <li>Each cluster typically represents a destination or stop</li> <li>The space between clusters helps visualize the journey structure</li> </ul>"},{"location":"visualization/clustering/#for-hiking-trips","title":"For Hiking Trips","text":"<ul> <li>Use a medium radius (60-80px)</li> <li>Clusters often represent viewpoints or rest areas</li> <li>Combine with the elevation chart to understand the relationship between clusters and terrain</li> </ul>"},{"location":"visualization/clustering/#for-event-documentation","title":"For Event Documentation","text":"<ul> <li>Use a smaller radius for detail</li> <li>Clusters typically form around key moments or locations</li> <li>The density of clusters indicates the focus of the event</li> </ul>"},{"location":"visualization/clustering/#limitations","title":"Limitations","text":"<ul> <li>Very small clusters (2-3 markers) may not significantly improve map readability</li> <li>At maximum zoom, clustering may not activate even if enabled</li> <li>The visual weight of clusters may not perfectly represent the number of contained markers</li> <li>Clusters are based on screen distance (pixels), not geographic distance</li> </ul>"},{"location":"visualization/clustering/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"visualization/clustering/#why-do-markers-seem-to-jump-around-when-i-enable-clustering","title":"Why do markers seem to jump around when I enable clustering?","text":"<p>This is normal and happens because: - The clustering algorithm groups nearby markers based on screen position - The center of a cluster is calculated as the average position of all contained markers - As you zoom in or out, the relative screen positions change, causing clusters to split or combine</p>"},{"location":"visualization/clustering/#can-i-customize-cluster-colors-or-appearance","title":"Can I customize cluster colors or appearance?","text":"<p>Currently, the cluster colors are preset based on the number of contained markers. Future versions may include more customization options.</p>"},{"location":"visualization/clustering/#will-clustering-affect-my-gpx-file-export","title":"Will clustering affect my GPX file export?","text":"<p>No, clustering is purely a visualization feature. When you export a GPX file, all individual photo locations are included in their original form.</p>"},{"location":"visualization/clustering/#what-happens-with-photos-that-have-inaccurate-gps-data","title":"What happens with photos that have inaccurate GPS data?","text":"<p>Clustering can actually help mitigate GPS inaccuracy by grouping markers that are likely part of the same location, even if their exact coordinates vary slightly.</p>"},{"location":"visualization/clustering/#is-there-a-limit-to-how-many-photos-can-be-clustered","title":"Is there a limit to how many photos can be clustered?","text":"<p>While there's no hard limit, performance may degrade with extremely large datasets (thousands of photos). For best results with very large collections, consider batch processing or filtering your dataset.</p>"},{"location":"visualization/clustering/#related-features","title":"Related Features","text":"<ul> <li>Heat Maps - Visualize where you spent the most time during your journey</li> <li>Statistics and Charts - Quantify your journey with detailed metrics</li> <li>Custom Visualizations - Advanced visualization techniques</li> </ul> <p>By combining clustering with other visualization features, you can create a clearer and more insightful representation of your journeys.</p>"},{"location":"visualization/heatmap/","title":"Heat Map Visualization","text":"<p>The heat map feature in PixTrail creates a powerful visual representation of your journey, showing where you spent the most time and took the most photos. This color-coded overlay helps identify the focal points and patterns in your travels.</p>"},{"location":"visualization/heatmap/#what-is-a-heat-map","title":"What is a Heat Map?","text":"<p>A heat map is a graphical representation of data where values are depicted by colors. In PixTrail, the heat map shows the intensity of photo activity at different locations:</p> <ul> <li>Red/Yellow areas: Locations with high activity (many photos or long duration)</li> <li>Green areas: Locations with moderate activity</li> <li>Blue areas: Locations with low activity (few photos or brief stops)</li> </ul> <p>This visualization helps identify the focal points of your journey - the places where you spent the most time or took the most photos.</p>"},{"location":"visualization/heatmap/#how-pixtrail-creates-heat-maps","title":"How PixTrail Creates Heat Maps","text":"<p>PixTrail uses two primary factors to determine the intensity at each location:</p> <ol> <li>Photo density: The number of photos taken at or near a location</li> <li>Time spent: The duration between the first and last photo at a location (when timestamps are available)</li> </ol> <p>These factors are combined to create a weighted heat map that reflects both the number of photos and the time spent at each location.</p>"},{"location":"visualization/heatmap/#heat-map-algorithm","title":"Heat Map Algorithm","text":"<p>The heat map is generated using the following approach:</p> <ol> <li>Each photo location becomes a data point with an initial intensity value</li> <li>Photos taken close together (within approximately 25 meters) contribute to the same \"hot spot\"</li> <li>When timestamps are available, locations where you spent more time receive higher intensity</li> <li>The intensity values are normalized across the entire dataset</li> <li>A gradient color scale is applied, ranging from blue (low) through green and yellow to red (high)</li> </ol>"},{"location":"visualization/heatmap/#using-the-heat-map-feature","title":"Using the Heat Map Feature","text":""},{"location":"visualization/heatmap/#enabling-the-heat-map","title":"Enabling the Heat Map","text":"<ol> <li>After processing your photos and viewing the map, click the \"Show Heatmap\" button in the map controls</li> <li>The heat map overlay will appear on the map</li> <li>Click the button again (now labeled \"Hide Heatmap\") to toggle it off</li> </ol>"},{"location":"visualization/heatmap/#reading-the-heat-map","title":"Reading the Heat Map","text":"<p>The heat map uses a color gradient to show intensity:</p> <ul> <li>Red: Highest intensity (most photos/time spent)</li> <li>Yellow: High intensity</li> <li>Green: Medium intensity</li> <li>Blue: Low intensity (few photos/brief visits)</li> </ul> <p>Look for red and yellow \"hotspots\" to identify the places where you spent the most time or took the most photos.</p>"},{"location":"visualization/heatmap/#combining-with-other-features","title":"Combining with Other Features","text":"<p>The heat map can be used alongside other visualization features:</p> <ul> <li>With marker clustering: See both photo clusters and areas of high activity</li> <li>With statistics: Compare hotspots with elevation and speed changes</li> <li>With the basic map: Relate hotspots to actual map features (landmarks, roads, etc.)</li> </ul>"},{"location":"visualization/heatmap/#practical-applications","title":"Practical Applications","text":""},{"location":"visualization/heatmap/#city-tour-analysis","title":"City Tour Analysis","text":"<p>In a city tour heat map, you might see:</p> <ul> <li>Red hotspots: Major attractions where you spent significant time</li> <li>Yellow/green areas: Secondary attractions or brief stops</li> <li>Blue traces: Transit routes between attractions</li> </ul> <p>This visualization helps you: - Identify which attractions captured your attention the longest - Discover patterns in your urban exploration - Remember key locations when revisiting the area - Plan future trips by identifying popular spots worth more time</p>"},{"location":"visualization/heatmap/#hiking-trip-analysis","title":"Hiking Trip Analysis","text":"<p>In a hiking trip heat map, you might see:</p> <ul> <li>Red/yellow spots: Viewpoints, rest areas, or particularly scenic sections</li> <li>Green areas: Regular trail sections where you took occasional photos</li> <li>Blue areas: Transit sections with few photos</li> </ul> <p>This visualization helps you: - Identify the most scenic or interesting parts of a trail - Locate rest spots and viewpoints - Plan future hikes by focusing on high-interest areas - Share recommendations with others</p>"},{"location":"visualization/heatmap/#road-trip-documentation","title":"Road Trip Documentation","text":"<p>In a road trip heat map, you might see:</p> <ul> <li>Red/yellow clusters: Major stops and destinations</li> <li>Green spots: Brief roadside attractions or photo opportunities</li> <li>Blue lines: Routes where you drove without stopping much</li> </ul> <p>This visualization helps you: - Distinguish between transit and exploration phases - Identify major destinations versus quick stops - Recall the relative importance of different locations - Plan future trips with better time allocation</p>"},{"location":"visualization/heatmap/#technical-details","title":"Technical Details","text":"<p>The heat map is created using the Leaflet.heat plugin with the following parameters:</p> <ul> <li>Radius: 25 pixels (determines the smoothness of the heat map)</li> <li>Blur: 15 pixels (determines how fuzzy the heat map appears)</li> <li>Max Zoom: 17 (determines at what zoom level the heat map stops scaling)</li> <li>Gradient: A custom color gradient from blue (low) through green and yellow to red (high)</li> </ul> <p>Each point's intensity is calculated using:</p> <ul> <li>Base intensity value for each photo</li> <li>Proximity multiplier for nearby photos</li> <li>Time factor when timestamps are available</li> </ul>"},{"location":"visualization/heatmap/#advanced-usage-tips","title":"Advanced Usage Tips","text":""},{"location":"visualization/heatmap/#interpreting-different-patterns","title":"Interpreting Different Patterns","text":"<p>Different heat map patterns can reveal insights about your journey:</p> <ul> <li>Distinct hotspots: Indicate specific points of interest where you spent time</li> <li>Linear hotspots: Suggest interesting paths or routes you explored thoroughly</li> <li>Diffuse patterns: Indicate general exploration without specific focus points</li> <li>Isolated points: Show brief stops or single photo opportunities</li> </ul>"},{"location":"visualization/heatmap/#combining-with-map-features","title":"Combining with Map Features","text":"<p>For deeper insights, relate heat patterns to actual map features:</p> <ul> <li>Compare hotspots with landmarks on the map</li> <li>Look for patterns related to terrain features (for hiking)</li> <li>Notice correlations with urban features (for city tours)</li> <li>Identify patterns related to transportation hubs</li> </ul>"},{"location":"visualization/heatmap/#time-based-patterns","title":"Time-Based Patterns","text":"<p>If your photos have accurate timestamps, look for time-based patterns:</p> <ul> <li>Morning vs. afternoon exploration patterns</li> <li>Changes in exploration intensity throughout a multi-day journey</li> <li>Time spent at different types of locations (museums vs. outdoor attractions)</li> </ul>"},{"location":"visualization/heatmap/#best-practices","title":"Best Practices","text":"<p>To get the most out of heat map visualization:</p> <ol> <li>Include enough photos: Heat maps work best with at least 20-30 photos</li> <li>Ensure photo timestamps are accurate: This improves time-based intensity calculation</li> <li>Take photos at consistent intervals: For more accurate representation of your journey</li> <li>Combine with other visualizations: Use clustering and statistics for a complete picture</li> <li>Zoom to explore: Different zoom levels reveal different patterns</li> </ol>"},{"location":"visualization/heatmap/#limitations","title":"Limitations","text":"<p>While heat maps are powerful, they have some limitations to be aware of:</p> <ul> <li>GPS accuracy: Heat map accuracy depends on the GPS accuracy in your photos</li> <li>Timestamp reliability: Time-based intensity requires accurate photo timestamps</li> <li>Sampling bias: You might take more photos at interesting places regardless of time spent</li> <li>Interpretation subjectivity: Patterns may be subject to different interpretations</li> <li>Map scale influence: Different zoom levels can suggest different patterns</li> </ul>"},{"location":"visualization/heatmap/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"visualization/heatmap/#why-dont-i-see-any-clear-hotspots-in-my-heat-map","title":"Why don't I see any clear hotspots in my heat map?","text":"<p>This could be due to: - Too few photos in your dataset - Photos spread out over a large area - Similar time spent at all locations - GPS inaccuracy in your photos</p> <p>Try processing a journey with more photos or photos taken in a more concentrated area.</p>"},{"location":"visualization/heatmap/#why-are-some-areas-showing-high-intensity-when-i-only-took-one-photo-there","title":"Why are some areas showing high intensity when I only took one photo there?","text":"<p>If you have timestamps in your photos, an area might show high intensity if: - You spent a long time there between photos - There are several photos taken very close together - GPS inaccuracy grouped photos that were actually spread out</p>"},{"location":"visualization/heatmap/#can-i-adjust-the-heat-map-sensitivity","title":"Can I adjust the heat map sensitivity?","text":"<p>Currently, the heat map parameters are preset for optimal visualization in most cases. Future versions may include customizable settings for radius, blur, and intensity calculation.</p>"},{"location":"visualization/heatmap/#does-the-heat-map-take-elevation-into-account","title":"Does the heat map take elevation into account?","text":"<p>No, the current heat map is based only on horizontal position (latitude/longitude). Elevation is not considered in the intensity calculation.</p>"},{"location":"visualization/heatmap/#can-i-export-or-save-the-heat-map-visualization","title":"Can I export or save the heat map visualization?","text":"<p>You can take a screenshot of the current view. Future versions may include direct export options for visualizations.</p>"},{"location":"visualization/heatmap/#related-features","title":"Related Features","text":"<ul> <li>Marker Clustering - Group nearby markers for cleaner map displays</li> <li>Statistics and Charts - Quantify your journey with detailed metrics</li> <li>Custom Visualizations - Advanced visualization techniques</li> </ul> <p>By combining heat maps with other visualizations, you can gain deeper insights into your journeys and create more compelling visual stories of your adventures.</p>"},{"location":"visualization/statistics/","title":"Statistics and Charts","text":"<p>PixTrail provides comprehensive statistics and interactive charts to help you understand the quantitative aspects of your journey, including distance, time, speed, and elevation data. These metrics transform your photo collection into a detailed record of your adventure.</p>"},{"location":"visualization/statistics/#statistics-overview","title":"Statistics Overview","text":"<p>The statistics feature offers two main components:</p> <ol> <li>Summary Statistics: Key metrics about your journey in a tabular format</li> <li>Interactive Charts: Visual representations of elevation and speed data</li> </ol>"},{"location":"visualization/statistics/#accessing-statistics","title":"Accessing Statistics","text":"<p>To view statistics for your processed photos:</p> <ol> <li>After processing your photos and viewing the map, click the \"Show Statistics\" button in the map controls</li> <li>The statistics panel will appear below the map</li> <li>Click the button again (now labeled \"Hide Statistics\") to toggle it off</li> </ol>"},{"location":"visualization/statistics/#summary-statistics","title":"Summary Statistics","text":"<p>The summary statistics table includes the following metrics:</p> Statistic Description Total Distance The cumulative distance traveled between photo locations (in kilometers) Total Duration The time between the first and last photo (in HH:MM:SS format) Start Time The timestamp of the first photo End Time The timestamp of the last photo Avg. Speed Average traveling speed between photo locations (in km/h) Max. Speed Maximum recorded speed between any two consecutive photo locations (in km/h) Min Elevation Lowest recorded elevation (in meters) Max Elevation Highest recorded elevation (in meters) Elevation Gain The total climb during the journey (only positive changes in elevation) Photo Count Total number of photos with GPS data used in the analysis"},{"location":"visualization/statistics/#interactive-charts","title":"Interactive Charts","text":""},{"location":"visualization/statistics/#elevation-profile","title":"Elevation Profile","text":"<p>The elevation profile chart shows how elevation changed throughout your journey:</p> <ul> <li>X-axis: Photo index (sequence of photos)</li> <li>Y-axis: Elevation (in meters)</li> <li>Line: Smooth curve connecting elevation points</li> <li>Hover: Shows exact elevation at any point</li> </ul> <p>This chart helps visualize: - Uphill and downhill sections - Flat portions of the journey - Maximum and minimum elevation points - Overall elevation trends</p>"},{"location":"visualization/statistics/#speed-profile","title":"Speed Profile","text":"<p>The speed profile chart shows how your speed varied between photo locations:</p> <ul> <li>X-axis: Segment index (segments between photos)</li> <li>Y-axis: Speed (in km/h)</li> <li>Line: Connected line showing speed changes</li> <li>Hover: Shows exact speed for any segment</li> </ul> <p>This chart helps visualize: - Fast and slow portions of the journey - Consistent vs. variable pace - Stops (near-zero speed segments) - Transportation changes (e.g., walking vs. driving)</p>"},{"location":"visualization/statistics/#how-statistics-are-calculated","title":"How Statistics Are Calculated","text":"<p>PixTrail calculates statistics based on the GPS coordinates and timestamps in your photos:</p>"},{"location":"visualization/statistics/#distance-calculation","title":"Distance Calculation","text":"<ul> <li>Uses the Haversine formula to calculate distances between coordinates</li> <li>Accounts for the Earth's curvature</li> <li>Provides distances in kilometers (with two decimal places precision)</li> <li>Excludes unreasonable jumps (&gt;10km between consecutive photos) to avoid GPS errors</li> </ul>"},{"location":"visualization/statistics/#speed-calculation","title":"Speed Calculation","text":"<ul> <li>Based on distance and time between consecutive photos</li> <li>Reported in kilometers per hour (km/h)</li> <li>Excludes unreasonable speeds (&gt;300 km/h) to avoid GPS or timestamp errors</li> <li>Average speed calculated only from valid speed measurements</li> </ul>"},{"location":"visualization/statistics/#elevation-analysis","title":"Elevation Analysis","text":"<ul> <li>Uses elevation data from photo EXIF metadata (if available)</li> <li>Elevation gain only counts upward changes (not downward)</li> <li>All elevation measurements are in meters</li> <li>Filters out anomalous elevation changes that likely represent GPS errors</li> </ul>"},{"location":"visualization/statistics/#time-calculation","title":"Time Calculation","text":"<ul> <li>Based on the timestamps in photo EXIF metadata</li> <li>Reported in consistent time zone (based on the first photo's timezone)</li> <li>Duration calculated as the difference between first and last photo times</li> <li>Times displayed in local format based on your browser settings</li> </ul>"},{"location":"visualization/statistics/#practical-applications","title":"Practical Applications","text":""},{"location":"visualization/statistics/#hiking-analysis","title":"Hiking Analysis","text":"<p>For hiking trips, statistics help you: - Measure the total distance hiked - Calculate your average hiking pace - Quantify the elevation gain (important for difficulty assessment) - Identify the steepest sections from the elevation chart - Detect rest periods from the speed chart - Compare difficulty between different hikes</p>"},{"location":"visualization/statistics/#city-tour-review","title":"City Tour Review","text":"<p>For urban explorations, statistics help you: - Track how far you walked in a day - Measure the total time spent exploring - Identify periods of rest or attraction visits (low speed) - See elevation changes in hilly cities - Plan future visits based on distances and times</p>"},{"location":"visualization/statistics/#road-trip-documentation","title":"Road Trip Documentation","text":"<p>For road trips, statistics help you: - Measure total distance driven - Calculate average driving speed - Identify highways vs. local roads from speed patterns - Detect stops and breaks in the journey - Track mountainous sections from elevation data - Analyze your travel patterns for better planning</p>"},{"location":"visualization/statistics/#advanced-interpretations","title":"Advanced Interpretations","text":""},{"location":"visualization/statistics/#speed-patterns","title":"Speed Patterns","text":"<p>Different speed patterns can reveal insights about your journey:</p> <ul> <li>Consistent speed: Typically indicates highway driving or steady hiking</li> <li>Varying speeds: Often shows urban exploration or technical trail sections</li> <li>Near-zero segments: Represent stops at attractions, rest areas, or traffic</li> <li>Sharp peaks: May indicate transportation changes (e.g., walking to driving)</li> <li>Gradual changes: Often correlate with terrain changes or traffic conditions</li> </ul>"},{"location":"visualization/statistics/#elevation-patterns","title":"Elevation Patterns","text":"<p>The elevation chart can be particularly revealing:</p> <ul> <li>Sharp peaks and valleys: Indicate steep terrain or mountainous areas</li> <li>Gradual slopes: Show gentle hills or mountain passes</li> <li>Plateaus: Represent flat sections at consistent elevation</li> <li>Sawtooth patterns: Often indicate ridge hiking or rolling hills</li> <li>Long climbs followed by quick descents: Typical for summit hikes</li> </ul>"},{"location":"visualization/statistics/#correlating-charts-with-map","title":"Correlating Charts with Map","text":"<p>For deeper insights, correlate the charts with your map visualizations:</p> <ul> <li>Match elevation peaks with geographic features</li> <li>Identify where speed drops correlate with points of interest</li> <li>Look for patterns in clusters and heat map intensity that match speed changes</li> <li>Compare the elevation profile with the terrain visible on the map</li> </ul>"},{"location":"visualization/statistics/#troubleshooting-and-limitations","title":"Troubleshooting and Limitations","text":""},{"location":"visualization/statistics/#missing-or-inaccurate-timestamps","title":"Missing or Inaccurate Timestamps","text":"<p>If your photos lack accurate timestamps: - Speed calculations will be omitted or unreliable - Duration may show as \"Unknown\" - The route line will still be drawn, but without time-based information</p>"},{"location":"visualization/statistics/#gps-accuracy-issues","title":"GPS Accuracy Issues","text":"<p>GPS accuracy affects statistical calculations: - Inaccurate GPS coordinates may lead to overestimated distances - Urban canyons (tall buildings) often reduce GPS accuracy - Elevation data from consumer cameras is generally less accurate than horizontal position</p>"},{"location":"visualization/statistics/#time-gaps-between-photos","title":"Time Gaps Between Photos","text":"<p>Large time gaps between photos can affect your statistics: - Average speed may not represent your actual pace during gaps - The route line assumes direct travel between consecutive photos - Very large gaps may be filtered out as unreasonable</p>"},{"location":"visualization/statistics/#speed-and-distance-anomalies","title":"Speed and Distance Anomalies","text":"<p>If you see unusual speed or distance values: - Very high speeds may indicate timestamp errors or large jumps - Distances may be overestimated if GPS data has significant noise - Photos taken in approximately the same location may show artificially low speeds</p>"},{"location":"visualization/statistics/#best-practices","title":"Best Practices","text":"<p>To get the most accurate statistics:</p> <ol> <li>Ensure accurate timestamps: Set your camera's clock correctly before your journey</li> <li>Take photos at regular intervals: This provides more consistent tracking</li> <li>Use a camera with good GPS: Higher-end cameras and smartphones generally have better GPS accuracy</li> <li>Take more photos on complex routes: More data points improve the accuracy of the route representation</li> <li>Let your camera/phone establish GPS fix: Avoid taking photos immediately after turning on GPS</li> </ol>"},{"location":"visualization/statistics/#exporting-statistics","title":"Exporting Statistics","text":"<p>Currently, statistics can be viewed in the web interface. To save this information:</p> <ul> <li>Take a screenshot of the statistics panel for visual records</li> <li>Export the GPX file, which includes all coordinate and timestamp data</li> <li>Future versions may include direct export options for statistics reports</li> </ul>"},{"location":"visualization/statistics/#comparing-multiple-journeys","title":"Comparing Multiple Journeys","text":"<p>While PixTrail doesn't currently offer direct journey comparison, you can:</p> <ol> <li>Process each journey separately</li> <li>Record the statistics for each</li> <li>Compare them manually or in a spreadsheet</li> <li>Look for patterns and differences in distance, speed, elevation, etc.</li> </ol>"},{"location":"visualization/statistics/#technical-details","title":"Technical Details","text":"<p>The statistics and charts are powered by the following technologies:</p> <ul> <li>Distance and speed calculations use the Haversine formula for accuracy</li> <li>Charts are rendered using Chart.js for interactive visualization</li> <li>All calculations happen locally in your browser</li> <li>GPS data cleaning algorithms remove outliers for more accurate statistics</li> </ul>"},{"location":"visualization/statistics/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"visualization/statistics/#why-do-my-speed-calculations-seem-inaccurate","title":"Why do my speed calculations seem inaccurate?","text":"<p>Speed calculations depend on both distance and time between photos. Inaccuracies can result from: - GPS errors in the original photos - Incorrect camera clock settings - Too few photos to accurately represent your journey - Large gaps between photos</p>"},{"location":"visualization/statistics/#why-is-my-total-distance-different-from-what-my-fitness-tracker-recorded","title":"Why is my total distance different from what my fitness tracker recorded?","text":"<p>Several factors can cause differences: - PixTrail calculates straight lines between photo points (missing any detours) - GPS accuracy varies between devices - Fitness trackers typically record more frequent data points - PixTrail filters out anomalous jumps that might be included in other tracking</p>"},{"location":"visualization/statistics/#can-i-customize-the-charts-or-statistics","title":"Can I customize the charts or statistics?","text":"<p>Currently, the charts and statistics have preset configurations. Future versions may include options for customization.</p>"},{"location":"visualization/statistics/#how-accurate-is-the-elevation-data","title":"How accurate is the elevation data?","text":"<p>Elevation accuracy depends on your camera's GPS capabilities: - Smartphones generally have moderate elevation accuracy (\u00b110-20 meters) - Dedicated GPS cameras may have better accuracy - Elevation is typically less accurate than horizontal position - Some cameras don't record elevation at all</p>"},{"location":"visualization/statistics/#are-statistics-available-when-using-the-command-line","title":"Are statistics available when using the command line?","text":"<p>Basic statistics are printed to the console when using verbose mode (<code>-v</code> flag). For detailed statistics and charts, use the web interface.</p>"},{"location":"visualization/statistics/#related-features","title":"Related Features","text":"<ul> <li>Heat Maps - Visualize where you spent the most time during your journey</li> <li>Marker Clustering - Group nearby markers for cleaner map displays</li> <li>Custom Visualizations - Advanced visualization techniques</li> </ul> <p>By analyzing the statistical aspects of your journeys, you can gain deeper insights into your travel patterns and create more informative records of your adventures.</p>"}]}